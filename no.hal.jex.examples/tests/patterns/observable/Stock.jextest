package patterns.observable

test
class Stock {
	new (String name, double value)
	double getPrice()
	void setPrice(double value)
	String getTicker()
	void addStockListener(StockListener listener)
	void removeStockListener(StockListener listener)
}
interface StockListener {
	void stockPriceChanged(Stock stock, double oldPrice, double newPrice)
}

instance stock = new Stock("APPL", 110.0d )

sequence constructor {
	-->
	state stock {
		ticker == "APPL"
		price == 110.0d
	}
}

val double oldPrice1 = 0.0d, double newPrice1 = 110.0d
val double oldPrice2 = 0.0d, double newPrice2 = 0.0d

method setPrice1(double newPrice, double expectedOldPrice, double expectedNewPrice) {
	this.oldPrice1 = this.newPrice1
	this.newPrice1 = newPrice
	stock.price = newPrice
	assertEquals(expectedOldPrice, this.oldPrice2)
	assertEquals(expectedNewPrice, this.newPrice2)
}

method setPrice2(double oldPrice, double newPrice) {
	this.oldPrice2 = oldPrice
	this.newPrice2 = newPrice
}

sequence stockListener {
	-- stock.addStockListener([Stock stock, double oldPrice, double newPrice |
		setPrice2(oldPrice, newPrice)
	]),
	setPrice1(118.0d, 110.0d, 118.0d) -->
	state stock {
		price == 118.0d
	}
	-- setPrice1(121.0d, 118.0d, 121.0d) -->
	state stock {
		price == 121.0d
	}
}

test

class StockIndex implements StockListener {
	new (String name, Stock... stocks)
	double getIndex()
	void addStock(Stock stock)
	void removeStock(Stock stock)
}

instance double facebookPrice = 67.80, double applePrice = 534.98
instance Stock facebook = new Stock("FB", facebookPrice), Stock apple = new Stock("AAPL", applePrice)
instance index0 = new StockIndex("OSEBX"), index1 = new StockIndex("OSEBX", facebook), indexN = new StockIndex("OSEBX", facebook, apple)

sequence constructor "Tests constructor with no Stock-objects as argument" {
	-->
	state
		index0 { index == 0.0 }
		index1 { index == facebookPrice }
		indexN { index == facebookPrice + applePrice }
}

sequence addStock {
	-- index0.addStock(facebook) -->
	state index0 { index == facebookPrice }
	-- index0.addStock(facebook) -->
	state index0 { index == facebookPrice }
}

sequence removeStock {
	-- indexN.removeStock(apple) -->
	state indexN { index == facebookPrice }
	-- indexN.removeStock(apple) -->
	state indexN { index == facebookPrice }
	-- indexN.removeStock(facebook) -->
	state indexN { index == 0.0 }
}

sequence changePrice {
	val double facebookPrice2 = 67.0, double facebookPrice3 = 69.0
	-- facebook.setPrice(facebookPrice2) -->
	state
		index1 { index == facebookPrice2 }	
		indexN { index == facebookPrice2 + applePrice }	
	-- facebook.setPrice(facebookPrice3) -->
	state
		index1 { index == facebookPrice3 }
		indexN { index == facebookPrice3 + applePrice }
}

method boolean ==(double n1, double n2) {
	val epsilon = 0.000001d
	n1 + epsilon >= n2 && n1 - epsilon <= n2
}