grammar no.hal.jex.jextest.JexTest with org.eclipse.xtext.xbase.Xbase

import "http://www.eclipse.org/xtext/common/JavaVMTypes" as types
import "http://www.eclipse.org/xtext/xbase/Xtype" as xtype
import "http://www.eclipse.org/xtext/xbase/Xbase" as xbase

generate jexTest "http://www.hal.no/jex/jextest/JexTest"

JexTestSuite:
	{JexTestSuite} ('suite' suiteClassName = QName)?
	(importSection = XImportSection)?
	(
		(('instance' | 'val') (instances += Instance) (',' instances += Instance)*) |
		(stateFunctions += StateFunction) |
		(methods += Method)
	)*
	(testCases += JexTestCase)*
;

JexTestCase:
	{JexTestCase} 'test'
	(
		(testedClasses += TestedClass)* |
		(testedClassRef = JvmParameterizedTypeReference)
	)
	('with' testClassName = QName)?
	(description = STRING)? ('@' url = STRING)?

	(importSection = XImportSection)?
	(
		(('instance' | 'val') (instances += SuiteInstance) (',' instances += SuiteInstance)*) |
		(stateFunctions += StateFunction) |
		(testSequences += JexTestSequence) |
		(methods += Method)
	)*
	;

SuiteInstance returns Instance:
	(type = JvmTypeReference)? name = ID ('=' expr = XExpression)?
;

Instance:
	(type = JvmTypeReference)? name = ID ('=' expr = XExpression)?
;

TestMemberContext: JexTestSuite | JexTestCase;

StateTestContext: StateFunction | JexTestSequence;

PropertiesTestOwner: StateFunction | ObjectTest;

StateFunction:
	'state' 'method' (type = JvmParameterizedTypeReference)? name = ID (description = STRING)?
	'(' (parameters += Parameter (',' parameters += Parameter)*)? ')'
	test = PropertiesTest
;

JexTestSequence:
	'sequence' name = ID (description = STRING)?
	('tests' (tested += JvmOperationRef (',' tested += JvmOperationRef)*)?)?
	'{'
		(('instance' | 'val') (instances += Instance) (',' instances += Instance)*)*
		(transitions += Transition)*
	'}'
;

JvmOperationRef:
	methodName = ID
	('(' (parameterTypes += JvmParameterizedTypeReference (',' parameterTypes += JvmParameterizedTypeReference)*)? ')')?
;

QName: ID + ('.' ID)*;

State: {State}
	'state' ('#' name = ID)? (description = STRING)?
	(objectTests += ObjectTest)+
;

ObjectTest:
	(instance = [Instance | ID])?
	test = PropertiesTest
;

PropertiesTest returns xbase::XBlockExpression:
	{PropertiesTest}
	(
	('{' (expressions += XExpression ';'?)* '}')
	)
	;

Transition:
	(
		// optional source
		(source = TransitionSource)?
		// action part
		(description = STRING)? '--'
		(actions += TransitionAction) (',' actions += TransitionAction)*
		// effect part
		(effects += TransitionEffect)
	) |
	// initial state
	effects += TransitionTargetEffect
	;

TransitionSource:
	state = State | ('#' stateRef = [State | ID])	
;

TransitionAction: TransitionExpressionAction; // | TransitionInputAction;

TransitionExpressionAction:
	expr = XExpression ('#' times = XExpression)?
;
TransitionInputAction:
	'inputs' input = STRING
;

TransitionEffect: TransitionTargetEffect | TransitionEffect2;
TransitionEffect2: TransitionExceptionEffect | TransitionCallbackEffect; // | TransitionOutputEffect;

TransitionTargetEffect:
	'-->' (state = State | ('#' stateRef = [State | ID]))
;
TransitionExceptionEffect:
 	'throws' exceptionClass = JvmParameterizedTypeReference
;
TransitionOutputEffect:
 	'outputs' pattern = STRING
;

TransitionCallbackEffect:
 	'callback'
 	instance = [Instance | ID] 'to'
 	(callbackClass = JvmParameterizedTypeReference '.')? methodName = ID (parameters = ParameterList)?
 	arguments = PropertiesTest
;

Method:
	'method' (returnType = JvmTypeReference)? name = (ID | OpEquality | OpCompare)
	parameters = ParameterList
	body = XExpression	
;

ParameterList:
	{ParameterList} '(' (parameters += Parameter (',' parameters += Parameter)*)? ')'
;
Parameter:
	type = JvmTypeReference (vararg ?= '...')? name = ID
;

// Solution specification

TestedClass:
	((interface ?= 'interface') | (abstract ?= 'abstract' 'class'?) | 'class') name = QName
	('extends' superClass = JvmParameterizedTypeReference)?
	('implements' superInterfaces += JvmParameterizedTypeReference (',' superInterfaces += JvmParameterizedTypeReference)*)?
	(description = STRING)?
	('=>' invariant = XExpression)?
	'{'
		(methods += TestedOperation)*
	'}'
;

TestedOperation:
	(TestedConstructor | TestedMethod)
	parameters = ParameterList
	(description = STRING)?
	('<=' preExpression = XExpression)?
	('=>' postExpression = XExpression)?
;

TestedConstructor:
	{TestedConstructor} 'new' 
;

TestedMethod:
	(abstract ?= 'abstract')? returnType = JvmParameterizedTypeReference name = ID
;

//

// XExpression adjustments

// remove --, since it clashes with transition

OpPostfix:
	"++"
;

// extend with ?= operator

OpEquality:
	'==' | '!=' | '===' | '!=='
	| '?=' // assertEquals operator, for comparisons that should result in an assertion
	;
