/*
 * generated by Xtext
 */
package no.hal.jex.jextest.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class JexTestGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class JexTestSuiteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.hal.jex.jextest.JexTest.JexTestSuite");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cJexTestSuiteAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSuiteKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cSuiteClassNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSuiteClassNameQNameParserRuleCall_1_1_0 = (RuleCall)cSuiteClassNameAssignment_1_1.eContents().get(0);
		private final Assignment cImportSectionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cImportSectionXImportSectionParserRuleCall_2_0 = (RuleCall)cImportSectionAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Alternatives cAlternatives_3_0_0 = (Alternatives)cGroup_3_0.eContents().get(0);
		private final Keyword cInstanceKeyword_3_0_0_0 = (Keyword)cAlternatives_3_0_0.eContents().get(0);
		private final Keyword cValKeyword_3_0_0_1 = (Keyword)cAlternatives_3_0_0.eContents().get(1);
		private final Assignment cInstancesAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cInstancesInstanceParserRuleCall_3_0_1_0 = (RuleCall)cInstancesAssignment_3_0_1.eContents().get(0);
		private final Group cGroup_3_0_2 = (Group)cGroup_3_0.eContents().get(2);
		private final Keyword cCommaKeyword_3_0_2_0 = (Keyword)cGroup_3_0_2.eContents().get(0);
		private final Assignment cInstancesAssignment_3_0_2_1 = (Assignment)cGroup_3_0_2.eContents().get(1);
		private final RuleCall cInstancesInstanceParserRuleCall_3_0_2_1_0 = (RuleCall)cInstancesAssignment_3_0_2_1.eContents().get(0);
		private final Assignment cStateFunctionsAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cStateFunctionsStateFunctionParserRuleCall_3_1_0 = (RuleCall)cStateFunctionsAssignment_3_1.eContents().get(0);
		private final Assignment cMethodsAssignment_3_2 = (Assignment)cAlternatives_3.eContents().get(2);
		private final RuleCall cMethodsMethodParserRuleCall_3_2_0 = (RuleCall)cMethodsAssignment_3_2.eContents().get(0);
		private final Assignment cTestCasesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTestCasesJexTestCaseParserRuleCall_4_0 = (RuleCall)cTestCasesAssignment_4.eContents().get(0);
		
		//JexTestSuite:
		//	{JexTestSuite} ('suite' suiteClassName=QName)?
		//	importSection=XImportSection? (('instance' | 'val') instances+=Instance (',' instances+=Instance)* |
		//	stateFunctions+=StateFunction | methods+=Method)*
		//	testCases+=JexTestCase*;
		@Override public ParserRule getRule() { return rule; }

		//{JexTestSuite} ('suite' suiteClassName=QName)? importSection=XImportSection? (('instance' | 'val') instances+=Instance
		//(',' instances+=Instance)* | stateFunctions+=StateFunction | methods+=Method)* testCases+=JexTestCase*
		public Group getGroup() { return cGroup; }

		//{JexTestSuite}
		public Action getJexTestSuiteAction_0() { return cJexTestSuiteAction_0; }

		//('suite' suiteClassName=QName)?
		public Group getGroup_1() { return cGroup_1; }

		//'suite'
		public Keyword getSuiteKeyword_1_0() { return cSuiteKeyword_1_0; }

		//suiteClassName=QName
		public Assignment getSuiteClassNameAssignment_1_1() { return cSuiteClassNameAssignment_1_1; }

		//QName
		public RuleCall getSuiteClassNameQNameParserRuleCall_1_1_0() { return cSuiteClassNameQNameParserRuleCall_1_1_0; }

		//importSection=XImportSection?
		public Assignment getImportSectionAssignment_2() { return cImportSectionAssignment_2; }

		//XImportSection
		public RuleCall getImportSectionXImportSectionParserRuleCall_2_0() { return cImportSectionXImportSectionParserRuleCall_2_0; }

		//(('instance' | 'val') instances+=Instance (',' instances+=Instance)* | stateFunctions+=StateFunction | methods+=Method)*
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//('instance' | 'val') instances+=Instance (',' instances+=Instance)*
		public Group getGroup_3_0() { return cGroup_3_0; }

		//('instance' | 'val')
		public Alternatives getAlternatives_3_0_0() { return cAlternatives_3_0_0; }

		//'instance'
		public Keyword getInstanceKeyword_3_0_0_0() { return cInstanceKeyword_3_0_0_0; }

		//'val'
		public Keyword getValKeyword_3_0_0_1() { return cValKeyword_3_0_0_1; }

		//instances+=Instance
		public Assignment getInstancesAssignment_3_0_1() { return cInstancesAssignment_3_0_1; }

		//Instance
		public RuleCall getInstancesInstanceParserRuleCall_3_0_1_0() { return cInstancesInstanceParserRuleCall_3_0_1_0; }

		//(',' instances+=Instance)*
		public Group getGroup_3_0_2() { return cGroup_3_0_2; }

		//','
		public Keyword getCommaKeyword_3_0_2_0() { return cCommaKeyword_3_0_2_0; }

		//instances+=Instance
		public Assignment getInstancesAssignment_3_0_2_1() { return cInstancesAssignment_3_0_2_1; }

		//Instance
		public RuleCall getInstancesInstanceParserRuleCall_3_0_2_1_0() { return cInstancesInstanceParserRuleCall_3_0_2_1_0; }

		//stateFunctions+=StateFunction
		public Assignment getStateFunctionsAssignment_3_1() { return cStateFunctionsAssignment_3_1; }

		//StateFunction
		public RuleCall getStateFunctionsStateFunctionParserRuleCall_3_1_0() { return cStateFunctionsStateFunctionParserRuleCall_3_1_0; }

		//methods+=Method
		public Assignment getMethodsAssignment_3_2() { return cMethodsAssignment_3_2; }

		//Method
		public RuleCall getMethodsMethodParserRuleCall_3_2_0() { return cMethodsMethodParserRuleCall_3_2_0; }

		//testCases+=JexTestCase*
		public Assignment getTestCasesAssignment_4() { return cTestCasesAssignment_4; }

		//JexTestCase
		public RuleCall getTestCasesJexTestCaseParserRuleCall_4_0() { return cTestCasesJexTestCaseParserRuleCall_4_0; }
	}

	public class JexTestCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.hal.jex.jextest.JexTest.JexTestCase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cJexTestCaseAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTestKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cTestedClassesAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cTestedClassesTestedClassParserRuleCall_2_0_0 = (RuleCall)cTestedClassesAssignment_2_0.eContents().get(0);
		private final Assignment cTestedClassRefAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cTestedClassRefJvmParameterizedTypeReferenceParserRuleCall_2_1_0 = (RuleCall)cTestedClassRefAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cWithKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTestClassNameAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTestClassNameQNameParserRuleCall_3_1_0 = (RuleCall)cTestClassNameAssignment_3_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_4_0 = (RuleCall)cDescriptionAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommercialAtKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cUrlAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cUrlSTRINGTerminalRuleCall_5_1_0 = (RuleCall)cUrlAssignment_5_1.eContents().get(0);
		private final Assignment cImportSectionAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cImportSectionXImportSectionParserRuleCall_6_0 = (RuleCall)cImportSectionAssignment_6.eContents().get(0);
		private final Alternatives cAlternatives_7 = (Alternatives)cGroup.eContents().get(7);
		private final Group cGroup_7_0 = (Group)cAlternatives_7.eContents().get(0);
		private final Alternatives cAlternatives_7_0_0 = (Alternatives)cGroup_7_0.eContents().get(0);
		private final Keyword cInstanceKeyword_7_0_0_0 = (Keyword)cAlternatives_7_0_0.eContents().get(0);
		private final Keyword cValKeyword_7_0_0_1 = (Keyword)cAlternatives_7_0_0.eContents().get(1);
		private final Assignment cInstancesAssignment_7_0_1 = (Assignment)cGroup_7_0.eContents().get(1);
		private final RuleCall cInstancesSuiteInstanceParserRuleCall_7_0_1_0 = (RuleCall)cInstancesAssignment_7_0_1.eContents().get(0);
		private final Group cGroup_7_0_2 = (Group)cGroup_7_0.eContents().get(2);
		private final Keyword cCommaKeyword_7_0_2_0 = (Keyword)cGroup_7_0_2.eContents().get(0);
		private final Assignment cInstancesAssignment_7_0_2_1 = (Assignment)cGroup_7_0_2.eContents().get(1);
		private final RuleCall cInstancesSuiteInstanceParserRuleCall_7_0_2_1_0 = (RuleCall)cInstancesAssignment_7_0_2_1.eContents().get(0);
		private final Assignment cStateFunctionsAssignment_7_1 = (Assignment)cAlternatives_7.eContents().get(1);
		private final RuleCall cStateFunctionsStateFunctionParserRuleCall_7_1_0 = (RuleCall)cStateFunctionsAssignment_7_1.eContents().get(0);
		private final Assignment cTestSequencesAssignment_7_2 = (Assignment)cAlternatives_7.eContents().get(2);
		private final RuleCall cTestSequencesJexTestSequenceParserRuleCall_7_2_0 = (RuleCall)cTestSequencesAssignment_7_2.eContents().get(0);
		private final Assignment cMethodsAssignment_7_3 = (Assignment)cAlternatives_7.eContents().get(3);
		private final RuleCall cMethodsMethodParserRuleCall_7_3_0 = (RuleCall)cMethodsAssignment_7_3.eContents().get(0);
		
		//JexTestCase:
		//	{JexTestCase} 'test' (testedClasses+=TestedClass* | testedClassRef=JvmParameterizedTypeReference) ('with'
		//	testClassName=QName)?
		//	description=STRING? ('@' url=STRING)?
		//	importSection=XImportSection? (('instance' | 'val') instances+=SuiteInstance (',' instances+=SuiteInstance)* |
		//	stateFunctions+=StateFunction | testSequences+=JexTestSequence | methods+=Method)*;
		@Override public ParserRule getRule() { return rule; }

		//{JexTestCase} 'test' (testedClasses+=TestedClass* | testedClassRef=JvmParameterizedTypeReference) ('with'
		//testClassName=QName)? description=STRING? ('@' url=STRING)? importSection=XImportSection? (('instance' | 'val')
		//instances+=SuiteInstance (',' instances+=SuiteInstance)* | stateFunctions+=StateFunction |
		//testSequences+=JexTestSequence | methods+=Method)*
		public Group getGroup() { return cGroup; }

		//{JexTestCase}
		public Action getJexTestCaseAction_0() { return cJexTestCaseAction_0; }

		//'test'
		public Keyword getTestKeyword_1() { return cTestKeyword_1; }

		//(testedClasses+=TestedClass* | testedClassRef=JvmParameterizedTypeReference)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//testedClasses+=TestedClass*
		public Assignment getTestedClassesAssignment_2_0() { return cTestedClassesAssignment_2_0; }

		//TestedClass
		public RuleCall getTestedClassesTestedClassParserRuleCall_2_0_0() { return cTestedClassesTestedClassParserRuleCall_2_0_0; }

		//testedClassRef=JvmParameterizedTypeReference
		public Assignment getTestedClassRefAssignment_2_1() { return cTestedClassRefAssignment_2_1; }

		//JvmParameterizedTypeReference
		public RuleCall getTestedClassRefJvmParameterizedTypeReferenceParserRuleCall_2_1_0() { return cTestedClassRefJvmParameterizedTypeReferenceParserRuleCall_2_1_0; }

		//('with' testClassName=QName)?
		public Group getGroup_3() { return cGroup_3; }

		//'with'
		public Keyword getWithKeyword_3_0() { return cWithKeyword_3_0; }

		//testClassName=QName
		public Assignment getTestClassNameAssignment_3_1() { return cTestClassNameAssignment_3_1; }

		//QName
		public RuleCall getTestClassNameQNameParserRuleCall_3_1_0() { return cTestClassNameQNameParserRuleCall_3_1_0; }

		//description=STRING?
		public Assignment getDescriptionAssignment_4() { return cDescriptionAssignment_4; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_4_0() { return cDescriptionSTRINGTerminalRuleCall_4_0; }

		//('@' url=STRING)?
		public Group getGroup_5() { return cGroup_5; }

		//'@'
		public Keyword getCommercialAtKeyword_5_0() { return cCommercialAtKeyword_5_0; }

		//url=STRING
		public Assignment getUrlAssignment_5_1() { return cUrlAssignment_5_1; }

		//STRING
		public RuleCall getUrlSTRINGTerminalRuleCall_5_1_0() { return cUrlSTRINGTerminalRuleCall_5_1_0; }

		//importSection=XImportSection?
		public Assignment getImportSectionAssignment_6() { return cImportSectionAssignment_6; }

		//XImportSection
		public RuleCall getImportSectionXImportSectionParserRuleCall_6_0() { return cImportSectionXImportSectionParserRuleCall_6_0; }

		//(('instance' | 'val') instances+=SuiteInstance (',' instances+=SuiteInstance)* | stateFunctions+=StateFunction |
		//testSequences+=JexTestSequence | methods+=Method)*
		public Alternatives getAlternatives_7() { return cAlternatives_7; }

		//('instance' | 'val') instances+=SuiteInstance (',' instances+=SuiteInstance)*
		public Group getGroup_7_0() { return cGroup_7_0; }

		//('instance' | 'val')
		public Alternatives getAlternatives_7_0_0() { return cAlternatives_7_0_0; }

		//'instance'
		public Keyword getInstanceKeyword_7_0_0_0() { return cInstanceKeyword_7_0_0_0; }

		//'val'
		public Keyword getValKeyword_7_0_0_1() { return cValKeyword_7_0_0_1; }

		//instances+=SuiteInstance
		public Assignment getInstancesAssignment_7_0_1() { return cInstancesAssignment_7_0_1; }

		//SuiteInstance
		public RuleCall getInstancesSuiteInstanceParserRuleCall_7_0_1_0() { return cInstancesSuiteInstanceParserRuleCall_7_0_1_0; }

		//(',' instances+=SuiteInstance)*
		public Group getGroup_7_0_2() { return cGroup_7_0_2; }

		//','
		public Keyword getCommaKeyword_7_0_2_0() { return cCommaKeyword_7_0_2_0; }

		//instances+=SuiteInstance
		public Assignment getInstancesAssignment_7_0_2_1() { return cInstancesAssignment_7_0_2_1; }

		//SuiteInstance
		public RuleCall getInstancesSuiteInstanceParserRuleCall_7_0_2_1_0() { return cInstancesSuiteInstanceParserRuleCall_7_0_2_1_0; }

		//stateFunctions+=StateFunction
		public Assignment getStateFunctionsAssignment_7_1() { return cStateFunctionsAssignment_7_1; }

		//StateFunction
		public RuleCall getStateFunctionsStateFunctionParserRuleCall_7_1_0() { return cStateFunctionsStateFunctionParserRuleCall_7_1_0; }

		//testSequences+=JexTestSequence
		public Assignment getTestSequencesAssignment_7_2() { return cTestSequencesAssignment_7_2; }

		//JexTestSequence
		public RuleCall getTestSequencesJexTestSequenceParserRuleCall_7_2_0() { return cTestSequencesJexTestSequenceParserRuleCall_7_2_0; }

		//methods+=Method
		public Assignment getMethodsAssignment_7_3() { return cMethodsAssignment_7_3; }

		//Method
		public RuleCall getMethodsMethodParserRuleCall_7_3_0() { return cMethodsMethodParserRuleCall_7_3_0; }
	}

	public class SuiteInstanceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.hal.jex.jextest.JexTest.SuiteInstance");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cExprAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExprXExpressionParserRuleCall_2_1_0 = (RuleCall)cExprAssignment_2_1.eContents().get(0);
		
		//SuiteInstance Instance:
		//	type=JvmTypeReference? name=ID ('=' expr=XExpression)?
		@Override public ParserRule getRule() { return rule; }

		//type=JvmTypeReference? name=ID ('=' expr=XExpression)?
		public Group getGroup() { return cGroup; }

		//type=JvmTypeReference?
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_0_0() { return cTypeJvmTypeReferenceParserRuleCall_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//('=' expr=XExpression)?
		public Group getGroup_2() { return cGroup_2; }

		//'='
		public Keyword getEqualsSignKeyword_2_0() { return cEqualsSignKeyword_2_0; }

		//expr=XExpression
		public Assignment getExprAssignment_2_1() { return cExprAssignment_2_1; }

		//XExpression
		public RuleCall getExprXExpressionParserRuleCall_2_1_0() { return cExprXExpressionParserRuleCall_2_1_0; }
	}

	public class InstanceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.hal.jex.jextest.JexTest.Instance");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cExprAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExprXExpressionParserRuleCall_2_1_0 = (RuleCall)cExprAssignment_2_1.eContents().get(0);
		
		//Instance:
		//	type=JvmTypeReference? name=ID ('=' expr=XExpression)?;
		@Override public ParserRule getRule() { return rule; }

		//type=JvmTypeReference? name=ID ('=' expr=XExpression)?
		public Group getGroup() { return cGroup; }

		//type=JvmTypeReference?
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_0_0() { return cTypeJvmTypeReferenceParserRuleCall_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//('=' expr=XExpression)?
		public Group getGroup_2() { return cGroup_2; }

		//'='
		public Keyword getEqualsSignKeyword_2_0() { return cEqualsSignKeyword_2_0; }

		//expr=XExpression
		public Assignment getExprAssignment_2_1() { return cExprAssignment_2_1; }

		//XExpression
		public RuleCall getExprXExpressionParserRuleCall_2_1_0() { return cExprXExpressionParserRuleCall_2_1_0; }
	}

	public class TestMemberContextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.hal.jex.jextest.JexTest.TestMemberContext");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cJexTestSuiteParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cJexTestCaseParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TestMemberContext:
		//	JexTestSuite | JexTestCase;
		@Override public ParserRule getRule() { return rule; }

		//JexTestSuite | JexTestCase
		public Alternatives getAlternatives() { return cAlternatives; }

		//JexTestSuite
		public RuleCall getJexTestSuiteParserRuleCall_0() { return cJexTestSuiteParserRuleCall_0; }

		//JexTestCase
		public RuleCall getJexTestCaseParserRuleCall_1() { return cJexTestCaseParserRuleCall_1; }
	}

	public class StateTestContextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.hal.jex.jextest.JexTest.StateTestContext");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStateFunctionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cJexTestSequenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//StateTestContext:
		//	StateFunction | JexTestSequence;
		@Override public ParserRule getRule() { return rule; }

		//StateFunction | JexTestSequence
		public Alternatives getAlternatives() { return cAlternatives; }

		//StateFunction
		public RuleCall getStateFunctionParserRuleCall_0() { return cStateFunctionParserRuleCall_0; }

		//JexTestSequence
		public RuleCall getJexTestSequenceParserRuleCall_1() { return cJexTestSequenceParserRuleCall_1; }
	}

	public class PropertiesTestOwnerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.hal.jex.jextest.JexTest.PropertiesTestOwner");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStateFunctionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cObjectTestParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//PropertiesTestOwner:
		//	StateFunction | ObjectTest;
		@Override public ParserRule getRule() { return rule; }

		//StateFunction | ObjectTest
		public Alternatives getAlternatives() { return cAlternatives; }

		//StateFunction
		public RuleCall getStateFunctionParserRuleCall_0() { return cStateFunctionParserRuleCall_0; }

		//ObjectTest
		public RuleCall getObjectTestParserRuleCall_1() { return cObjectTestParserRuleCall_1; }
	}

	public class StateFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.hal.jex.jextest.JexTest.StateFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cMethodKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeJvmParameterizedTypeReferenceParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Assignment cDescriptionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_4_0 = (RuleCall)cDescriptionAssignment_4.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cParametersAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cParametersParameterParserRuleCall_6_0_0 = (RuleCall)cParametersAssignment_6_0.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cGroup_6.eContents().get(1);
		private final Keyword cCommaKeyword_6_1_0 = (Keyword)cGroup_6_1.eContents().get(0);
		private final Assignment cParametersAssignment_6_1_1 = (Assignment)cGroup_6_1.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_6_1_1_0 = (RuleCall)cParametersAssignment_6_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cTestAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cTestPropertiesTestParserRuleCall_8_0 = (RuleCall)cTestAssignment_8.eContents().get(0);
		
		//StateFunction:
		//	'state' 'method' type=JvmParameterizedTypeReference? name=ID description=STRING?
		//	'(' (parameters+=Parameter (',' parameters+=Parameter)*)? ')'
		//	test=PropertiesTest;
		@Override public ParserRule getRule() { return rule; }

		//'state' 'method' type=JvmParameterizedTypeReference? name=ID description=STRING? '(' (parameters+=Parameter (','
		//parameters+=Parameter)*)? ')' test=PropertiesTest
		public Group getGroup() { return cGroup; }

		//'state'
		public Keyword getStateKeyword_0() { return cStateKeyword_0; }

		//'method'
		public Keyword getMethodKeyword_1() { return cMethodKeyword_1; }

		//type=JvmParameterizedTypeReference?
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//JvmParameterizedTypeReference
		public RuleCall getTypeJvmParameterizedTypeReferenceParserRuleCall_2_0() { return cTypeJvmParameterizedTypeReferenceParserRuleCall_2_0; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }

		//description=STRING?
		public Assignment getDescriptionAssignment_4() { return cDescriptionAssignment_4; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_4_0() { return cDescriptionSTRINGTerminalRuleCall_4_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_5() { return cLeftParenthesisKeyword_5; }

		//(parameters+=Parameter (',' parameters+=Parameter)*)?
		public Group getGroup_6() { return cGroup_6; }

		//parameters+=Parameter
		public Assignment getParametersAssignment_6_0() { return cParametersAssignment_6_0; }

		//Parameter
		public RuleCall getParametersParameterParserRuleCall_6_0_0() { return cParametersParameterParserRuleCall_6_0_0; }

		//(',' parameters+=Parameter)*
		public Group getGroup_6_1() { return cGroup_6_1; }

		//','
		public Keyword getCommaKeyword_6_1_0() { return cCommaKeyword_6_1_0; }

		//parameters+=Parameter
		public Assignment getParametersAssignment_6_1_1() { return cParametersAssignment_6_1_1; }

		//Parameter
		public RuleCall getParametersParameterParserRuleCall_6_1_1_0() { return cParametersParameterParserRuleCall_6_1_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }

		//test=PropertiesTest
		public Assignment getTestAssignment_8() { return cTestAssignment_8; }

		//PropertiesTest
		public RuleCall getTestPropertiesTestParserRuleCall_8_0() { return cTestPropertiesTestParserRuleCall_8_0; }
	}

	public class JexTestSequenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.hal.jex.jextest.JexTest.JexTestSequence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSequenceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cTestsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Assignment cTestedAssignment_3_1_0 = (Assignment)cGroup_3_1.eContents().get(0);
		private final RuleCall cTestedJvmOperationRefParserRuleCall_3_1_0_0 = (RuleCall)cTestedAssignment_3_1_0.eContents().get(0);
		private final Group cGroup_3_1_1 = (Group)cGroup_3_1.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_1_0 = (Keyword)cGroup_3_1_1.eContents().get(0);
		private final Assignment cTestedAssignment_3_1_1_1 = (Assignment)cGroup_3_1_1.eContents().get(1);
		private final RuleCall cTestedJvmOperationRefParserRuleCall_3_1_1_1_0 = (RuleCall)cTestedAssignment_3_1_1_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Alternatives cAlternatives_5_0 = (Alternatives)cGroup_5.eContents().get(0);
		private final Keyword cInstanceKeyword_5_0_0 = (Keyword)cAlternatives_5_0.eContents().get(0);
		private final Keyword cValKeyword_5_0_1 = (Keyword)cAlternatives_5_0.eContents().get(1);
		private final Assignment cInstancesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cInstancesInstanceParserRuleCall_5_1_0 = (RuleCall)cInstancesAssignment_5_1.eContents().get(0);
		private final Group cGroup_5_2 = (Group)cGroup_5.eContents().get(2);
		private final Keyword cCommaKeyword_5_2_0 = (Keyword)cGroup_5_2.eContents().get(0);
		private final Assignment cInstancesAssignment_5_2_1 = (Assignment)cGroup_5_2.eContents().get(1);
		private final RuleCall cInstancesInstanceParserRuleCall_5_2_1_0 = (RuleCall)cInstancesAssignment_5_2_1.eContents().get(0);
		private final Assignment cTransitionsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cTransitionsTransitionParserRuleCall_6_0 = (RuleCall)cTransitionsAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//JexTestSequence:
		//	'sequence' name=ID description=STRING? ('tests' (tested+=JvmOperationRef (',' tested+=JvmOperationRef)*)?)?
		//	'{' (('instance' | 'val') instances+=Instance (',' instances+=Instance)*)*
		//	transitions+=Transition*
		//	'}';
		@Override public ParserRule getRule() { return rule; }

		//'sequence' name=ID description=STRING? ('tests' (tested+=JvmOperationRef (',' tested+=JvmOperationRef)*)?)? '{'
		//(('instance' | 'val') instances+=Instance (',' instances+=Instance)*)* transitions+=Transition* '}'
		public Group getGroup() { return cGroup; }

		//'sequence'
		public Keyword getSequenceKeyword_0() { return cSequenceKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//description=STRING?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }

		//('tests' (tested+=JvmOperationRef (',' tested+=JvmOperationRef)*)?)?
		public Group getGroup_3() { return cGroup_3; }

		//'tests'
		public Keyword getTestsKeyword_3_0() { return cTestsKeyword_3_0; }

		//(tested+=JvmOperationRef (',' tested+=JvmOperationRef)*)?
		public Group getGroup_3_1() { return cGroup_3_1; }

		//tested+=JvmOperationRef
		public Assignment getTestedAssignment_3_1_0() { return cTestedAssignment_3_1_0; }

		//JvmOperationRef
		public RuleCall getTestedJvmOperationRefParserRuleCall_3_1_0_0() { return cTestedJvmOperationRefParserRuleCall_3_1_0_0; }

		//(',' tested+=JvmOperationRef)*
		public Group getGroup_3_1_1() { return cGroup_3_1_1; }

		//','
		public Keyword getCommaKeyword_3_1_1_0() { return cCommaKeyword_3_1_1_0; }

		//tested+=JvmOperationRef
		public Assignment getTestedAssignment_3_1_1_1() { return cTestedAssignment_3_1_1_1; }

		//JvmOperationRef
		public RuleCall getTestedJvmOperationRefParserRuleCall_3_1_1_1_0() { return cTestedJvmOperationRefParserRuleCall_3_1_1_1_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//(('instance' | 'val') instances+=Instance (',' instances+=Instance)*)*
		public Group getGroup_5() { return cGroup_5; }

		//('instance' | 'val')
		public Alternatives getAlternatives_5_0() { return cAlternatives_5_0; }

		//'instance'
		public Keyword getInstanceKeyword_5_0_0() { return cInstanceKeyword_5_0_0; }

		//'val'
		public Keyword getValKeyword_5_0_1() { return cValKeyword_5_0_1; }

		//instances+=Instance
		public Assignment getInstancesAssignment_5_1() { return cInstancesAssignment_5_1; }

		//Instance
		public RuleCall getInstancesInstanceParserRuleCall_5_1_0() { return cInstancesInstanceParserRuleCall_5_1_0; }

		//(',' instances+=Instance)*
		public Group getGroup_5_2() { return cGroup_5_2; }

		//','
		public Keyword getCommaKeyword_5_2_0() { return cCommaKeyword_5_2_0; }

		//instances+=Instance
		public Assignment getInstancesAssignment_5_2_1() { return cInstancesAssignment_5_2_1; }

		//Instance
		public RuleCall getInstancesInstanceParserRuleCall_5_2_1_0() { return cInstancesInstanceParserRuleCall_5_2_1_0; }

		//transitions+=Transition*
		public Assignment getTransitionsAssignment_6() { return cTransitionsAssignment_6; }

		//Transition
		public RuleCall getTransitionsTransitionParserRuleCall_6_0() { return cTransitionsTransitionParserRuleCall_6_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class JvmOperationRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.hal.jex.jextest.JexTest.JvmOperationRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMethodNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cMethodNameIDTerminalRuleCall_0_0 = (RuleCall)cMethodNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cParameterTypesAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cParameterTypesJvmParameterizedTypeReferenceParserRuleCall_1_1_0_0 = (RuleCall)cParameterTypesAssignment_1_1_0.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_1_0 = (Keyword)cGroup_1_1_1.eContents().get(0);
		private final Assignment cParameterTypesAssignment_1_1_1_1 = (Assignment)cGroup_1_1_1.eContents().get(1);
		private final RuleCall cParameterTypesJvmParameterizedTypeReferenceParserRuleCall_1_1_1_1_0 = (RuleCall)cParameterTypesAssignment_1_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//JvmOperationRef:
		//	methodName=ID ('(' (parameterTypes+=JvmParameterizedTypeReference (','
		//	parameterTypes+=JvmParameterizedTypeReference)*)? ')')?;
		@Override public ParserRule getRule() { return rule; }

		//methodName=ID ('(' (parameterTypes+=JvmParameterizedTypeReference (',' parameterTypes+=JvmParameterizedTypeReference)*)?
		//')')?
		public Group getGroup() { return cGroup; }

		//methodName=ID
		public Assignment getMethodNameAssignment_0() { return cMethodNameAssignment_0; }

		//ID
		public RuleCall getMethodNameIDTerminalRuleCall_0_0() { return cMethodNameIDTerminalRuleCall_0_0; }

		//('(' (parameterTypes+=JvmParameterizedTypeReference (',' parameterTypes+=JvmParameterizedTypeReference)*)? ')')?
		public Group getGroup_1() { return cGroup_1; }

		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//(parameterTypes+=JvmParameterizedTypeReference (',' parameterTypes+=JvmParameterizedTypeReference)*)?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//parameterTypes+=JvmParameterizedTypeReference
		public Assignment getParameterTypesAssignment_1_1_0() { return cParameterTypesAssignment_1_1_0; }

		//JvmParameterizedTypeReference
		public RuleCall getParameterTypesJvmParameterizedTypeReferenceParserRuleCall_1_1_0_0() { return cParameterTypesJvmParameterizedTypeReferenceParserRuleCall_1_1_0_0; }

		//(',' parameterTypes+=JvmParameterizedTypeReference)*
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }

		//','
		public Keyword getCommaKeyword_1_1_1_0() { return cCommaKeyword_1_1_1_0; }

		//parameterTypes+=JvmParameterizedTypeReference
		public Assignment getParameterTypesAssignment_1_1_1_1() { return cParameterTypesAssignment_1_1_1_1; }

		//JvmParameterizedTypeReference
		public RuleCall getParameterTypesJvmParameterizedTypeReferenceParserRuleCall_1_1_1_1_0() { return cParameterTypesJvmParameterizedTypeReferenceParserRuleCall_1_1_1_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}

	public class QNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.hal.jex.jextest.JexTest.QName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QName:
		//	ID+ ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }

		//ID+ ('.' ID)*
		public Group getGroup() { return cGroup; }

		//ID+
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }

		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.hal.jex.jextest.JexTest.State");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStateAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStateKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cNumberSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cNameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_2_1_0 = (RuleCall)cNameAssignment_2_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_3_0 = (RuleCall)cDescriptionAssignment_3.eContents().get(0);
		private final Assignment cObjectTestsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cObjectTestsObjectTestParserRuleCall_4_0 = (RuleCall)cObjectTestsAssignment_4.eContents().get(0);
		
		//State:
		//	{State}
		//	'state' ('#' name=ID)? description=STRING?
		//	objectTests+=ObjectTest+;
		@Override public ParserRule getRule() { return rule; }

		//{State} 'state' ('#' name=ID)? description=STRING? objectTests+=ObjectTest+
		public Group getGroup() { return cGroup; }

		//{State}
		public Action getStateAction_0() { return cStateAction_0; }

		//'state'
		public Keyword getStateKeyword_1() { return cStateKeyword_1; }

		//('#' name=ID)?
		public Group getGroup_2() { return cGroup_2; }

		//'#'
		public Keyword getNumberSignKeyword_2_0() { return cNumberSignKeyword_2_0; }

		//name=ID
		public Assignment getNameAssignment_2_1() { return cNameAssignment_2_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_1_0() { return cNameIDTerminalRuleCall_2_1_0; }

		//description=STRING?
		public Assignment getDescriptionAssignment_3() { return cDescriptionAssignment_3; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_3_0() { return cDescriptionSTRINGTerminalRuleCall_3_0; }

		//objectTests+=ObjectTest+
		public Assignment getObjectTestsAssignment_4() { return cObjectTestsAssignment_4; }

		//ObjectTest
		public RuleCall getObjectTestsObjectTestParserRuleCall_4_0() { return cObjectTestsObjectTestParserRuleCall_4_0; }
	}

	public class ObjectTestElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.hal.jex.jextest.JexTest.ObjectTest");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cInstanceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cInstanceInstanceCrossReference_0_0 = (CrossReference)cInstanceAssignment_0.eContents().get(0);
		private final RuleCall cInstanceInstanceIDTerminalRuleCall_0_0_1 = (RuleCall)cInstanceInstanceCrossReference_0_0.eContents().get(1);
		private final Assignment cTestAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTestPropertiesTestParserRuleCall_1_0 = (RuleCall)cTestAssignment_1.eContents().get(0);
		
		//ObjectTest:
		//	instance=[Instance]?
		//	test=PropertiesTest;
		@Override public ParserRule getRule() { return rule; }

		//instance=[Instance]? test=PropertiesTest
		public Group getGroup() { return cGroup; }

		//instance=[Instance]?
		public Assignment getInstanceAssignment_0() { return cInstanceAssignment_0; }

		//[Instance]
		public CrossReference getInstanceInstanceCrossReference_0_0() { return cInstanceInstanceCrossReference_0_0; }

		//ID
		public RuleCall getInstanceInstanceIDTerminalRuleCall_0_0_1() { return cInstanceInstanceIDTerminalRuleCall_0_0_1; }

		//test=PropertiesTest
		public Assignment getTestAssignment_1() { return cTestAssignment_1; }

		//PropertiesTest
		public RuleCall getTestPropertiesTestParserRuleCall_1_0() { return cTestPropertiesTestParserRuleCall_1_0; }
	}

	public class PropertiesTestElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.hal.jex.jextest.JexTest.PropertiesTest");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPropertiesTestAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cExpressionsAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cExpressionsXExpressionParserRuleCall_1_1_0_0 = (RuleCall)cExpressionsAssignment_1_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//PropertiesTest xbase::XBlockExpression:
		//	{PropertiesTest} ('{' (expressions+=XExpression ';'?)* '}')
		@Override public ParserRule getRule() { return rule; }

		//{PropertiesTest} ('{' (expressions+=XExpression ';'?)* '}')
		public Group getGroup() { return cGroup; }

		//{PropertiesTest}
		public Action getPropertiesTestAction_0() { return cPropertiesTestAction_0; }

		//('{' (expressions+=XExpression ';'?)* '}')
		public Group getGroup_1() { return cGroup_1; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }

		//(expressions+=XExpression ';'?)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//expressions+=XExpression
		public Assignment getExpressionsAssignment_1_1_0() { return cExpressionsAssignment_1_1_0; }

		//XExpression
		public RuleCall getExpressionsXExpressionParserRuleCall_1_1_0_0() { return cExpressionsXExpressionParserRuleCall_1_1_0_0; }

		//';'?
		public Keyword getSemicolonKeyword_1_1_1() { return cSemicolonKeyword_1_1_1; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_1_2() { return cRightCurlyBracketKeyword_1_2; }
	}

	public class TransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.hal.jex.jextest.JexTest.Transition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cSourceAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cSourceTransitionSourceParserRuleCall_0_0_0 = (RuleCall)cSourceAssignment_0_0.eContents().get(0);
		private final Assignment cDescriptionAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_0_1_0 = (RuleCall)cDescriptionAssignment_0_1.eContents().get(0);
		private final Keyword cHyphenMinusHyphenMinusKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cActionsAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cActionsTransitionActionParserRuleCall_0_3_0 = (RuleCall)cActionsAssignment_0_3.eContents().get(0);
		private final Group cGroup_0_4 = (Group)cGroup_0.eContents().get(4);
		private final Keyword cCommaKeyword_0_4_0 = (Keyword)cGroup_0_4.eContents().get(0);
		private final Assignment cActionsAssignment_0_4_1 = (Assignment)cGroup_0_4.eContents().get(1);
		private final RuleCall cActionsTransitionActionParserRuleCall_0_4_1_0 = (RuleCall)cActionsAssignment_0_4_1.eContents().get(0);
		private final Assignment cEffectsAssignment_0_5 = (Assignment)cGroup_0.eContents().get(5);
		private final RuleCall cEffectsTransitionEffectParserRuleCall_0_5_0 = (RuleCall)cEffectsAssignment_0_5.eContents().get(0);
		private final Assignment cEffectsAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cEffectsTransitionTargetEffectParserRuleCall_1_0 = (RuleCall)cEffectsAssignment_1.eContents().get(0);
		
		//Transition:
		//	source=TransitionSource?
		//	// action part
		//	description=STRING? '--'
		//	actions+=TransitionAction (',' actions+=TransitionAction)*
		//	// effect part
		//	effects+=TransitionEffect | effects+=TransitionTargetEffect;
		@Override public ParserRule getRule() { return rule; }

		//source=TransitionSource? // action part
		//description=STRING? '--' actions+=TransitionAction (',' actions+=TransitionAction)* // effect part
		//effects+=TransitionEffect | effects+=TransitionTargetEffect
		public Alternatives getAlternatives() { return cAlternatives; }

		//source=TransitionSource? // action part
		//description=STRING? '--' actions+=TransitionAction (',' actions+=TransitionAction)* // effect part
		//effects+=TransitionEffect
		public Group getGroup_0() { return cGroup_0; }

		//// optional source
		//source=TransitionSource?
		public Assignment getSourceAssignment_0_0() { return cSourceAssignment_0_0; }

		//TransitionSource
		public RuleCall getSourceTransitionSourceParserRuleCall_0_0_0() { return cSourceTransitionSourceParserRuleCall_0_0_0; }

		//// action part
		//description=STRING?
		public Assignment getDescriptionAssignment_0_1() { return cDescriptionAssignment_0_1; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_0_1_0() { return cDescriptionSTRINGTerminalRuleCall_0_1_0; }

		//'--'
		public Keyword getHyphenMinusHyphenMinusKeyword_0_2() { return cHyphenMinusHyphenMinusKeyword_0_2; }

		//actions+=TransitionAction
		public Assignment getActionsAssignment_0_3() { return cActionsAssignment_0_3; }

		//TransitionAction
		public RuleCall getActionsTransitionActionParserRuleCall_0_3_0() { return cActionsTransitionActionParserRuleCall_0_3_0; }

		//(',' actions+=TransitionAction)*
		public Group getGroup_0_4() { return cGroup_0_4; }

		//','
		public Keyword getCommaKeyword_0_4_0() { return cCommaKeyword_0_4_0; }

		//actions+=TransitionAction
		public Assignment getActionsAssignment_0_4_1() { return cActionsAssignment_0_4_1; }

		//TransitionAction
		public RuleCall getActionsTransitionActionParserRuleCall_0_4_1_0() { return cActionsTransitionActionParserRuleCall_0_4_1_0; }

		//// effect part
		//effects+=TransitionEffect
		public Assignment getEffectsAssignment_0_5() { return cEffectsAssignment_0_5; }

		//TransitionEffect
		public RuleCall getEffectsTransitionEffectParserRuleCall_0_5_0() { return cEffectsTransitionEffectParserRuleCall_0_5_0; }

		//// initial state
		//effects+=TransitionTargetEffect
		public Assignment getEffectsAssignment_1() { return cEffectsAssignment_1; }

		//TransitionTargetEffect
		public RuleCall getEffectsTransitionTargetEffectParserRuleCall_1_0() { return cEffectsTransitionTargetEffectParserRuleCall_1_0; }
	}

	public class TransitionSourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.hal.jex.jextest.JexTest.TransitionSource");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cStateAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cStateStateParserRuleCall_0_0 = (RuleCall)cStateAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cNumberSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cStateRefAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cStateRefStateCrossReference_1_1_0 = (CrossReference)cStateRefAssignment_1_1.eContents().get(0);
		private final RuleCall cStateRefStateIDTerminalRuleCall_1_1_0_1 = (RuleCall)cStateRefStateCrossReference_1_1_0.eContents().get(1);
		
		//TransitionSource:
		//	state=State | '#' stateRef=[State];
		@Override public ParserRule getRule() { return rule; }

		//state=State | '#' stateRef=[State]
		public Alternatives getAlternatives() { return cAlternatives; }

		//state=State
		public Assignment getStateAssignment_0() { return cStateAssignment_0; }

		//State
		public RuleCall getStateStateParserRuleCall_0_0() { return cStateStateParserRuleCall_0_0; }

		//'#' stateRef=[State]
		public Group getGroup_1() { return cGroup_1; }

		//'#'
		public Keyword getNumberSignKeyword_1_0() { return cNumberSignKeyword_1_0; }

		//stateRef=[State]
		public Assignment getStateRefAssignment_1_1() { return cStateRefAssignment_1_1; }

		//[State]
		public CrossReference getStateRefStateCrossReference_1_1_0() { return cStateRefStateCrossReference_1_1_0; }

		//ID
		public RuleCall getStateRefStateIDTerminalRuleCall_1_1_0_1() { return cStateRefStateIDTerminalRuleCall_1_1_0_1; }
	}

	public class TransitionActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.hal.jex.jextest.JexTest.TransitionAction");
		private final RuleCall cTransitionExpressionActionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//TransitionAction:
		//	TransitionExpressionAction;
		@Override public ParserRule getRule() { return rule; }

		//TransitionExpressionAction
		public RuleCall getTransitionExpressionActionParserRuleCall() { return cTransitionExpressionActionParserRuleCall; }
	}

	public class TransitionExpressionActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.hal.jex.jextest.JexTest.TransitionExpressionAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExprAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExprXExpressionParserRuleCall_0_0 = (RuleCall)cExprAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cNumberSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTimesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTimesXExpressionParserRuleCall_1_1_0 = (RuleCall)cTimesAssignment_1_1.eContents().get(0);
		
		//// | TransitionInputAction;
		//TransitionExpressionAction:
		//	expr=XExpression ('#' times=XExpression)?;
		@Override public ParserRule getRule() { return rule; }

		//expr=XExpression ('#' times=XExpression)?
		public Group getGroup() { return cGroup; }

		//expr=XExpression
		public Assignment getExprAssignment_0() { return cExprAssignment_0; }

		//XExpression
		public RuleCall getExprXExpressionParserRuleCall_0_0() { return cExprXExpressionParserRuleCall_0_0; }

		//('#' times=XExpression)?
		public Group getGroup_1() { return cGroup_1; }

		//'#'
		public Keyword getNumberSignKeyword_1_0() { return cNumberSignKeyword_1_0; }

		//times=XExpression
		public Assignment getTimesAssignment_1_1() { return cTimesAssignment_1_1; }

		//XExpression
		public RuleCall getTimesXExpressionParserRuleCall_1_1_0() { return cTimesXExpressionParserRuleCall_1_1_0; }
	}

	public class TransitionInputActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.hal.jex.jextest.JexTest.TransitionInputAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInputsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cInputAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInputSTRINGTerminalRuleCall_1_0 = (RuleCall)cInputAssignment_1.eContents().get(0);
		
		//TransitionInputAction:
		//	'inputs' input=STRING;
		@Override public ParserRule getRule() { return rule; }

		//'inputs' input=STRING
		public Group getGroup() { return cGroup; }

		//'inputs'
		public Keyword getInputsKeyword_0() { return cInputsKeyword_0; }

		//input=STRING
		public Assignment getInputAssignment_1() { return cInputAssignment_1; }

		//STRING
		public RuleCall getInputSTRINGTerminalRuleCall_1_0() { return cInputSTRINGTerminalRuleCall_1_0; }
	}

	public class TransitionEffectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.hal.jex.jextest.JexTest.TransitionEffect");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTransitionTargetEffectParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTransitionEffect2ParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TransitionEffect:
		//	TransitionTargetEffect | TransitionEffect2;
		@Override public ParserRule getRule() { return rule; }

		//TransitionTargetEffect | TransitionEffect2
		public Alternatives getAlternatives() { return cAlternatives; }

		//TransitionTargetEffect
		public RuleCall getTransitionTargetEffectParserRuleCall_0() { return cTransitionTargetEffectParserRuleCall_0; }

		//TransitionEffect2
		public RuleCall getTransitionEffect2ParserRuleCall_1() { return cTransitionEffect2ParserRuleCall_1; }
	}

	public class TransitionEffect2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.hal.jex.jextest.JexTest.TransitionEffect2");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTransitionExceptionEffectParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTransitionCallbackEffectParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TransitionEffect2:
		//	TransitionExceptionEffect | TransitionCallbackEffect;
		@Override public ParserRule getRule() { return rule; }

		//TransitionExceptionEffect | TransitionCallbackEffect
		public Alternatives getAlternatives() { return cAlternatives; }

		//TransitionExceptionEffect
		public RuleCall getTransitionExceptionEffectParserRuleCall_0() { return cTransitionExceptionEffectParserRuleCall_0; }

		//TransitionCallbackEffect
		public RuleCall getTransitionCallbackEffectParserRuleCall_1() { return cTransitionCallbackEffectParserRuleCall_1; }
	}

	public class TransitionTargetEffectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.hal.jex.jextest.JexTest.TransitionTargetEffect");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusHyphenMinusGreaterThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cStateAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cStateStateParserRuleCall_1_0_0 = (RuleCall)cStateAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cNumberSignKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cStateRefAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final CrossReference cStateRefStateCrossReference_1_1_1_0 = (CrossReference)cStateRefAssignment_1_1_1.eContents().get(0);
		private final RuleCall cStateRefStateIDTerminalRuleCall_1_1_1_0_1 = (RuleCall)cStateRefStateCrossReference_1_1_1_0.eContents().get(1);
		
		//// | TransitionOutputEffect;
		//TransitionTargetEffect:
		//	'-->' (state=State | '#' stateRef=[State]);
		@Override public ParserRule getRule() { return rule; }

		//'-->' (state=State | '#' stateRef=[State])
		public Group getGroup() { return cGroup; }

		//'-->'
		public Keyword getHyphenMinusHyphenMinusGreaterThanSignKeyword_0() { return cHyphenMinusHyphenMinusGreaterThanSignKeyword_0; }

		//(state=State | '#' stateRef=[State])
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//state=State
		public Assignment getStateAssignment_1_0() { return cStateAssignment_1_0; }

		//State
		public RuleCall getStateStateParserRuleCall_1_0_0() { return cStateStateParserRuleCall_1_0_0; }

		//'#' stateRef=[State]
		public Group getGroup_1_1() { return cGroup_1_1; }

		//'#'
		public Keyword getNumberSignKeyword_1_1_0() { return cNumberSignKeyword_1_1_0; }

		//stateRef=[State]
		public Assignment getStateRefAssignment_1_1_1() { return cStateRefAssignment_1_1_1; }

		//[State]
		public CrossReference getStateRefStateCrossReference_1_1_1_0() { return cStateRefStateCrossReference_1_1_1_0; }

		//ID
		public RuleCall getStateRefStateIDTerminalRuleCall_1_1_1_0_1() { return cStateRefStateIDTerminalRuleCall_1_1_1_0_1; }
	}

	public class TransitionExceptionEffectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.hal.jex.jextest.JexTest.TransitionExceptionEffect");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cThrowsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExceptionClassAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExceptionClassJvmParameterizedTypeReferenceParserRuleCall_1_0 = (RuleCall)cExceptionClassAssignment_1.eContents().get(0);
		
		//TransitionExceptionEffect:
		//	'throws' exceptionClass=JvmParameterizedTypeReference;
		@Override public ParserRule getRule() { return rule; }

		//'throws' exceptionClass=JvmParameterizedTypeReference
		public Group getGroup() { return cGroup; }

		//'throws'
		public Keyword getThrowsKeyword_0() { return cThrowsKeyword_0; }

		//exceptionClass=JvmParameterizedTypeReference
		public Assignment getExceptionClassAssignment_1() { return cExceptionClassAssignment_1; }

		//JvmParameterizedTypeReference
		public RuleCall getExceptionClassJvmParameterizedTypeReferenceParserRuleCall_1_0() { return cExceptionClassJvmParameterizedTypeReferenceParserRuleCall_1_0; }
	}

	public class TransitionOutputEffectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.hal.jex.jextest.JexTest.TransitionOutputEffect");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOutputsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPatternAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPatternSTRINGTerminalRuleCall_1_0 = (RuleCall)cPatternAssignment_1.eContents().get(0);
		
		//TransitionOutputEffect:
		//	'outputs' pattern=STRING;
		@Override public ParserRule getRule() { return rule; }

		//'outputs' pattern=STRING
		public Group getGroup() { return cGroup; }

		//'outputs'
		public Keyword getOutputsKeyword_0() { return cOutputsKeyword_0; }

		//pattern=STRING
		public Assignment getPatternAssignment_1() { return cPatternAssignment_1; }

		//STRING
		public RuleCall getPatternSTRINGTerminalRuleCall_1_0() { return cPatternSTRINGTerminalRuleCall_1_0; }
	}

	public class TransitionCallbackEffectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.hal.jex.jextest.JexTest.TransitionCallbackEffect");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCallbackKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cInstanceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cInstanceInstanceCrossReference_1_0 = (CrossReference)cInstanceAssignment_1.eContents().get(0);
		private final RuleCall cInstanceInstanceIDTerminalRuleCall_1_0_1 = (RuleCall)cInstanceInstanceCrossReference_1_0.eContents().get(1);
		private final Keyword cToKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cCallbackClassAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cCallbackClassJvmParameterizedTypeReferenceParserRuleCall_3_0_0 = (RuleCall)cCallbackClassAssignment_3_0.eContents().get(0);
		private final Keyword cFullStopKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cMethodNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMethodNameIDTerminalRuleCall_4_0 = (RuleCall)cMethodNameAssignment_4.eContents().get(0);
		private final Assignment cParametersAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cParametersParameterListParserRuleCall_5_0 = (RuleCall)cParametersAssignment_5.eContents().get(0);
		private final Assignment cArgumentsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cArgumentsPropertiesTestParserRuleCall_6_0 = (RuleCall)cArgumentsAssignment_6.eContents().get(0);
		
		//TransitionCallbackEffect:
		//	'callback'
		//	instance=[Instance] 'to' (callbackClass=JvmParameterizedTypeReference '.')? methodName=ID parameters=ParameterList?
		//	arguments=PropertiesTest;
		@Override public ParserRule getRule() { return rule; }

		//'callback' instance=[Instance] 'to' (callbackClass=JvmParameterizedTypeReference '.')? methodName=ID
		//parameters=ParameterList? arguments=PropertiesTest
		public Group getGroup() { return cGroup; }

		//'callback'
		public Keyword getCallbackKeyword_0() { return cCallbackKeyword_0; }

		//instance=[Instance]
		public Assignment getInstanceAssignment_1() { return cInstanceAssignment_1; }

		//[Instance]
		public CrossReference getInstanceInstanceCrossReference_1_0() { return cInstanceInstanceCrossReference_1_0; }

		//ID
		public RuleCall getInstanceInstanceIDTerminalRuleCall_1_0_1() { return cInstanceInstanceIDTerminalRuleCall_1_0_1; }

		//'to'
		public Keyword getToKeyword_2() { return cToKeyword_2; }

		//(callbackClass=JvmParameterizedTypeReference '.')?
		public Group getGroup_3() { return cGroup_3; }

		//callbackClass=JvmParameterizedTypeReference
		public Assignment getCallbackClassAssignment_3_0() { return cCallbackClassAssignment_3_0; }

		//JvmParameterizedTypeReference
		public RuleCall getCallbackClassJvmParameterizedTypeReferenceParserRuleCall_3_0_0() { return cCallbackClassJvmParameterizedTypeReferenceParserRuleCall_3_0_0; }

		//'.'
		public Keyword getFullStopKeyword_3_1() { return cFullStopKeyword_3_1; }

		//methodName=ID
		public Assignment getMethodNameAssignment_4() { return cMethodNameAssignment_4; }

		//ID
		public RuleCall getMethodNameIDTerminalRuleCall_4_0() { return cMethodNameIDTerminalRuleCall_4_0; }

		//parameters=ParameterList?
		public Assignment getParametersAssignment_5() { return cParametersAssignment_5; }

		//ParameterList
		public RuleCall getParametersParameterListParserRuleCall_5_0() { return cParametersParameterListParserRuleCall_5_0; }

		//arguments=PropertiesTest
		public Assignment getArgumentsAssignment_6() { return cArgumentsAssignment_6; }

		//PropertiesTest
		public RuleCall getArgumentsPropertiesTestParserRuleCall_6_0() { return cArgumentsPropertiesTestParserRuleCall_6_0; }
	}

	public class MethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.hal.jex.jextest.JexTest.Method");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMethodKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cReturnTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cReturnTypeJvmTypeReferenceParserRuleCall_1_0 = (RuleCall)cReturnTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cNameAlternatives_2_0 = (Alternatives)cNameAssignment_2.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_2_0_0 = (RuleCall)cNameAlternatives_2_0.eContents().get(0);
		private final RuleCall cNameOpEqualityParserRuleCall_2_0_1 = (RuleCall)cNameAlternatives_2_0.eContents().get(1);
		private final RuleCall cNameOpCompareParserRuleCall_2_0_2 = (RuleCall)cNameAlternatives_2_0.eContents().get(2);
		private final Assignment cParametersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParametersParameterListParserRuleCall_3_0 = (RuleCall)cParametersAssignment_3.eContents().get(0);
		private final Assignment cBodyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBodyXExpressionParserRuleCall_4_0 = (RuleCall)cBodyAssignment_4.eContents().get(0);
		
		//Method:
		//	'method' returnType=JvmTypeReference? name=(ID | OpEquality | OpCompare) parameters=ParameterList
		//	body=XExpression;
		@Override public ParserRule getRule() { return rule; }

		//'method' returnType=JvmTypeReference? name=(ID | OpEquality | OpCompare) parameters=ParameterList body=XExpression
		public Group getGroup() { return cGroup; }

		//'method'
		public Keyword getMethodKeyword_0() { return cMethodKeyword_0; }

		//returnType=JvmTypeReference?
		public Assignment getReturnTypeAssignment_1() { return cReturnTypeAssignment_1; }

		//JvmTypeReference
		public RuleCall getReturnTypeJvmTypeReferenceParserRuleCall_1_0() { return cReturnTypeJvmTypeReferenceParserRuleCall_1_0; }

		//name=(ID | OpEquality | OpCompare)
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//(ID | OpEquality | OpCompare)
		public Alternatives getNameAlternatives_2_0() { return cNameAlternatives_2_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0_0() { return cNameIDTerminalRuleCall_2_0_0; }

		//OpEquality
		public RuleCall getNameOpEqualityParserRuleCall_2_0_1() { return cNameOpEqualityParserRuleCall_2_0_1; }

		//OpCompare
		public RuleCall getNameOpCompareParserRuleCall_2_0_2() { return cNameOpCompareParserRuleCall_2_0_2; }

		//parameters=ParameterList
		public Assignment getParametersAssignment_3() { return cParametersAssignment_3; }

		//ParameterList
		public RuleCall getParametersParameterListParserRuleCall_3_0() { return cParametersParameterListParserRuleCall_3_0; }

		//body=XExpression
		public Assignment getBodyAssignment_4() { return cBodyAssignment_4; }

		//XExpression
		public RuleCall getBodyXExpressionParserRuleCall_4_0() { return cBodyXExpressionParserRuleCall_4_0; }
	}

	public class ParameterListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.hal.jex.jextest.JexTest.ParameterList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParameterListAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cParametersAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cParametersParameterParserRuleCall_2_0_0 = (RuleCall)cParametersAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cParametersAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_2_1_1_0 = (RuleCall)cParametersAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ParameterList:
		//	{ParameterList} '(' (parameters+=Parameter (',' parameters+=Parameter)*)? ')';
		@Override public ParserRule getRule() { return rule; }

		//{ParameterList} '(' (parameters+=Parameter (',' parameters+=Parameter)*)? ')'
		public Group getGroup() { return cGroup; }

		//{ParameterList}
		public Action getParameterListAction_0() { return cParameterListAction_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//(parameters+=Parameter (',' parameters+=Parameter)*)?
		public Group getGroup_2() { return cGroup_2; }

		//parameters+=Parameter
		public Assignment getParametersAssignment_2_0() { return cParametersAssignment_2_0; }

		//Parameter
		public RuleCall getParametersParameterParserRuleCall_2_0_0() { return cParametersParameterParserRuleCall_2_0_0; }

		//(',' parameters+=Parameter)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//parameters+=Parameter
		public Assignment getParametersAssignment_2_1_1() { return cParametersAssignment_2_1_1; }

		//Parameter
		public RuleCall getParametersParameterParserRuleCall_2_1_1_0() { return cParametersParameterParserRuleCall_2_1_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.hal.jex.jextest.JexTest.Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cVarargAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cVarargFullStopFullStopFullStopKeyword_1_0 = (Keyword)cVarargAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//Parameter:
		//	type=JvmTypeReference vararg?='...'? name=ID;
		@Override public ParserRule getRule() { return rule; }

		//type=JvmTypeReference vararg?='...'? name=ID
		public Group getGroup() { return cGroup; }

		//type=JvmTypeReference
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_0_0() { return cTypeJvmTypeReferenceParserRuleCall_0_0; }

		//vararg?='...'?
		public Assignment getVarargAssignment_1() { return cVarargAssignment_1; }

		//'...'
		public Keyword getVarargFullStopFullStopFullStopKeyword_1_0() { return cVarargFullStopFullStopFullStopKeyword_1_0; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}

	public class TestedClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.hal.jex.jextest.JexTest.TestedClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cInterfaceAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final Keyword cInterfaceInterfaceKeyword_0_0_0 = (Keyword)cInterfaceAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Assignment cAbstractAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final Keyword cAbstractAbstractKeyword_0_1_0_0 = (Keyword)cAbstractAssignment_0_1_0.eContents().get(0);
		private final Keyword cClassKeyword_0_1_1 = (Keyword)cGroup_0_1.eContents().get(1);
		private final Keyword cClassKeyword_0_2 = (Keyword)cAlternatives_0.eContents().get(2);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExtendsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSuperClassAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSuperClassJvmParameterizedTypeReferenceParserRuleCall_2_1_0 = (RuleCall)cSuperClassAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cImplementsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSuperInterfacesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cSuperInterfacesJvmParameterizedTypeReferenceParserRuleCall_3_1_0 = (RuleCall)cSuperInterfacesAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cSuperInterfacesAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cSuperInterfacesJvmParameterizedTypeReferenceParserRuleCall_3_2_1_0 = (RuleCall)cSuperInterfacesAssignment_3_2_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_4_0 = (RuleCall)cDescriptionAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cEqualsSignGreaterThanSignKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cInvariantAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cInvariantXExpressionParserRuleCall_5_1_0 = (RuleCall)cInvariantAssignment_5_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cMethodsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cMethodsTestedOperationParserRuleCall_7_0 = (RuleCall)cMethodsAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//// Solution specification
		//TestedClass:
		//	(interface?='interface' | abstract?='abstract' 'class'? | 'class') name=QName ('extends'
		//	superClass=JvmParameterizedTypeReference)? ('implements' superInterfaces+=JvmParameterizedTypeReference (','
		//	superInterfaces+=JvmParameterizedTypeReference)*)?
		//	description=STRING? ('=>' invariant=XExpression)?
		//	'{'
		//	methods+=TestedOperation*
		//	'}';
		@Override public ParserRule getRule() { return rule; }

		//(interface?='interface' | abstract?='abstract' 'class'? | 'class') name=QName ('extends'
		//superClass=JvmParameterizedTypeReference)? ('implements' superInterfaces+=JvmParameterizedTypeReference (','
		//superInterfaces+=JvmParameterizedTypeReference)*)? description=STRING? ('=>' invariant=XExpression)? '{'
		//methods+=TestedOperation* '}'
		public Group getGroup() { return cGroup; }

		//(interface?='interface' | abstract?='abstract' 'class'? | 'class')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//interface?='interface'
		public Assignment getInterfaceAssignment_0_0() { return cInterfaceAssignment_0_0; }

		//'interface'
		public Keyword getInterfaceInterfaceKeyword_0_0_0() { return cInterfaceInterfaceKeyword_0_0_0; }

		//abstract?='abstract' 'class'?
		public Group getGroup_0_1() { return cGroup_0_1; }

		//abstract?='abstract'
		public Assignment getAbstractAssignment_0_1_0() { return cAbstractAssignment_0_1_0; }

		//'abstract'
		public Keyword getAbstractAbstractKeyword_0_1_0_0() { return cAbstractAbstractKeyword_0_1_0_0; }

		//'class'?
		public Keyword getClassKeyword_0_1_1() { return cClassKeyword_0_1_1; }

		//'class'
		public Keyword getClassKeyword_0_2() { return cClassKeyword_0_2; }

		//name=QName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QName
		public RuleCall getNameQNameParserRuleCall_1_0() { return cNameQNameParserRuleCall_1_0; }

		//('extends' superClass=JvmParameterizedTypeReference)?
		public Group getGroup_2() { return cGroup_2; }

		//'extends'
		public Keyword getExtendsKeyword_2_0() { return cExtendsKeyword_2_0; }

		//superClass=JvmParameterizedTypeReference
		public Assignment getSuperClassAssignment_2_1() { return cSuperClassAssignment_2_1; }

		//JvmParameterizedTypeReference
		public RuleCall getSuperClassJvmParameterizedTypeReferenceParserRuleCall_2_1_0() { return cSuperClassJvmParameterizedTypeReferenceParserRuleCall_2_1_0; }

		//('implements' superInterfaces+=JvmParameterizedTypeReference (',' superInterfaces+=JvmParameterizedTypeReference)*)?
		public Group getGroup_3() { return cGroup_3; }

		//'implements'
		public Keyword getImplementsKeyword_3_0() { return cImplementsKeyword_3_0; }

		//superInterfaces+=JvmParameterizedTypeReference
		public Assignment getSuperInterfacesAssignment_3_1() { return cSuperInterfacesAssignment_3_1; }

		//JvmParameterizedTypeReference
		public RuleCall getSuperInterfacesJvmParameterizedTypeReferenceParserRuleCall_3_1_0() { return cSuperInterfacesJvmParameterizedTypeReferenceParserRuleCall_3_1_0; }

		//(',' superInterfaces+=JvmParameterizedTypeReference)*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//','
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }

		//superInterfaces+=JvmParameterizedTypeReference
		public Assignment getSuperInterfacesAssignment_3_2_1() { return cSuperInterfacesAssignment_3_2_1; }

		//JvmParameterizedTypeReference
		public RuleCall getSuperInterfacesJvmParameterizedTypeReferenceParserRuleCall_3_2_1_0() { return cSuperInterfacesJvmParameterizedTypeReferenceParserRuleCall_3_2_1_0; }

		//description=STRING?
		public Assignment getDescriptionAssignment_4() { return cDescriptionAssignment_4; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_4_0() { return cDescriptionSTRINGTerminalRuleCall_4_0; }

		//('=>' invariant=XExpression)?
		public Group getGroup_5() { return cGroup_5; }

		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_5_0() { return cEqualsSignGreaterThanSignKeyword_5_0; }

		//invariant=XExpression
		public Assignment getInvariantAssignment_5_1() { return cInvariantAssignment_5_1; }

		//XExpression
		public RuleCall getInvariantXExpressionParserRuleCall_5_1_0() { return cInvariantXExpressionParserRuleCall_5_1_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }

		//methods+=TestedOperation*
		public Assignment getMethodsAssignment_7() { return cMethodsAssignment_7; }

		//TestedOperation
		public RuleCall getMethodsTestedOperationParserRuleCall_7_0() { return cMethodsTestedOperationParserRuleCall_7_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class TestedOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.hal.jex.jextest.JexTest.TestedOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cTestedConstructorParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cTestedMethodParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final Assignment cParametersAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParametersParameterListParserRuleCall_1_0 = (RuleCall)cParametersAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLessThanSignEqualsSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cPreExpressionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cPreExpressionXExpressionParserRuleCall_3_1_0 = (RuleCall)cPreExpressionAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cEqualsSignGreaterThanSignKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cPostExpressionAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cPostExpressionXExpressionParserRuleCall_4_1_0 = (RuleCall)cPostExpressionAssignment_4_1.eContents().get(0);
		
		//TestedOperation:
		//	(TestedConstructor | TestedMethod) parameters=ParameterList
		//	description=STRING? ('<=' preExpression=XExpression)? ('=>' postExpression=XExpression)?;
		@Override public ParserRule getRule() { return rule; }

		//(TestedConstructor | TestedMethod) parameters=ParameterList description=STRING? ('<=' preExpression=XExpression)? ('=>'
		//postExpression=XExpression)?
		public Group getGroup() { return cGroup; }

		//(TestedConstructor | TestedMethod)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//TestedConstructor
		public RuleCall getTestedConstructorParserRuleCall_0_0() { return cTestedConstructorParserRuleCall_0_0; }

		//TestedMethod
		public RuleCall getTestedMethodParserRuleCall_0_1() { return cTestedMethodParserRuleCall_0_1; }

		//parameters=ParameterList
		public Assignment getParametersAssignment_1() { return cParametersAssignment_1; }

		//ParameterList
		public RuleCall getParametersParameterListParserRuleCall_1_0() { return cParametersParameterListParserRuleCall_1_0; }

		//description=STRING?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }

		//('<=' preExpression=XExpression)?
		public Group getGroup_3() { return cGroup_3; }

		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_3_0() { return cLessThanSignEqualsSignKeyword_3_0; }

		//preExpression=XExpression
		public Assignment getPreExpressionAssignment_3_1() { return cPreExpressionAssignment_3_1; }

		//XExpression
		public RuleCall getPreExpressionXExpressionParserRuleCall_3_1_0() { return cPreExpressionXExpressionParserRuleCall_3_1_0; }

		//('=>' postExpression=XExpression)?
		public Group getGroup_4() { return cGroup_4; }

		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_4_0() { return cEqualsSignGreaterThanSignKeyword_4_0; }

		//postExpression=XExpression
		public Assignment getPostExpressionAssignment_4_1() { return cPostExpressionAssignment_4_1; }

		//XExpression
		public RuleCall getPostExpressionXExpressionParserRuleCall_4_1_0() { return cPostExpressionXExpressionParserRuleCall_4_1_0; }
	}

	public class TestedConstructorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.hal.jex.jextest.JexTest.TestedConstructor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTestedConstructorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNewKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//TestedConstructor:
		//	{TestedConstructor} 'new';
		@Override public ParserRule getRule() { return rule; }

		//{TestedConstructor} 'new'
		public Group getGroup() { return cGroup; }

		//{TestedConstructor}
		public Action getTestedConstructorAction_0() { return cTestedConstructorAction_0; }

		//'new'
		public Keyword getNewKeyword_1() { return cNewKeyword_1; }
	}

	public class TestedMethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.hal.jex.jextest.JexTest.TestedMethod");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAbstractAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cAbstractAbstractKeyword_0_0 = (Keyword)cAbstractAssignment_0.eContents().get(0);
		private final Assignment cReturnTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cReturnTypeJvmParameterizedTypeReferenceParserRuleCall_1_0 = (RuleCall)cReturnTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//TestedMethod:
		//	abstract?='abstract'? returnType=JvmParameterizedTypeReference name=ID;
		@Override public ParserRule getRule() { return rule; }

		//abstract?='abstract'? returnType=JvmParameterizedTypeReference name=ID
		public Group getGroup() { return cGroup; }

		//abstract?='abstract'?
		public Assignment getAbstractAssignment_0() { return cAbstractAssignment_0; }

		//'abstract'
		public Keyword getAbstractAbstractKeyword_0_0() { return cAbstractAbstractKeyword_0_0; }

		//returnType=JvmParameterizedTypeReference
		public Assignment getReturnTypeAssignment_1() { return cReturnTypeAssignment_1; }

		//JvmParameterizedTypeReference
		public RuleCall getReturnTypeJvmParameterizedTypeReferenceParserRuleCall_1_0() { return cReturnTypeJvmParameterizedTypeReferenceParserRuleCall_1_0; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}

	public class OpPostfixElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.hal.jex.jextest.JexTest.OpPostfix");
		private final Keyword cPlusSignPlusSignKeyword = (Keyword)rule.eContents().get(1);
		
		////
		//// XExpression adjustments
		//// remove --, since it clashes with transition
		//OpPostfix:
		//	"++";
		@Override public ParserRule getRule() { return rule; }

		//"++"
		public Keyword getPlusSignPlusSignKeyword() { return cPlusSignPlusSignKeyword; }
	}

	public class OpEqualityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.hal.jex.jextest.JexTest.OpEquality");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignEqualsSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cExclamationMarkEqualsSignEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cQuestionMarkEqualsSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//// extend with ?= operator
		//OpEquality:
		//	'==' | '!=' | '===' | '!=='
		//	| '?=' // assertEquals operator, for comparisons that should result in an assertion
		//;
		@Override public ParserRule getRule() { return rule; }

		//'==' | '!=' | '===' | '!==' | '?='
		public Alternatives getAlternatives() { return cAlternatives; }

		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_0() { return cEqualsSignEqualsSignKeyword_0; }

		//'!='
		public Keyword getExclamationMarkEqualsSignKeyword_1() { return cExclamationMarkEqualsSignKeyword_1; }

		//'==='
		public Keyword getEqualsSignEqualsSignEqualsSignKeyword_2() { return cEqualsSignEqualsSignEqualsSignKeyword_2; }

		//'!=='
		public Keyword getExclamationMarkEqualsSignEqualsSignKeyword_3() { return cExclamationMarkEqualsSignEqualsSignKeyword_3; }

		//'?='
		public Keyword getQuestionMarkEqualsSignKeyword_4() { return cQuestionMarkEqualsSignKeyword_4; }
	}
	
	
	private final JexTestSuiteElements pJexTestSuite;
	private final JexTestCaseElements pJexTestCase;
	private final SuiteInstanceElements pSuiteInstance;
	private final InstanceElements pInstance;
	private final TestMemberContextElements pTestMemberContext;
	private final StateTestContextElements pStateTestContext;
	private final PropertiesTestOwnerElements pPropertiesTestOwner;
	private final StateFunctionElements pStateFunction;
	private final JexTestSequenceElements pJexTestSequence;
	private final JvmOperationRefElements pJvmOperationRef;
	private final QNameElements pQName;
	private final StateElements pState;
	private final ObjectTestElements pObjectTest;
	private final PropertiesTestElements pPropertiesTest;
	private final TransitionElements pTransition;
	private final TransitionSourceElements pTransitionSource;
	private final TransitionActionElements pTransitionAction;
	private final TransitionExpressionActionElements pTransitionExpressionAction;
	private final TransitionInputActionElements pTransitionInputAction;
	private final TransitionEffectElements pTransitionEffect;
	private final TransitionEffect2Elements pTransitionEffect2;
	private final TransitionTargetEffectElements pTransitionTargetEffect;
	private final TransitionExceptionEffectElements pTransitionExceptionEffect;
	private final TransitionOutputEffectElements pTransitionOutputEffect;
	private final TransitionCallbackEffectElements pTransitionCallbackEffect;
	private final MethodElements pMethod;
	private final ParameterListElements pParameterList;
	private final ParameterElements pParameter;
	private final TestedClassElements pTestedClass;
	private final TestedOperationElements pTestedOperation;
	private final TestedConstructorElements pTestedConstructor;
	private final TestedMethodElements pTestedMethod;
	private final OpPostfixElements pOpPostfix;
	private final OpEqualityElements pOpEquality;
	
	private final Grammar grammar;

	private final XbaseGrammarAccess gaXbase;

	private final XtypeGrammarAccess gaXtype;

	@Inject
	public JexTestGrammarAccess(GrammarProvider grammarProvider,
		XbaseGrammarAccess gaXbase,
		XtypeGrammarAccess gaXtype) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaXbase = gaXbase;
		this.gaXtype = gaXtype;
		this.pJexTestSuite = new JexTestSuiteElements();
		this.pJexTestCase = new JexTestCaseElements();
		this.pSuiteInstance = new SuiteInstanceElements();
		this.pInstance = new InstanceElements();
		this.pTestMemberContext = new TestMemberContextElements();
		this.pStateTestContext = new StateTestContextElements();
		this.pPropertiesTestOwner = new PropertiesTestOwnerElements();
		this.pStateFunction = new StateFunctionElements();
		this.pJexTestSequence = new JexTestSequenceElements();
		this.pJvmOperationRef = new JvmOperationRefElements();
		this.pQName = new QNameElements();
		this.pState = new StateElements();
		this.pObjectTest = new ObjectTestElements();
		this.pPropertiesTest = new PropertiesTestElements();
		this.pTransition = new TransitionElements();
		this.pTransitionSource = new TransitionSourceElements();
		this.pTransitionAction = new TransitionActionElements();
		this.pTransitionExpressionAction = new TransitionExpressionActionElements();
		this.pTransitionInputAction = new TransitionInputActionElements();
		this.pTransitionEffect = new TransitionEffectElements();
		this.pTransitionEffect2 = new TransitionEffect2Elements();
		this.pTransitionTargetEffect = new TransitionTargetEffectElements();
		this.pTransitionExceptionEffect = new TransitionExceptionEffectElements();
		this.pTransitionOutputEffect = new TransitionOutputEffectElements();
		this.pTransitionCallbackEffect = new TransitionCallbackEffectElements();
		this.pMethod = new MethodElements();
		this.pParameterList = new ParameterListElements();
		this.pParameter = new ParameterElements();
		this.pTestedClass = new TestedClassElements();
		this.pTestedOperation = new TestedOperationElements();
		this.pTestedConstructor = new TestedConstructorElements();
		this.pTestedMethod = new TestedMethodElements();
		this.pOpPostfix = new OpPostfixElements();
		this.pOpEquality = new OpEqualityElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("no.hal.jex.jextest.JexTest".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public XbaseGrammarAccess getXbaseGrammarAccess() {
		return gaXbase;
	}

	public XtypeGrammarAccess getXtypeGrammarAccess() {
		return gaXtype;
	}

	
	//JexTestSuite:
	//	{JexTestSuite} ('suite' suiteClassName=QName)?
	//	importSection=XImportSection? (('instance' | 'val') instances+=Instance (',' instances+=Instance)* |
	//	stateFunctions+=StateFunction | methods+=Method)*
	//	testCases+=JexTestCase*;
	public JexTestSuiteElements getJexTestSuiteAccess() {
		return pJexTestSuite;
	}
	
	public ParserRule getJexTestSuiteRule() {
		return getJexTestSuiteAccess().getRule();
	}

	//JexTestCase:
	//	{JexTestCase} 'test' (testedClasses+=TestedClass* | testedClassRef=JvmParameterizedTypeReference) ('with'
	//	testClassName=QName)?
	//	description=STRING? ('@' url=STRING)?
	//	importSection=XImportSection? (('instance' | 'val') instances+=SuiteInstance (',' instances+=SuiteInstance)* |
	//	stateFunctions+=StateFunction | testSequences+=JexTestSequence | methods+=Method)*;
	public JexTestCaseElements getJexTestCaseAccess() {
		return pJexTestCase;
	}
	
	public ParserRule getJexTestCaseRule() {
		return getJexTestCaseAccess().getRule();
	}

	//SuiteInstance Instance:
	//	type=JvmTypeReference? name=ID ('=' expr=XExpression)?
	public SuiteInstanceElements getSuiteInstanceAccess() {
		return pSuiteInstance;
	}
	
	public ParserRule getSuiteInstanceRule() {
		return getSuiteInstanceAccess().getRule();
	}

	//Instance:
	//	type=JvmTypeReference? name=ID ('=' expr=XExpression)?;
	public InstanceElements getInstanceAccess() {
		return pInstance;
	}
	
	public ParserRule getInstanceRule() {
		return getInstanceAccess().getRule();
	}

	//TestMemberContext:
	//	JexTestSuite | JexTestCase;
	public TestMemberContextElements getTestMemberContextAccess() {
		return pTestMemberContext;
	}
	
	public ParserRule getTestMemberContextRule() {
		return getTestMemberContextAccess().getRule();
	}

	//StateTestContext:
	//	StateFunction | JexTestSequence;
	public StateTestContextElements getStateTestContextAccess() {
		return pStateTestContext;
	}
	
	public ParserRule getStateTestContextRule() {
		return getStateTestContextAccess().getRule();
	}

	//PropertiesTestOwner:
	//	StateFunction | ObjectTest;
	public PropertiesTestOwnerElements getPropertiesTestOwnerAccess() {
		return pPropertiesTestOwner;
	}
	
	public ParserRule getPropertiesTestOwnerRule() {
		return getPropertiesTestOwnerAccess().getRule();
	}

	//StateFunction:
	//	'state' 'method' type=JvmParameterizedTypeReference? name=ID description=STRING?
	//	'(' (parameters+=Parameter (',' parameters+=Parameter)*)? ')'
	//	test=PropertiesTest;
	public StateFunctionElements getStateFunctionAccess() {
		return pStateFunction;
	}
	
	public ParserRule getStateFunctionRule() {
		return getStateFunctionAccess().getRule();
	}

	//JexTestSequence:
	//	'sequence' name=ID description=STRING? ('tests' (tested+=JvmOperationRef (',' tested+=JvmOperationRef)*)?)?
	//	'{' (('instance' | 'val') instances+=Instance (',' instances+=Instance)*)*
	//	transitions+=Transition*
	//	'}';
	public JexTestSequenceElements getJexTestSequenceAccess() {
		return pJexTestSequence;
	}
	
	public ParserRule getJexTestSequenceRule() {
		return getJexTestSequenceAccess().getRule();
	}

	//JvmOperationRef:
	//	methodName=ID ('(' (parameterTypes+=JvmParameterizedTypeReference (','
	//	parameterTypes+=JvmParameterizedTypeReference)*)? ')')?;
	public JvmOperationRefElements getJvmOperationRefAccess() {
		return pJvmOperationRef;
	}
	
	public ParserRule getJvmOperationRefRule() {
		return getJvmOperationRefAccess().getRule();
	}

	//QName:
	//	ID+ ('.' ID)*;
	public QNameElements getQNameAccess() {
		return pQName;
	}
	
	public ParserRule getQNameRule() {
		return getQNameAccess().getRule();
	}

	//State:
	//	{State}
	//	'state' ('#' name=ID)? description=STRING?
	//	objectTests+=ObjectTest+;
	public StateElements getStateAccess() {
		return pState;
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}

	//ObjectTest:
	//	instance=[Instance]?
	//	test=PropertiesTest;
	public ObjectTestElements getObjectTestAccess() {
		return pObjectTest;
	}
	
	public ParserRule getObjectTestRule() {
		return getObjectTestAccess().getRule();
	}

	//PropertiesTest xbase::XBlockExpression:
	//	{PropertiesTest} ('{' (expressions+=XExpression ';'?)* '}')
	public PropertiesTestElements getPropertiesTestAccess() {
		return pPropertiesTest;
	}
	
	public ParserRule getPropertiesTestRule() {
		return getPropertiesTestAccess().getRule();
	}

	//Transition:
	//	source=TransitionSource?
	//	// action part
	//	description=STRING? '--'
	//	actions+=TransitionAction (',' actions+=TransitionAction)*
	//	// effect part
	//	effects+=TransitionEffect | effects+=TransitionTargetEffect;
	public TransitionElements getTransitionAccess() {
		return pTransition;
	}
	
	public ParserRule getTransitionRule() {
		return getTransitionAccess().getRule();
	}

	//TransitionSource:
	//	state=State | '#' stateRef=[State];
	public TransitionSourceElements getTransitionSourceAccess() {
		return pTransitionSource;
	}
	
	public ParserRule getTransitionSourceRule() {
		return getTransitionSourceAccess().getRule();
	}

	//TransitionAction:
	//	TransitionExpressionAction;
	public TransitionActionElements getTransitionActionAccess() {
		return pTransitionAction;
	}
	
	public ParserRule getTransitionActionRule() {
		return getTransitionActionAccess().getRule();
	}

	//// | TransitionInputAction;
	//TransitionExpressionAction:
	//	expr=XExpression ('#' times=XExpression)?;
	public TransitionExpressionActionElements getTransitionExpressionActionAccess() {
		return pTransitionExpressionAction;
	}
	
	public ParserRule getTransitionExpressionActionRule() {
		return getTransitionExpressionActionAccess().getRule();
	}

	//TransitionInputAction:
	//	'inputs' input=STRING;
	public TransitionInputActionElements getTransitionInputActionAccess() {
		return pTransitionInputAction;
	}
	
	public ParserRule getTransitionInputActionRule() {
		return getTransitionInputActionAccess().getRule();
	}

	//TransitionEffect:
	//	TransitionTargetEffect | TransitionEffect2;
	public TransitionEffectElements getTransitionEffectAccess() {
		return pTransitionEffect;
	}
	
	public ParserRule getTransitionEffectRule() {
		return getTransitionEffectAccess().getRule();
	}

	//TransitionEffect2:
	//	TransitionExceptionEffect | TransitionCallbackEffect;
	public TransitionEffect2Elements getTransitionEffect2Access() {
		return pTransitionEffect2;
	}
	
	public ParserRule getTransitionEffect2Rule() {
		return getTransitionEffect2Access().getRule();
	}

	//// | TransitionOutputEffect;
	//TransitionTargetEffect:
	//	'-->' (state=State | '#' stateRef=[State]);
	public TransitionTargetEffectElements getTransitionTargetEffectAccess() {
		return pTransitionTargetEffect;
	}
	
	public ParserRule getTransitionTargetEffectRule() {
		return getTransitionTargetEffectAccess().getRule();
	}

	//TransitionExceptionEffect:
	//	'throws' exceptionClass=JvmParameterizedTypeReference;
	public TransitionExceptionEffectElements getTransitionExceptionEffectAccess() {
		return pTransitionExceptionEffect;
	}
	
	public ParserRule getTransitionExceptionEffectRule() {
		return getTransitionExceptionEffectAccess().getRule();
	}

	//TransitionOutputEffect:
	//	'outputs' pattern=STRING;
	public TransitionOutputEffectElements getTransitionOutputEffectAccess() {
		return pTransitionOutputEffect;
	}
	
	public ParserRule getTransitionOutputEffectRule() {
		return getTransitionOutputEffectAccess().getRule();
	}

	//TransitionCallbackEffect:
	//	'callback'
	//	instance=[Instance] 'to' (callbackClass=JvmParameterizedTypeReference '.')? methodName=ID parameters=ParameterList?
	//	arguments=PropertiesTest;
	public TransitionCallbackEffectElements getTransitionCallbackEffectAccess() {
		return pTransitionCallbackEffect;
	}
	
	public ParserRule getTransitionCallbackEffectRule() {
		return getTransitionCallbackEffectAccess().getRule();
	}

	//Method:
	//	'method' returnType=JvmTypeReference? name=(ID | OpEquality | OpCompare) parameters=ParameterList
	//	body=XExpression;
	public MethodElements getMethodAccess() {
		return pMethod;
	}
	
	public ParserRule getMethodRule() {
		return getMethodAccess().getRule();
	}

	//ParameterList:
	//	{ParameterList} '(' (parameters+=Parameter (',' parameters+=Parameter)*)? ')';
	public ParameterListElements getParameterListAccess() {
		return pParameterList;
	}
	
	public ParserRule getParameterListRule() {
		return getParameterListAccess().getRule();
	}

	//Parameter:
	//	type=JvmTypeReference vararg?='...'? name=ID;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	//// Solution specification
	//TestedClass:
	//	(interface?='interface' | abstract?='abstract' 'class'? | 'class') name=QName ('extends'
	//	superClass=JvmParameterizedTypeReference)? ('implements' superInterfaces+=JvmParameterizedTypeReference (','
	//	superInterfaces+=JvmParameterizedTypeReference)*)?
	//	description=STRING? ('=>' invariant=XExpression)?
	//	'{'
	//	methods+=TestedOperation*
	//	'}';
	public TestedClassElements getTestedClassAccess() {
		return pTestedClass;
	}
	
	public ParserRule getTestedClassRule() {
		return getTestedClassAccess().getRule();
	}

	//TestedOperation:
	//	(TestedConstructor | TestedMethod) parameters=ParameterList
	//	description=STRING? ('<=' preExpression=XExpression)? ('=>' postExpression=XExpression)?;
	public TestedOperationElements getTestedOperationAccess() {
		return pTestedOperation;
	}
	
	public ParserRule getTestedOperationRule() {
		return getTestedOperationAccess().getRule();
	}

	//TestedConstructor:
	//	{TestedConstructor} 'new';
	public TestedConstructorElements getTestedConstructorAccess() {
		return pTestedConstructor;
	}
	
	public ParserRule getTestedConstructorRule() {
		return getTestedConstructorAccess().getRule();
	}

	//TestedMethod:
	//	abstract?='abstract'? returnType=JvmParameterizedTypeReference name=ID;
	public TestedMethodElements getTestedMethodAccess() {
		return pTestedMethod;
	}
	
	public ParserRule getTestedMethodRule() {
		return getTestedMethodAccess().getRule();
	}

	////
	//// XExpression adjustments
	//// remove --, since it clashes with transition
	//OpPostfix:
	//	"++";
	public OpPostfixElements getOpPostfixAccess() {
		return pOpPostfix;
	}
	
	public ParserRule getOpPostfixRule() {
		return getOpPostfixAccess().getRule();
	}

	//// extend with ?= operator
	//OpEquality:
	//	'==' | '!=' | '===' | '!=='
	//	| '?=' // assertEquals operator, for comparisons that should result in an assertion
	//;
	public OpEqualityElements getOpEqualityAccess() {
		return pOpEquality;
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}

	//XExpression:
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbase.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}

	//XAssignment XExpression:
	//	{XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment | XOrExpression
	//	(=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign])
	//	rightOperand=XAssignment)?
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbase.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}

	//OpSingleAssign:
	//	'=';
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbase.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}

	//OpMultiAssign:
	//	'+=' | '-=' | '*=' | '/=' | '%=' |
	//	'<' '<' '=' |
	//	'>' '>'? '>=';
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbase.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}

	//XOrExpression XExpression:
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=XAndExpression)*
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbase.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}

	//OpOr:
	//	'||';
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbase.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}

	//XAndExpression XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//	rightOperand=XEqualityExpression)*
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbase.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}

	//OpAnd:
	//	'&&';
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbase.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}

	//XEqualityExpression XExpression:
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current}
	//	feature=[types::JvmIdentifiableElement|super::OpEquality]) rightOperand=XRelationalExpression)*
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbase.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}

	//XRelationalExpression XExpression:
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} 'instanceof') type=JvmTypeReference |
	//	=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
	//	rightOperand=XOtherOperatorExpression)*
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbase.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}

	//OpCompare:
	//	'>=' | '<' '=' | '>' | '<';
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbase.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}

	//XOtherOperatorExpression XExpression:
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//	rightOperand=XAdditiveExpression)*
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbase.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}

	//OpOther:
	//	'->'
	//	| '..<'
	//	| '>' '..'
	//	| '..'
	//	| '=>'
	//	| '>' (=> ('>' '>') | '>') | '<' (=> ('<' '<') | '<' | '=>') | '<>'
	//	| '?:';
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXbase.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}

	//XAdditiveExpression XExpression:
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//	rightOperand=XMultiplicativeExpression)*
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbase.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}

	//OpAdd:
	//	'+' | '-';
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbase.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}

	//XMultiplicativeExpression XExpression:
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//	rightOperand=XUnaryOperation)*
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbase.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}

	//OpMulti:
	//	'*' | '**' | '/' | '%';
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbase.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}

	//XUnaryOperation XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation
	//	| XCastedExpression
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbase.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}

	//OpUnary:
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbase.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}

	//XCastedExpression XExpression:
	//	XPostfixOperation (=> ({XCastedExpression.target=current} 'as') type=JvmTypeReference)*
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbase.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}

	//XPostfixOperation XExpression:
	//	XMemberFeatureCall => ({XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|super::OpPostfix])?
	public XbaseGrammarAccess.XPostfixOperationElements getXPostfixOperationAccess() {
		return gaXbase.getXPostfixOperationAccess();
	}
	
	public ParserRule getXPostfixOperationRule() {
		return getXPostfixOperationAccess().getRule();
	}

	//XMemberFeatureCall XExpression:
	//	XPrimaryExpression (=> ({XAssignment.assignable=current} ('.' | explicitStatic?="::")
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment
	//	| => ({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="::")) ('<'
	//	typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?='(' (memberCallArguments+=XShortClosure
	//	| memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*)?
	//	')')?
	//	memberCallArguments+=XClosure?)*
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXbase.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}

	//XPrimaryExpression XExpression:
	//	XConstructorCall | XBlockExpression | XSwitchExpression | XSynchronizedExpression | XFeatureCall | XLiteral |
	//	XIfExpression | XForLoopExpression | XBasicForLoopExpression | XWhileExpression | XDoWhileExpression |
	//	XThrowExpression | XReturnExpression | XTryCatchFinallyExpression | XParenthesizedExpression
	public XbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaXbase.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}

	//XLiteral XExpression:
	//	XCollectionLiteral | XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaXbase.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}

	//XCollectionLiteral:
	//	XSetLiteral | XListLiteral;
	public XbaseGrammarAccess.XCollectionLiteralElements getXCollectionLiteralAccess() {
		return gaXbase.getXCollectionLiteralAccess();
	}
	
	public ParserRule getXCollectionLiteralRule() {
		return getXCollectionLiteralAccess().getRule();
	}

	//XSetLiteral:
	//	{XSetLiteral} '#' '{' (elements+=XExpression (',' elements+=XExpression)*)? '}';
	public XbaseGrammarAccess.XSetLiteralElements getXSetLiteralAccess() {
		return gaXbase.getXSetLiteralAccess();
	}
	
	public ParserRule getXSetLiteralRule() {
		return getXSetLiteralAccess().getRule();
	}

	//XListLiteral:
	//	{XListLiteral} '#' '[' (elements+=XExpression (',' elements+=XExpression)*)? ']';
	public XbaseGrammarAccess.XListLiteralElements getXListLiteralAccess() {
		return gaXbase.getXListLiteralAccess();
	}
	
	public ParserRule getXListLiteralRule() {
		return getXListLiteralAccess().getRule();
	}

	//XClosure XExpression:
	//	=> ({XClosure}
	//	'[')
	//	=> ((declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?='|')?
	//	expression=XExpressionInClosure
	//	']'
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbase.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}

	//XExpressionInClosure XExpression:
	//	{XBlockExpression} (expressions+=XExpressionOrVarDeclaration ';'?)*
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXbase.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}

	//XShortClosure XExpression:
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?='|') expression=XExpression
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbase.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}

	//XParenthesizedExpression XExpression:
	//	'(' XExpression ')'
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbase.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}

	//XIfExpression XExpression:
	//	{XIfExpression}
	//	'if' '(' if=XExpression ')'
	//	then=XExpression (=> 'else' else=XExpression)?
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbase.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}

	//XSwitchExpression XExpression:
	//	{XSwitchExpression}
	//	'switch' (=> ('(' declaredParam=JvmFormalParameter ':') switch=XExpression ')'
	//	| => (declaredParam=JvmFormalParameter ':')? switch=XExpression) '{'
	//	cases+=XCasePart* ('default' ':' default=XExpression)?
	//	'}'
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbase.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}

	//XCasePart:
	//	{XCasePart} typeGuard=JvmTypeReference? ('case' case=XExpression)? (':' then=XExpression | fallThrough?=',');
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbase.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}

	//XForLoopExpression XExpression:
	//	=> ({XForLoopExpression}
	//	'for' '(' declaredParam=JvmFormalParameter ':') forExpression=XExpression ')'
	//	eachExpression=XExpression
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXbase.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}

	//XBasicForLoopExpression XExpression:
	//	{XBasicForLoopExpression}
	//	'for' '(' (initExpressions+=XExpressionOrVarDeclaration (',' initExpressions+=XExpressionOrVarDeclaration)*)? ';'
	//	expression=XExpression? ';' (updateExpressions+=XExpression (',' updateExpressions+=XExpression)*)? ')'
	//	eachExpression=XExpression
	public XbaseGrammarAccess.XBasicForLoopExpressionElements getXBasicForLoopExpressionAccess() {
		return gaXbase.getXBasicForLoopExpressionAccess();
	}
	
	public ParserRule getXBasicForLoopExpressionRule() {
		return getXBasicForLoopExpressionAccess().getRule();
	}

	//XWhileExpression XExpression:
	//	{XWhileExpression}
	//	'while' '(' predicate=XExpression ')'
	//	body=XExpression
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbase.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}

	//XDoWhileExpression XExpression:
	//	{XDoWhileExpression}
	//	'do'
	//	body=XExpression
	//	'while' '(' predicate=XExpression ')'
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbase.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}

	//XBlockExpression XExpression:
	//	{XBlockExpression}
	//	'{' (expressions+=XExpressionOrVarDeclaration ';'?)*
	//	'}'
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXbase.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}

	//XExpressionOrVarDeclaration XExpression:
	//	XVariableDeclaration | XExpression
	public XbaseGrammarAccess.XExpressionOrVarDeclarationElements getXExpressionOrVarDeclarationAccess() {
		return gaXbase.getXExpressionOrVarDeclarationAccess();
	}
	
	public ParserRule getXExpressionOrVarDeclarationRule() {
		return getXExpressionOrVarDeclarationAccess().getRule();
	}

	//XVariableDeclaration XExpression:
	//	{XVariableDeclaration} (writeable?='var' | 'val') (=> (type=JvmTypeReference name=ValidID) | name=ValidID) ('='
	//	right=XExpression)?
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXbase.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}

	//JvmFormalParameter types::JvmFormalParameter:
	//	parameterType=JvmTypeReference? name=ValidID
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbase.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}

	//FullJvmFormalParameter types::JvmFormalParameter:
	//	parameterType=JvmTypeReference name=ValidID
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXbase.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}

	//XFeatureCall XExpression:
	//	{XFeatureCall} ('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?='(' (featureCallArguments+=XShortClosure
	//	| featureCallArguments+=XExpression (',' featureCallArguments+=XExpression)*)?
	//	')')?
	//	featureCallArguments+=XClosure?
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXbase.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}

	//FeatureCallID:
	//	ValidID | 'extends' | 'static' | 'import' | 'extension';
	public XbaseGrammarAccess.FeatureCallIDElements getFeatureCallIDAccess() {
		return gaXbase.getFeatureCallIDAccess();
	}
	
	public ParserRule getFeatureCallIDRule() {
		return getFeatureCallIDAccess().getRule();
	}

	//IdOrSuper:
	//	FeatureCallID | 'super';
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbase.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}

	//XConstructorCall XExpression:
	//	{XConstructorCall}
	//	'new' constructor=[types::JvmConstructor|QualifiedName] (=> '<' typeArguments+=JvmArgumentTypeReference (','
	//	typeArguments+=JvmArgumentTypeReference)* '>')? (=> explicitConstructorCall?='(' (arguments+=XShortClosure
	//	| arguments+=XExpression (',' arguments+=XExpression)*)?
	//	')')?
	//	arguments+=XClosure?
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXbase.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}

	//XBooleanLiteral XExpression:
	//	{XBooleanLiteral} ('false' | isTrue?='true')
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbase.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}

	//XNullLiteral XExpression:
	//	{XNullLiteral} 'null'
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbase.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}

	//XNumberLiteral XExpression:
	//	{XNumberLiteral} value=Number
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXbase.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}

	//XStringLiteral XExpression:
	//	{XStringLiteral} value=STRING
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbase.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}

	//XTypeLiteral XExpression:
	//	{XTypeLiteral} 'typeof' '(' type=[types::JvmType|QualifiedName] arrayDimensions+=ArrayBrackets* ')'
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbase.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}

	//XThrowExpression XExpression:
	//	{XThrowExpression} 'throw' expression=XExpression
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbase.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}

	//XReturnExpression XExpression:
	//	{XReturnExpression} 'return' -> expression=XExpression?
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbase.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}

	//XTryCatchFinallyExpression XExpression:
	//	{XTryCatchFinallyExpression}
	//	'try'
	//	expression=XExpression (catchClauses+=XCatchClause+ (=> 'finally' finallyExpression=XExpression)?
	//	| 'finally' finallyExpression=XExpression)
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbase.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}

	//XSynchronizedExpression XExpression:
	//	=> ({XSynchronizedExpression}
	//	'synchronized' '(') param=XExpression ')' expression=XExpression
	public XbaseGrammarAccess.XSynchronizedExpressionElements getXSynchronizedExpressionAccess() {
		return gaXbase.getXSynchronizedExpressionAccess();
	}
	
	public ParserRule getXSynchronizedExpressionRule() {
		return getXSynchronizedExpressionAccess().getRule();
	}

	//XCatchClause:
	//	=> 'catch' '(' declaredParam=FullJvmFormalParameter ')' expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbase.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}

	//QualifiedName:
	//	ValidID (=> '.' ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbase.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//Number hidden():
	//	HEX | (INT | DECIMAL) ('.' (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXbase.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	/// **
	// * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes, 
	// * which makes downstream grammars break on classloading, when a rule is removed.
	// * / StaticQualifier:
	//	(ValidID '::')+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbase.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}

	//terminal HEX:
	//	('0x' | '0X') ('0'..'9' | 'a'..'f' | 'A'..'F' | '_')+ ('#' (('b' | 'B') ('i' | 'I') | ('l' | 'L')))?;
	public TerminalRule getHEXRule() {
		return gaXbase.getHEXRule();
	} 

	//terminal INT returns ecore::EInt:
	//	'0'..'9' ('0'..'9' | '_')*;
	public TerminalRule getINTRule() {
		return gaXbase.getINTRule();
	} 

	//terminal DECIMAL:
	//	INT (('e' | 'E') ('+' | '-')? INT)? (('b' | 'B') ('i' | 'I' | 'd' | 'D') | ('l' | 'L' | 'd' | 'D' | 'f' | 'F'))?;
	public TerminalRule getDECIMALRule() {
		return gaXbase.getDECIMALRule();
	} 

	//JvmTypeReference:
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)*
	//	| XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXtype.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}

	//ArrayBrackets:
	//	'[' ']';
	public XtypeGrammarAccess.ArrayBracketsElements getArrayBracketsAccess() {
		return gaXtype.getArrayBracketsAccess();
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}

	//XFunctionTypeRef:
	//	('(' (paramTypes+=JvmTypeReference (',' paramTypes+=JvmTypeReference)*)? ')')? '=>' returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXtype.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}

	//JvmParameterizedTypeReference:
	//	type=[JvmType|super::QualifiedName] (=> '<' arguments+=JvmArgumentTypeReference (','
	//	arguments+=JvmArgumentTypeReference)* '>' (=> ({JvmInnerTypeReference.outer=current} '.') type=[JvmType|ValidID] (=>
	//	'<' arguments+=JvmArgumentTypeReference (',' arguments+=JvmArgumentTypeReference)* '>')?)*)?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXtype.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}

	//JvmArgumentTypeReference JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXtype.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}

	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} '?' (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*
	//	| constraints+=JvmLowerBound constraints+=JvmLowerBoundAnded*)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXtype.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}

	//JvmUpperBound:
	//	'extends' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXtype.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}

	//JvmUpperBoundAnded JvmUpperBound:
	//	'&' typeReference=JvmTypeReference
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXtype.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}

	//JvmLowerBound:
	//	'super' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXtype.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}

	//JvmLowerBoundAnded JvmLowerBound:
	//	'&' typeReference=JvmTypeReference
	public XtypeGrammarAccess.JvmLowerBoundAndedElements getJvmLowerBoundAndedAccess() {
		return gaXtype.getJvmLowerBoundAndedAccess();
	}
	
	public ParserRule getJvmLowerBoundAndedRule() {
		return getJvmLowerBoundAndedAccess().getRule();
	}

	//JvmTypeParameter:
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXtype.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}

	//QualifiedNameWithWildcard:
	//	super::QualifiedName '.' '*';
	public XtypeGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaXtype.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//ValidID:
	//	ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXtype.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}

	//XImportSection:
	//	importDeclarations+=XImportDeclaration+;
	public XtypeGrammarAccess.XImportSectionElements getXImportSectionAccess() {
		return gaXtype.getXImportSectionAccess();
	}
	
	public ParserRule getXImportSectionRule() {
		return getXImportSectionAccess().getRule();
	}

	//XImportDeclaration:
	//	'import' (static?='static' extension?='extension'? importedType=[JvmDeclaredType|QualifiedNameInStaticImport]
	//	(wildcard?='*' | memberName=ValidID) | importedType=[JvmDeclaredType|super::QualifiedName] |
	//	importedNamespace=QualifiedNameWithWildcard) ';'?;
	public XtypeGrammarAccess.XImportDeclarationElements getXImportDeclarationAccess() {
		return gaXtype.getXImportDeclarationAccess();
	}
	
	public ParserRule getXImportDeclarationRule() {
		return getXImportDeclarationAccess().getRule();
	}

	//QualifiedNameInStaticImport:
	//	(ValidID '.')+;
	public XtypeGrammarAccess.QualifiedNameInStaticImportElements getQualifiedNameInStaticImportAccess() {
		return gaXtype.getQualifiedNameInStaticImportAccess();
	}
	
	public ParserRule getQualifiedNameInStaticImportRule() {
		return getQualifiedNameInStaticImportAccess().getRule();
	}

	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '$' | '_') ('a'..'z' | 'A'..'Z' | '$' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaXtype.getIDRule();
	} 

	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"'? |
	//	"'" ('\\' . | !('\\' | "'"))* "'"?;
	public TerminalRule getSTRINGRule() {
		return gaXtype.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaXtype.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXtype.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaXtype.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXtype.getANY_OTHERRule();
	} 
}
