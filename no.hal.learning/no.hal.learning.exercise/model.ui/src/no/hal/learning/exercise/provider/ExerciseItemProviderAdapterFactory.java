/**
 */
package no.hal.learning.exercise.provider;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import no.hal.learning.exercise.ExercisePackage;

import no.hal.learning.exercise.util.ExerciseAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.util.ResourceLocator;

import org.eclipse.emf.edit.domain.EditingDomain;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ChildCreationExtenderManager;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IChildCreationExtender;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ExerciseItemProviderAdapterFactory extends ExerciseAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable, IChildCreationExtender {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This helps manage the child creation extenders.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ChildCreationExtenderManager childCreationExtenderManager = new ChildCreationExtenderManager(ExerciseEditPlugin.INSTANCE, ExercisePackage.eNS_URI);

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ExerciseItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.hal.learning.exercise.Exercise} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExerciseItemProvider exerciseItemProvider;

	/**
	 * This creates an adapter for a {@link no.hal.learning.exercise.Exercise}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExerciseAdapter() {
		if (exerciseItemProvider == null) {
			exerciseItemProvider = new ExerciseItemProvider(this);
		}

		return exerciseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.hal.learning.exercise.ExerciseProposals} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExerciseProposalsItemProvider exerciseProposalsItemProvider;

	/**
	 * This creates an adapter for a {@link no.hal.learning.exercise.ExerciseProposals}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExerciseProposalsAdapter() {
		if (exerciseProposalsItemProvider == null) {
			exerciseProposalsItemProvider = new ExerciseProposalsItemProvider(this);
		}

		return exerciseProposalsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.hal.learning.exercise.ExercisePartProposals} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExercisePartProposalsItemProvider exercisePartProposalsItemProvider;

	/**
	 * This creates an adapter for a {@link no.hal.learning.exercise.ExercisePartProposals}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExercisePartProposalsAdapter() {
		if (exercisePartProposalsItemProvider == null) {
			exercisePartProposalsItemProvider = new ExercisePartProposalsItemProvider(this);
		}

		return exercisePartProposalsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.hal.learning.exercise.ExercisePartRef} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExercisePartRefItemProvider exercisePartRefItemProvider;

	/**
	 * This creates an adapter for a {@link no.hal.learning.exercise.ExercisePartRef}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExercisePartRefAdapter() {
		if (exercisePartRefItemProvider == null) {
			exercisePartRefItemProvider = new ExercisePartRefItemProvider(this);
		}

		return exercisePartRefItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.hal.learning.exercise.ExercisePart} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExercisePartItemProvider exercisePartItemProvider;

	/**
	 * This creates an adapter for a {@link no.hal.learning.exercise.ExercisePart}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExercisePartAdapter() {
		if (exercisePartItemProvider == null) {
			exercisePartItemProvider = new ExercisePartItemProvider(this);
		}

		return exercisePartItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.hal.learning.exercise.TaskRef} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TaskRefItemProvider taskRefItemProvider;

	/**
	 * This creates an adapter for a {@link no.hal.learning.exercise.TaskRef}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTaskRefAdapter() {
		if (taskRefItemProvider == null) {
			taskRefItemProvider = new TaskRefItemProvider(this);
		}

		return taskRefItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.hal.learning.exercise.Task} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TaskItemProvider taskItemProvider;

	/**
	 * This creates an adapter for a {@link no.hal.learning.exercise.Task}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTaskAdapter() {
		if (taskItemProvider == null) {
			taskItemProvider = new TaskItemProvider(this);
		}

		return taskItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.hal.learning.exercise.StringQuestion} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StringQuestionItemProvider stringQuestionItemProvider;

	/**
	 * This creates an adapter for a {@link no.hal.learning.exercise.StringQuestion}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStringQuestionAdapter() {
		if (stringQuestionItemProvider == null) {
			stringQuestionItemProvider = new StringQuestionItemProvider(this);
		}

		return stringQuestionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.hal.learning.exercise.Proposal} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProposalItemProvider proposalItemProvider;

	/**
	 * This creates an adapter for a {@link no.hal.learning.exercise.Proposal}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProposalAdapter() {
		if (proposalItemProvider == null) {
			proposalItemProvider = new ProposalItemProvider(this);
		}

		return proposalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.hal.learning.exercise.TaskAnswer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TaskAnswerItemProvider taskAnswerItemProvider;

	/**
	 * This creates an adapter for a {@link no.hal.learning.exercise.TaskAnswer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTaskAnswerAdapter() {
		if (taskAnswerItemProvider == null) {
			taskAnswerItemProvider = new TaskAnswerItemProvider(this);
		}

		return taskAnswerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.hal.learning.exercise.TaskProposal} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TaskProposalItemProvider taskProposalItemProvider;

	/**
	 * This creates an adapter for a {@link no.hal.learning.exercise.TaskProposal}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTaskProposalAdapter() {
		if (taskProposalItemProvider == null) {
			taskProposalItemProvider = new TaskProposalItemProvider(this);
		}

		return taskProposalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.hal.learning.exercise.TaskEvent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TaskEventItemProvider taskEventItemProvider;

	/**
	 * This creates an adapter for a {@link no.hal.learning.exercise.TaskEvent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTaskEventAdapter() {
		if (taskEventItemProvider == null) {
			taskEventItemProvider = new TaskEventItemProvider(this);
		}

		return taskEventItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.hal.learning.exercise.StringEditTaskProposal} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StringEditTaskProposalItemProvider stringEditTaskProposalItemProvider;

	/**
	 * This creates an adapter for a {@link no.hal.learning.exercise.StringEditTaskProposal}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStringEditTaskProposalAdapter() {
		if (stringEditTaskProposalItemProvider == null) {
			stringEditTaskProposalItemProvider = new StringEditTaskProposalItemProvider(this);
		}

		return stringEditTaskProposalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.hal.learning.exercise.AbstractStringEditEvent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AbstractStringEditEventItemProvider abstractStringEditEventItemProvider;

	/**
	 * This creates an adapter for a {@link no.hal.learning.exercise.AbstractStringEditEvent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAbstractStringEditEventAdapter() {
		if (abstractStringEditEventItemProvider == null) {
			abstractStringEditEventItemProvider = new AbstractStringEditEventItemProvider(this);
		}

		return abstractStringEditEventItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.hal.learning.exercise.StringEdit} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StringEditItemProvider stringEditItemProvider;

	/**
	 * This creates an adapter for a {@link no.hal.learning.exercise.StringEdit}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStringEditAdapter() {
		if (stringEditItemProvider == null) {
			stringEditItemProvider = new StringEditItemProvider(this);
		}

		return stringEditItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link no.hal.learning.exercise.ReplaceSubstringEdit} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReplaceSubstringEditItemProvider replaceSubstringEditItemProvider;

	/**
	 * This creates an adapter for a {@link no.hal.learning.exercise.ReplaceSubstringEdit}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReplaceSubstringEditAdapter() {
		if (replaceSubstringEditItemProvider == null) {
			replaceSubstringEditItemProvider = new ReplaceSubstringEditItemProvider(this);
		}

		return replaceSubstringEditItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public List<IChildCreationExtender> getChildCreationExtenders() {
		return childCreationExtenderManager.getChildCreationExtenders();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Collection<?> getNewChildDescriptors(Object object, EditingDomain editingDomain) {
		return childCreationExtenderManager.getNewChildDescriptors(object, editingDomain);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ResourceLocator getResourceLocator() {
		return childCreationExtenderManager;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (exerciseItemProvider != null) exerciseItemProvider.dispose();
		if (exerciseProposalsItemProvider != null) exerciseProposalsItemProvider.dispose();
		if (exercisePartProposalsItemProvider != null) exercisePartProposalsItemProvider.dispose();
		if (exercisePartRefItemProvider != null) exercisePartRefItemProvider.dispose();
		if (exercisePartItemProvider != null) exercisePartItemProvider.dispose();
		if (taskRefItemProvider != null) taskRefItemProvider.dispose();
		if (taskItemProvider != null) taskItemProvider.dispose();
		if (stringQuestionItemProvider != null) stringQuestionItemProvider.dispose();
		if (proposalItemProvider != null) proposalItemProvider.dispose();
		if (taskAnswerItemProvider != null) taskAnswerItemProvider.dispose();
		if (taskProposalItemProvider != null) taskProposalItemProvider.dispose();
		if (taskEventItemProvider != null) taskEventItemProvider.dispose();
		if (stringEditTaskProposalItemProvider != null) stringEditTaskProposalItemProvider.dispose();
		if (abstractStringEditEventItemProvider != null) abstractStringEditEventItemProvider.dispose();
		if (stringEditItemProvider != null) stringEditItemProvider.dispose();
		if (replaceSubstringEditItemProvider != null) replaceSubstringEditItemProvider.dispose();
	}

}
