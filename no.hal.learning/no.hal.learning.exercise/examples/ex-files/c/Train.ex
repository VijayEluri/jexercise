<?xml version="1.0" encoding="UTF-8"?>
<xmi:XMI xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:exercise="platform:/plugin/no.hal.learning.exercise.model/model/exercise.ecore" xmlns:jdt="platform:/plugin/no.hal.learning.exercise.jdt/model/jdt-exercise.ecore" xmlns:junit="platform:/plugin/no.hal.learning.exercise.junit/model/junit-exercise.ecore" xmlns:workbench="platform:/plugin/no.hal.learning.exercise.workbench/model/workbench-exercise.ecore">
  <exercise:Exercise>
    <parts xsi:type="exercise:ExercisePart" title="Train">
      <tasks xsi:type="exercise:Task">
        <q xsi:type="exercise:StringQuestion" question="Write source code for the TrainCar superclass."/>
        <a xsi:type="jdt:JdtSourceEditAnswer" className="inheritance.TrainCar"/>
      </tasks>
      <tasks xsi:type="exercise:Task">
        <q xsi:type="exercise:StringQuestion" question="Write the source code for the CargoCar class."/>
        <a xsi:type="jdt:JdtSourceEditAnswer" className="inheritance.CargoCar"/>
      </tasks>
      <tasks xsi:type="exercise:Task">
        <q xsi:type="exercise:StringQuestion" question="Write the source code for the PassengerCar class."/>
        <a xsi:type="jdt:JdtSourceEditAnswer" className="inheritance.PassengerCar"/>
      </tasks>
      <tasks xsi:type="exercise:Task">
        <q xsi:type="exercise:StringQuestion" question="Write the source code for the Train class."/>
        <a xsi:type="jdt:JdtSourceEditAnswer" className="inheritance.Train"/>
      </tasks>
      <tasks xsi:type="exercise:Task">
        <q xsi:type="exercise:StringQuestion" question="Run the TrainCarTest JUnit test."/>
        <a xsi:type="junit:JunitTestAnswer" testRunName="inheritance.TrainCarTest"/>
      </tasks>
      <tasks xsi:type="exercise:Task">
        <q xsi:type="exercise:StringQuestion" question="Run the TrainTest JUnit test."/>
        <a xsi:type="junit:JunitTestAnswer" testRunName="inheritance.TrainTest"/>
      </tasks>
    </parts>
    <parts xsi:type="exercise:ExercisePart" title="Tool usage">
      <tasks xsi:type="exercise:Task">
        <q xsi:type="exercise:StringQuestion" question="Use breakpoints to debug code."/>
        <a xsi:type="workbench:DebugEventAnswer" action="suspend.breakpoint"/>
      </tasks>
      <tasks xsi:type="exercise:Task">
        <q xsi:type="exercise:StringQuestion" question="Use the debug command Step Over"/>
        <a xsi:type="workbench:CommandExecutionAnswer" elementId="org.eclipse.debug.ui.commands.StepOver" action="executeSuccess"/>
      </tasks>
      <tasks xsi:type="exercise:Task">
        <q xsi:type="exercise:StringQuestion" question="Use the debug command Step Into"/>
        <a xsi:type="workbench:CommandExecutionAnswer" elementId="org.eclipse.debug.ui.commands.StepInto" action="executeSuccess"/>
      </tasks>
      <tasks xsi:type="exercise:Task">
        <q xsi:type="exercise:StringQuestion" question="Use the Variables view"/>
        <a xsi:type="workbench:PartTaskAnswer" elementId="org.eclipse.debug.ui.VariableView" action="activated"/>
      </tasks>
      <tasks xsi:type="exercise:Task">
        <q xsi:type="exercise:StringQuestion" question="Run the TrainCar class."/>
        <a xsi:type="jdt:JdtLaunchAnswer" className="inheritance.TrainCar"/>
      </tasks>
      <tasks xsi:type="exercise:Task">
        <q xsi:type="exercise:StringQuestion" question="Run the CargoCar class."/>
        <a xsi:type="jdt:JdtLaunchAnswer" className="inheritance.CargoCar"/>
      </tasks>
      <tasks xsi:type="exercise:Task">
        <q xsi:type="exercise:StringQuestion" question="Run the PassengerCar class."/>
        <a xsi:type="jdt:JdtLaunchAnswer" className="inheritance.PassengerCar"/>
      </tasks>
      <tasks xsi:type="exercise:Task">
        <q xsi:type="exercise:StringQuestion" question="Run the Train class."/>
        <a xsi:type="jdt:JdtLaunchAnswer" className="inheritance.Train"/>
      </tasks>
    </parts>
  </exercise:Exercise>
  <exercise:ExerciseProposals exercise="/0">
    <proposals exercisePart="/0/@parts.0">
      <proposals xsi:type="jdt:JdtSourceEditProposal" question="/0/@parts.0/@tasks.0/@q" answer="/0/@parts.0/@tasks.0/@a">
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1458214701071" sizeMeasure="52">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class TrainCar {&#xA;&#xA;&#x9;private int deadWeight;&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * Constructor instantiates a TrainCar object.&#xA;&#x9; * @param deadWeight is the dead weight of the train car.&#xA;&#x9; */&#xA;&#x9;public TrainCar(int deadWeight) {&#xA;&#x9;&#x9;isValidDeadWeight(deadWeight);&#xA;&#x9;&#x9;this.deadWeight = deadWeight;&#xA;&#x9;}&#xA;&#xA;&#x9;/**&#xA;&#x9; * Checks whether the argument is a valid weight.&#xA;&#x9; * @param deadWeight is the argument checked.&#xA;&#x9; */&#xA;&#x9;private void isValidDeadWeight(int deadWeight) {&#xA;&#x9;&#x9;if (deadWeight &lt;= 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;ERROR! The cargo weight cannot &quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;+ &quot;be 0 or less.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * Method computes the total weight of the train car.&#xA;&#x9; * @return the integer representation of the total weight.&#xA;&#x9; */&#xA;&#x9;&#xA;&#x9;protected int getTotalWeight() {&#xA;&#x9;&#x9;return getDeadWeight();&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * Sets a new dead weight for the train car.&#xA;&#x9; * @param deadWeight is checked and, if valid, set as new dead weight. &#xA;&#x9; */&#xA;&#x9;public void setDeadWeight(int deadWeight) {&#xA;&#x9;&#x9;isValidDeadWeight(deadWeight);&#xA;&#x9;&#x9;this.deadWeight = deadWeight;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * Returns the dead weight of the train car.&#xA;&#x9; * @return the dead weight of the train car.&#xA;&#x9; */&#xA;&#x9;public int getDeadWeight() {&#xA;&#x9;&#x9;return this.deadWeight;&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1458215034039" sizeMeasure="52">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class TrainCar {&#xA;&#xA;&#x9;private int deadWeight;&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * Constructor instantiates a TrainCar object.&#xA;&#x9; * @param deadWeight is the dead weight of the train car.&#xA;&#x9; */&#xA;&#x9;public TrainCar(int deadWeight) {&#xA;&#x9;&#x9;isValidDeadWeight(deadWeight);&#xA;&#x9;&#x9;this.deadWeight = deadWeight;&#xA;&#x9;}&#xA;&#xA;&#x9;/**&#xA;&#x9; * Checks whether the argument is a valid weight.&#xA;&#x9; * @param deadWeight&#xA;&#x9; */&#xA;&#x9;private void isValidDeadWeight(int deadWeight) {&#xA;&#x9;&#x9;if (deadWeight &lt;= 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;ERROR! The deadweight cannot &quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;+ &quot;be 0 or less.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * Method computes the total weight of the train car.&#xA;&#x9; * @return the integer representation of the total weight.&#xA;&#x9; */&#xA;&#x9;&#xA;&#x9;protected int getTotalWeight() {&#xA;&#x9;&#x9;return getDeadWeight();&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * Sets a new dead weight for the train car.&#xA;&#x9; * @param deadWeight is checked and, if valid, set as new dead weight. &#xA;&#x9; */&#xA;&#x9;public void setDeadWeight(int deadWeight) {&#xA;&#x9;&#x9;isValidDeadWeight(deadWeight);&#xA;&#x9;&#x9;this.deadWeight = deadWeight;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * Returns the dead weight of the train car.&#xA;&#x9; * @return the dead weight of the train car.&#xA;&#x9; */&#xA;&#x9;public int getDeadWeight() {&#xA;&#x9;&#x9;return this.deadWeight;&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1458215233308" sizeMeasure="52">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class TrainCar {&#xA;&#xA;&#x9;private int deadWeight;&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * Constructor instantiates a TrainCar object.&#xA;&#x9; * @param deadWeight is the dead weight of the train car.&#xA;&#x9; */&#xA;&#x9;public TrainCar(int deadWeight) {&#xA;&#x9;&#x9;isValidDeadWeight(deadWeight);&#xA;&#x9;&#x9;this.deadWeight = deadWeight;&#xA;&#x9;}&#xA;&#xA;&#x9;/**&#xA;&#x9; * Checks whether the argument is a valid weight.&#xA;&#x9; * @param deadWeight is the proposed new dead weight.&#xA;&#x9; */&#xA;&#x9;private void isValidDeadWeight(int deadWeight) {&#xA;&#x9;&#x9;if (deadWeight &lt;= 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;ERROR! The deadweight cannot &quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;+ &quot;be 0 or less.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * Method computes the total weight of the train car.&#xA;&#x9; * @return the integer representation of the total weight.&#xA;&#x9; */&#xA;&#x9;&#xA;&#x9;protected int getTotalWeight() {&#xA;&#x9;&#x9;return getDeadWeight();&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * Sets a new dead weight for the train car.&#xA;&#x9; * @param deadWeight is checked and, if valid, set as new dead weight. &#xA;&#x9; */&#xA;&#x9;public void setDeadWeight(int deadWeight) {&#xA;&#x9;&#x9;isValidDeadWeight(deadWeight);&#xA;&#x9;&#x9;this.deadWeight = deadWeight;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * Returns the dead weight of the train car.&#xA;&#x9; * @return the dead weight of the train car.&#xA;&#x9; */&#xA;&#x9;public int getDeadWeight() {&#xA;&#x9;&#x9;return this.deadWeight;&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1458216983472" sizeMeasure="58">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class TrainCar {&#xA;&#xA;&#x9;private int deadWeight;&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * Constructor instantiates a TrainCar object.&#xA;&#x9; * @param deadWeight is the dead weight of the train car.&#xA;&#x9; */&#xA;&#x9;public TrainCar(int deadWeight) {&#xA;&#x9;&#x9;isValidDeadWeight(deadWeight);&#xA;&#x9;&#x9;this.deadWeight = deadWeight;&#xA;&#x9;}&#xA;&#xA;&#x9;/**&#xA;&#x9; * Checks whether the argument is a valid weight.&#xA;&#x9; * @param deadWeight is the proposed new dead weight.&#xA;&#x9; */&#xA;&#x9;private void isValidDeadWeight(int deadWeight) {&#xA;&#x9;&#x9;if (deadWeight &lt;= 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;ERROR! The deadweight cannot &quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;+ &quot;be 0 or less.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * Method computes the total weight of the train car.&#xA;&#x9; * @return the integer representation of the total weight.&#xA;&#x9; */&#xA;&#x9;&#xA;&#x9;protected int getTotalWeight() {&#xA;&#x9;&#x9;return getDeadWeight();&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * Sets a new dead weight for the train car.&#xA;&#x9; * @param deadWeight is checked and, if valid, set as new dead weight. &#xA;&#x9; */&#xA;&#x9;public void setDeadWeight(int deadWeight) {&#xA;&#x9;&#x9;isValidDeadWeight(deadWeight);&#xA;&#x9;&#x9;this.deadWeight = deadWeight;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * Returns the dead weight of the train car.&#xA;&#x9; * @return the dead weight of the train car.&#xA;&#x9; */&#xA;&#x9;public int getDeadWeight() {&#xA;&#x9;&#x9;return this.deadWeight;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public String toString() {&#xA;&#x9;&#x9;return &quot;Type of car train: &quot;  + this.getClass() +&#xA;&#x9;&#x9;&quot;\nTotal Weight: &quot; + this.getTotalWeight();&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1458217018779" sizeMeasure="58">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class TrainCar {&#xA;&#xA;&#x9;private int deadWeight;&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * Constructor instantiates a TrainCar object.&#xA;&#x9; * @param deadWeight is the dead weight of the train car.&#xA;&#x9; */&#xA;&#x9;public TrainCar(int deadWeight) {&#xA;&#x9;&#x9;isValidDeadWeight(deadWeight);&#xA;&#x9;&#x9;this.deadWeight = deadWeight;&#xA;&#x9;}&#xA;&#xA;&#x9;/**&#xA;&#x9; * Checks whether the argument is a valid weight.&#xA;&#x9; * @param deadWeight is the proposed new dead weight.&#xA;&#x9; */&#xA;&#x9;private void isValidDeadWeight(int deadWeight) {&#xA;&#x9;&#x9;if (deadWeight &lt;= 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;ERROR! The deadweight cannot &quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;+ &quot;be 0 or less.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * Method computes the total weight of the train car.&#xA;&#x9; * @return the integer representation of the total weight.&#xA;&#x9; */&#xA;&#x9;&#xA;&#x9;protected int getTotalWeight() {&#xA;&#x9;&#x9;return getDeadWeight();&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * Sets a new dead weight for the train car.&#xA;&#x9; * @param deadWeight is checked and, if valid, set as new dead weight. &#xA;&#x9; */&#xA;&#x9;public void setDeadWeight(int deadWeight) {&#xA;&#x9;&#x9;isValidDeadWeight(deadWeight);&#xA;&#x9;&#x9;this.deadWeight = deadWeight;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * Returns the dead weight of the train car.&#xA;&#x9; * @return the dead weight of the train car.&#xA;&#x9; */&#xA;&#x9;public int getDeadWeight() {&#xA;&#x9;&#x9;return this.deadWeight;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public String toString() {&#xA;&#x9;&#x9;return &quot;[Type of car train: &quot;  + this.getClass() +&#xA;&#x9;&#x9;&quot;\nTotal Weight: &quot; + this.getTotalWeight() + &quot;]&quot;;&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
      </proposals>
      <proposals xsi:type="jdt:JdtSourceEditProposal" question="/0/@parts.0/@tasks.1/@q" answer="/0/@parts.0/@tasks.1/@a">
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1458213829503" sizeMeasure="5" errorCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class CargoCar extends TrainCar {&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1458214059815" sizeMeasure="24" errorCount="3">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class CargoCar extends TrainCar {&#xA;&#xA;&#x9;private int cargoWeight;&#xA;&#x9;&#xA;&#x9;public CargoWeight(int deadWeight, int cargoWeight) {&#xA;&#x9;&#x9;super(deadWeight);&#xA;&#x9;&#x9;isValidCargoWeight(cargoWeight);&#xA;&#x9;&#x9;this.cargoWeight = cargoWeight;&#xA;&#x9;}&#xA;&#xA;&#x9;/**&#xA;&#x9; * Checks whether the argument is a valid cargo weight.&#xA;&#x9; * @param cargoWeight is the argument checked.&#xA;&#x9; */&#xA;&#x9;private void isValidCargoWeight(int cargoWeight) {&#xA;&#x9;&#x9;if (cargoWeight &lt;= 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;ERROR! The deadweight cannot &quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;+ &quot;be 0 or less.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1458214237928" sizeMeasure="37" warningCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class CargoCar extends TrainCar {&#xA;&#xA;&#x9;private int cargoWeight;&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * Constructor for a CargoCar object&#xA;&#x9; * @param deadWeight is the dead weight of the cargo car.&#xA;&#x9; * @param cargoWeight is the cargo weight of the cargo car.&#xA;&#x9; */&#xA;&#x9;public CargoCar(int deadWeight, int cargoWeight) {&#xA;&#x9;&#x9;super(deadWeight);&#xA;&#x9;&#x9;isValidCargoWeight(cargoWeight);&#xA;&#x9;&#x9;this.cargoWeight = cargoWeight;&#xA;&#x9;}&#xA;&#xA;&#x9;/**&#xA;&#x9; * Checks whether the argument is a valid cargo weight.&#xA;&#x9; * @param cargoWeight is the argument checked.&#xA;&#x9; */&#xA;&#x9;private void isValidCargoWeight(int cargoWeight) {&#xA;&#x9;&#x9;if (cargoWeight &lt;= 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;ERROR! The deadweight cannot &quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;+ &quot;be 0 or less.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * Sets a new cargo weight for the cargo train.&#xA;&#x9; * @param cargoWeight the proposed new cargo weight (is checked).&#xA;&#x9; */&#xA;&#x9;public void setCargoWeight(int cargoWeight) {&#xA;&#x9;&#x9;isValidCargoWeight(cargoWeight);&#xA;&#x9;&#x9;this.cargoWeight = cargoWeight;&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1458214248218" sizeMeasure="37" warningCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class CargoCar extends TrainCar {&#xA;&#xA;&#x9;private int cargoWeight;&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * Constructor for a CargoCar object&#xA;&#x9; * @param deadWeight is the dead weight of the cargo car.&#xA;&#x9; * @param cargoWeight is the cargo weight of the cargo car.&#xA;&#x9; */&#xA;&#x9;public CargoCar(int deadWeight, int cargoWeight) {&#xA;&#x9;&#x9;super(deadWeight);&#xA;&#x9;&#x9;isValidCargoWeight(cargoWeight);&#xA;&#x9;&#x9;this.cargoWeight = cargoWeight;&#xA;&#x9;}&#xA;&#xA;&#x9;/**&#xA;&#x9; * Checks whether the argument is a valid cargo weight.&#xA;&#x9; * @param cargoWeight is the argument checked.&#xA;&#x9; */&#xA;&#x9;private void isValidCargoWeight(int cargoWeight) {&#xA;&#x9;&#x9;if (cargoWeight &lt;= 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;ERROR! The deadweight cannot &quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;+ &quot;be 0 or less.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * Sets a new cargo weight for the cargo train.&#xA;&#x9; * @param cargoWeight the proposed new cargo weight.&#xA;&#x9; */&#xA;&#x9;public void setCargoWeight(int cargoWeight) {&#xA;&#x9;&#x9;isValidCargoWeight(cargoWeight);&#xA;&#x9;&#x9;this.cargoWeight = cargoWeight;&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1458214300564" sizeMeasure="45">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class CargoCar extends TrainCar {&#xA;&#xA;&#x9;private int cargoWeight;&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * Constructor for a CargoCar object&#xA;&#x9; * @param deadWeight is the dead weight of the cargo car.&#xA;&#x9; * @param cargoWeight is the cargo weight of the cargo car.&#xA;&#x9; */&#xA;&#x9;public CargoCar(int deadWeight, int cargoWeight) {&#xA;&#x9;&#x9;super(deadWeight);&#xA;&#x9;&#x9;isValidCargoWeight(cargoWeight);&#xA;&#x9;&#x9;this.cargoWeight = cargoWeight;&#xA;&#x9;}&#xA;&#xA;&#x9;/**&#xA;&#x9; * Checks whether the argument is a valid cargo weight.&#xA;&#x9; * @param cargoWeight is the argument checked.&#xA;&#x9; */&#xA;&#x9;private void isValidCargoWeight(int cargoWeight) {&#xA;&#x9;&#x9;if (cargoWeight &lt;= 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;ERROR! The deadweight cannot &quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;+ &quot;be 0 or less.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * Sets a new cargo weight for the cargo train.&#xA;&#x9; * @param cargoWeight the proposed new cargo weight.&#xA;&#x9; */&#xA;&#x9;public void setCargoWeight(int cargoWeight) {&#xA;&#x9;&#x9;isValidCargoWeight(cargoWeight);&#xA;&#x9;&#x9;this.cargoWeight = cargoWeight;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * Returns the cargo weight of the cargo train.&#xA;&#x9; * @return the current cargo weight.&#xA;&#x9; */&#xA;&#x9;public int getCargoWeight() {&#xA;&#x9;&#x9;return this.cargoWeight;&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1458214376693" sizeMeasure="50">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class CargoCar extends TrainCar {&#xA;&#xA;&#x9;private int cargoWeight;&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * Constructor for a CargoCar object&#xA;&#x9; * @param deadWeight is the dead weight of the cargo car.&#xA;&#x9; * @param cargoWeight is the cargo weight of the cargo car.&#xA;&#x9; */&#xA;&#x9;public CargoCar(int deadWeight, int cargoWeight) {&#xA;&#x9;&#x9;super(deadWeight);&#xA;&#x9;&#x9;isValidCargoWeight(cargoWeight);&#xA;&#x9;&#x9;this.cargoWeight = cargoWeight;&#xA;&#x9;}&#xA;&#xA;&#x9;/**&#xA;&#x9; * Checks whether the argument is a valid cargo weight.&#xA;&#x9; * @param cargoWeight is the argument checked.&#xA;&#x9; */&#xA;&#x9;private void isValidCargoWeight(int cargoWeight) {&#xA;&#x9;&#x9;if (cargoWeight &lt;= 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;ERROR! The deadweight cannot &quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;+ &quot;be 0 or less.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;protected int getTotalWeight() {&#xA;&#x9;&#x9;return super.getTotalWeight() + getCargoWeight();&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * Sets a new cargo weight for the cargo train.&#xA;&#x9; * @param cargoWeight the proposed new cargo weight.&#xA;&#x9; */&#xA;&#x9;public void setCargoWeight(int cargoWeight) {&#xA;&#x9;&#x9;isValidCargoWeight(cargoWeight);&#xA;&#x9;&#x9;this.cargoWeight = cargoWeight;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * Returns the cargo weight of the cargo train.&#xA;&#x9; * @return the current cargo weight.&#xA;&#x9; */&#xA;&#x9;public int getCargoWeight() {&#xA;&#x9;&#x9;return this.cargoWeight;&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1458214434699" sizeMeasure="53">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class CargoCar extends TrainCar {&#xA;&#xA;&#x9;private int cargoWeight;&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * Constructor for a CargoCar object&#xA;&#x9; * @param deadWeight is the dead weight of the cargo car.&#xA;&#x9; * @param cargoWeight is the cargo weight of the cargo car.&#xA;&#x9; */&#xA;&#x9;public CargoCar(int deadWeight, int cargoWeight) {&#xA;&#x9;&#x9;super(deadWeight);&#xA;&#x9;&#x9;isValidCargoWeight(cargoWeight);&#xA;&#x9;&#x9;this.cargoWeight = cargoWeight;&#xA;&#x9;}&#xA;&#xA;&#x9;/**&#xA;&#x9; * Checks whether the argument is a valid cargo weight.&#xA;&#x9; * @param cargoWeight is the argument checked.&#xA;&#x9; */&#xA;&#x9;private void isValidCargoWeight(int cargoWeight) {&#xA;&#x9;&#x9;if (cargoWeight &lt;= 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;ERROR! The deadweight cannot &quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;+ &quot;be 0 or less.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; *Returns the total weight. &#xA;&#x9; */&#xA;&#x9;@Override&#xA;&#x9;protected int getTotalWeight() {&#xA;&#x9;&#x9;return super.getDeadWeight() + getCargoWeight();&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * Sets a new cargo weight for the cargo train.&#xA;&#x9; * @param cargoWeight the proposed new cargo weight.&#xA;&#x9; */&#xA;&#x9;public void setCargoWeight(int cargoWeight) {&#xA;&#x9;&#x9;isValidCargoWeight(cargoWeight);&#xA;&#x9;&#x9;this.cargoWeight = cargoWeight;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * Returns the cargo weight of the cargo train.&#xA;&#x9; * @return the current cargo weight.&#xA;&#x9; */&#xA;&#x9;public int getCargoWeight() {&#xA;&#x9;&#x9;return this.cargoWeight;&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1458214464136" sizeMeasure="54">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class CargoCar extends TrainCar {&#xA;&#xA;&#x9;private int cargoWeight;&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * Constructor for a CargoCar object&#xA;&#x9; * @param deadWeight is the dead weight of the cargo car.&#xA;&#x9; * @param cargoWeight is the cargo weight of the cargo car.&#xA;&#x9; */&#xA;&#x9;public CargoCar(int deadWeight, int cargoWeight) {&#xA;&#x9;&#x9;super(deadWeight);&#xA;&#x9;&#x9;isValidCargoWeight(cargoWeight);&#xA;&#x9;&#x9;this.cargoWeight = cargoWeight;&#xA;&#x9;}&#xA;&#xA;&#x9;/**&#xA;&#x9; * Checks whether the argument is a valid cargo weight.&#xA;&#x9; * @param cargoWeight is the argument checked.&#xA;&#x9; */&#xA;&#x9;private void isValidCargoWeight(int cargoWeight) {&#xA;&#x9;&#x9;if (cargoWeight &lt;= 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;ERROR! The deadweight cannot &quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;+ &quot;be 0 or less.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; *Returns the total weight of the cargo train.&#xA;&#x9; *@return the integer representation of the total weight.&#xA;&#x9; */&#xA;&#x9;@Override&#xA;&#x9;protected int getTotalWeight() {&#xA;&#x9;&#x9;return super.getDeadWeight() + getCargoWeight();&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * Sets a new cargo weight for the cargo train.&#xA;&#x9; * @param cargoWeight the proposed new cargo weight.&#xA;&#x9; */&#xA;&#x9;public void setCargoWeight(int cargoWeight) {&#xA;&#x9;&#x9;isValidCargoWeight(cargoWeight);&#xA;&#x9;&#x9;this.cargoWeight = cargoWeight;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * Returns the cargo weight of the cargo train.&#xA;&#x9; * @return the current cargo weight.&#xA;&#x9; */&#xA;&#x9;public int getCargoWeight() {&#xA;&#x9;&#x9;return this.cargoWeight;&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1458214736560" sizeMeasure="54">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class CargoCar extends TrainCar {&#xA;&#xA;&#x9;private int cargoWeight;&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * Constructor for a CargoCar object&#xA;&#x9; * @param deadWeight is the dead weight of the cargo car.&#xA;&#x9; * @param cargoWeight is the cargo weight of the cargo car.&#xA;&#x9; */&#xA;&#x9;public CargoCar(int deadWeight, int cargoWeight) {&#xA;&#x9;&#x9;super(deadWeight);&#xA;&#x9;&#x9;isValidCargoWeight(cargoWeight);&#xA;&#x9;&#x9;this.cargoWeight = cargoWeight;&#xA;&#x9;}&#xA;&#xA;&#x9;/**&#xA;&#x9; * Checks whether the argument is a valid cargo weight.&#xA;&#x9; * @param cargoWeight is the argument checked.&#xA;&#x9; */&#xA;&#x9;private void isValidCargoWeight(int cargoWeight) {&#xA;&#x9;&#x9;if (cargoWeight &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;ERROR! The cargo weight cannot &quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;+ &quot;be less than 0.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; *Returns the total weight of the cargo train.&#xA;&#x9; *@return the integer representation of the total weight.&#xA;&#x9; */&#xA;&#x9;@Override&#xA;&#x9;protected int getTotalWeight() {&#xA;&#x9;&#x9;return super.getDeadWeight() + getCargoWeight();&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * Sets a new cargo weight for the cargo train.&#xA;&#x9; * @param cargoWeight the proposed new cargo weight.&#xA;&#x9; */&#xA;&#x9;public void setCargoWeight(int cargoWeight) {&#xA;&#x9;&#x9;isValidCargoWeight(cargoWeight);&#xA;&#x9;&#x9;this.cargoWeight = cargoWeight;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * Returns the cargo weight of the cargo train.&#xA;&#x9; * @return the current cargo weight.&#xA;&#x9; */&#xA;&#x9;public int getCargoWeight() {&#xA;&#x9;&#x9;return this.cargoWeight;&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1458217204549" sizeMeasure="61">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class CargoCar extends TrainCar {&#xA;&#xA;&#x9;private int cargoWeight;&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * Constructor for a CargoCar object&#xA;&#x9; * @param deadWeight is the dead weight of the cargo car.&#xA;&#x9; * @param cargoWeight is the cargo weight of the cargo car.&#xA;&#x9; */&#xA;&#x9;public CargoCar(int deadWeight, int cargoWeight) {&#xA;&#x9;&#x9;super(deadWeight);&#xA;&#x9;&#x9;isValidCargoWeight(cargoWeight);&#xA;&#x9;&#x9;this.cargoWeight = cargoWeight;&#xA;&#x9;}&#xA;&#xA;&#x9;/**&#xA;&#x9; * Checks whether the argument is a valid cargo weight.&#xA;&#x9; * @param cargoWeight is the argument checked.&#xA;&#x9; */&#xA;&#x9;private void isValidCargoWeight(int cargoWeight) {&#xA;&#x9;&#x9;if (cargoWeight &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;ERROR! The cargo weight cannot &quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;+ &quot;be less than 0.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; *Returns the total weight of the cargo train.&#xA;&#x9; *@return the integer representation of the total weight.&#xA;&#x9; */&#xA;&#x9;@Override&#xA;&#x9;protected int getTotalWeight() {&#xA;&#x9;&#x9;return super.getDeadWeight() + getCargoWeight();&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * Sets a new cargo weight for the cargo train.&#xA;&#x9; * @param cargoWeight the proposed new cargo weight.&#xA;&#x9; */&#xA;&#x9;public void setCargoWeight(int cargoWeight) {&#xA;&#x9;&#x9;isValidCargoWeight(cargoWeight);&#xA;&#x9;&#x9;this.cargoWeight = cargoWeight;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * Returns the cargo weight of the cargo train.&#xA;&#x9; * @return the current cargo weight.&#xA;&#x9; */&#xA;&#x9;public int getCargoWeight() {&#xA;&#x9;&#x9;return this.cargoWeight;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public String toString() {&#xA;&#x9;&#x9;String superString = super.toString();&#xA;&#x9;&#x9;String returnString = superString.substring(0,superString.length()-1);&#xA;&#x9;&#x9;return returnString + &quot;\nCargo Weight: &quot; + this.getCargoWeight() + &quot;]&quot;;&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
      </proposals>
      <proposals xsi:type="jdt:JdtSourceEditProposal" question="/0/@parts.0/@tasks.2/@q" answer="/0/@parts.0/@tasks.2/@a">
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1458214514640" sizeMeasure="5" errorCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class PassengerCar extends TrainCar {&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1458214757744" sizeMeasure="23" warningCount="2">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class PassengerCar extends TrainCar {&#xA;&#xA;&#x9;private int passengerCount;&#xA;&#x9;&#xA;&#x9;public PassengerCar(int deadWeight, int passengerCount) {&#xA;&#x9;&#x9;super(deadWeight);&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * Checks whether the argument is a valid passenger count.&#xA;&#x9; * @param passengercount is the argument checked.&#xA;&#x9; */&#xA;&#x9;private void isValidPassengerCount(int passengerCount) {&#xA;&#x9;&#x9;if (passengerCount &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;ERROR! The passenger count &quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;+ &quot;cannot be less than 0.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1458214779694" sizeMeasure="24" warningCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class PassengerCar extends TrainCar {&#xA;&#xA;&#x9;private int passengerCount;&#xA;&#x9;&#xA;&#x9;public PassengerCar(int deadWeight, int passengerCount) {&#xA;&#x9;&#x9;super(deadWeight);&#xA;&#x9;&#x9;isValidPassengerCount(passengerCount);&#xA;&#x9;&#x9;this.passengerCount = passengerCount;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * Checks whether the argument is a valid passenger count.&#xA;&#x9; * @param passengercount is the argument checked.&#xA;&#x9; */&#xA;&#x9;private void isValidPassengerCount(int passengerCount) {&#xA;&#x9;&#x9;if (passengerCount &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;ERROR! The passenger count &quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;+ &quot;cannot be less than 0.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1458214820405" sizeMeasure="29" warningCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class PassengerCar extends TrainCar {&#xA;&#xA;&#x9;private int passengerCount;&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * Constructor for a PassengerCar object.&#xA;&#x9; * @param deadWeight is the dead weight of the passenger car.&#xA;&#x9; * @param passengerCount is the number of people in the passenger car.&#xA;&#x9; */&#xA;&#x9;public PassengerCar(int deadWeight, int passengerCount) {&#xA;&#x9;&#x9;super(deadWeight);&#xA;&#x9;&#x9;isValidPassengerCount(passengerCount);&#xA;&#x9;&#x9;this.passengerCount = passengerCount;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * Checks whether the argument is a valid passenger count.&#xA;&#x9; * @param passengercount is the argument checked.&#xA;&#x9; */&#xA;&#x9;private void isValidPassengerCount(int passengerCount) {&#xA;&#x9;&#x9;if (passengerCount &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;ERROR! The passenger count &quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;+ &quot;cannot be less than 0.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1458214844751" sizeMeasure="29" warningCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class PassengerCar extends TrainCar {&#xA;&#xA;&#x9;private int passengerCount;&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * Constructor for a PassengerCar object.&#xA;&#x9; * @param deadWeight is the dead weight of the passenger car.&#xA;&#x9; * @param passengerCount is the number of people in the passenger car.&#xA;&#x9; */&#xA;&#x9;public PassengerCar(int deadWeight, int passengerCount) {&#xA;&#x9;&#x9;super(deadWeight);&#xA;&#x9;&#x9;isValidPassengerCount(passengerCount);&#xA;&#x9;&#x9;this.passengerCount = passengerCount;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * Checks whether the argument is a valid passenger count.&#xA;&#x9; * @param passengerCount is the argument checked.&#xA;&#x9; */&#xA;&#x9;private void isValidPassengerCount(int passengerCount) {&#xA;&#x9;&#x9;if (passengerCount &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;ERROR! The passenger count &quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;+ &quot;cannot be less than 0.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1458214935490" sizeMeasure="55" errorCount="2" warningCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class PassengerCar extends TrainCar {&#xA;&#xA;&#x9;private int passengerCount;&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * Constructor for a PassengerCar object.&#xA;&#x9; * @param deadWeight is the dead weight of the passenger car.&#xA;&#x9; * @param passengerCount is the number of people in the passenger car.&#xA;&#x9; */&#xA;&#x9;public PassengerCar(int deadWeight, int passengerCount) {&#xA;&#x9;&#x9;super(deadWeight);&#xA;&#x9;&#x9;isValidPassengerCount(passengerCount);&#xA;&#x9;&#x9;this.passengerCount = passengerCount;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * Checks whether the argument is a valid passenger count.&#xA;&#x9; * @param passengerCount is the argument checked.&#xA;&#x9; */&#xA;&#x9;private void isValidPassengerCount(int passengerCount) {&#xA;&#x9;&#x9;if (passengerCount &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;ERROR! The passenger count &quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;+ &quot;cannot be less than 0.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; *Returns the total weight of the cargo train.&#xA;&#x9; *@return the integer representation of the total weight.&#xA;&#x9; */&#xA;&#x9;@Override&#xA;&#x9;protected int getTotalWeight() {&#xA;&#x9;&#x9;return super.getDeadWeight() + getPassengerCount();&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * Sets a new passenger count for the passenger train.&#xA;&#x9; * @param passengerCount is the proposed new passenger count.&#xA;&#x9; */&#xA;&#x9;public void setCargoWeight(int passengerCount) {&#xA;&#x9;&#x9;isValidPassengerCount(passengerCount);&#xA;&#x9;&#x9;this.passengerCount= passengerCount;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * Returns the cargo weight of the cargo train.&#xA;&#x9; * @return the current cargo weight.&#xA;&#x9; */&#xA;&#x9;public int getCargoWeight() {&#xA;&#x9;&#x9;return this.cargoWeight;&#xA;&#x9;}&#xA;&#x9;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1458214977936" sizeMeasure="55">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class PassengerCar extends TrainCar {&#xA;&#xA;&#x9;private int passengerCount;&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * Constructor for a PassengerCar object.&#xA;&#x9; * @param deadWeight is the dead weight of the passenger car.&#xA;&#x9; * @param passengerCount is the number of people in the passenger car.&#xA;&#x9; */&#xA;&#x9;public PassengerCar(int deadWeight, int passengerCount) {&#xA;&#x9;&#x9;super(deadWeight);&#xA;&#x9;&#x9;isValidPassengerCount(passengerCount);&#xA;&#x9;&#x9;this.passengerCount = passengerCount;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * Checks whether the argument is a valid passenger count.&#xA;&#x9; * @param passengerCount is the argument checked.&#xA;&#x9; */&#xA;&#x9;private void isValidPassengerCount(int passengerCount) {&#xA;&#x9;&#x9;if (passengerCount &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;ERROR! The passenger count &quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;+ &quot;cannot be less than 0.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; *Returns the total weight of the cargo train.&#xA;&#x9; *@return the integer representation of the total weight.&#xA;&#x9; */&#xA;&#x9;@Override&#xA;&#x9;protected int getTotalWeight() {&#xA;&#x9;&#x9;return super.getDeadWeight() + getPassengerCount();&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * Sets a new passenger count for the passenger train.&#xA;&#x9; * @param passengerCount is the proposed new passenger count.&#xA;&#x9; */&#xA;&#x9;public void setPassengerCount(int passengerCount) {&#xA;&#x9;&#x9;isValidPassengerCount(passengerCount);&#xA;&#x9;&#x9;this.passengerCount= passengerCount;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * Returns the passenger count of the passenger train.&#xA;&#x9; * @return the current passenger count.&#xA;&#x9; */&#xA;&#x9;public int getPassengerCount() {&#xA;&#x9;&#x9;return this.passengerCount;&#xA;&#x9;}&#xA;&#x9;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1458215016835" sizeMeasure="56">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class PassengerCar extends TrainCar {&#xA;&#xA;&#x9;private int passengerCount;&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * Constructor for a PassengerCar object.&#xA;&#x9; * @param deadWeight is the dead weight of the passenger car.&#xA;&#x9; * @param passengerCount is the number of people in the passenger car.&#xA;&#x9; */&#xA;&#x9;public PassengerCar(int deadWeight, int passengerCount) {&#xA;&#x9;&#x9;super(deadWeight);&#xA;&#x9;&#x9;isValidPassengerCount(passengerCount);&#xA;&#x9;&#x9;this.passengerCount = passengerCount;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * Checks whether the argument is a valid passenger count.&#xA;&#x9; * @param passengerCount is the argument checked.&#xA;&#x9; */&#xA;&#x9;private void isValidPassengerCount(int passengerCount) {&#xA;&#x9;&#x9;if (passengerCount &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;ERROR! The passenger count &quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;+ &quot;cannot be less than 0.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; *Returns the total weight of the cargo train. We assume that&#xA;&#x9; *the average weight of a passenger is 80 KG.&#xA;&#x9; *@return the integer representation of the total weight.&#xA;&#x9; */&#xA;&#x9;@Override&#xA;&#x9;protected int getTotalWeight() {&#xA;&#x9;&#x9;return super.getDeadWeight() + getPassengerCount()*80;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * Sets a new passenger count for the passenger train.&#xA;&#x9; * @param passengerCount is the proposed new passenger count.&#xA;&#x9; */&#xA;&#x9;public void setPassengerCount(int passengerCount) {&#xA;&#x9;&#x9;isValidPassengerCount(passengerCount);&#xA;&#x9;&#x9;this.passengerCount= passengerCount;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * Returns the passenger count of the passenger train.&#xA;&#x9; * @return the current passenger count.&#xA;&#x9; */&#xA;&#x9;public int getPassengerCount() {&#xA;&#x9;&#x9;return this.passengerCount;&#xA;&#x9;}&#xA;&#x9;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1458215333537" sizeMeasure="56">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class PassengerCar extends TrainCar {&#xA;&#xA;&#x9;private int passengerCount;&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * Constructor for a PassengerCar object.&#xA;&#x9; * @param deadWeight is the dead weight of the passenger car.&#xA;&#x9; * @param passengerCount is the number of people in the passenger car.&#xA;&#x9; */&#xA;&#x9;public PassengerCar(int deadWeight, int passengerCount) {&#xA;&#x9;&#x9;super(deadWeight);&#xA;&#x9;&#x9;isValidPassengerCount(passengerCount);&#xA;&#x9;&#x9;this.passengerCount = passengerCount;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * Checks whether the argument is a valid passenger count.&#xA;&#x9; * @param passengerCount is the argument checked.&#xA;&#x9; */&#xA;&#x9;private void isValidPassengerCount(int passengerCount) {&#xA;&#x9;&#x9;if (passengerCount &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;ERROR! The passenger count &quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;+ &quot;cannot be less than 0.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; *Returns the total weight of the cargo train. We assume&#xA;&#x9; *the average weight of a passenger is 80 KG.&#xA;&#x9; *@return the integer representation of the total weight.&#xA;&#x9; */&#xA;&#x9;@Override&#xA;&#x9;protected int getTotalWeight() {&#xA;&#x9;&#x9;return super.getDeadWeight() + getPassengerCount()*80;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * Sets a new passenger count for the passenger train.&#xA;&#x9; * @param passengerCount is the proposed new passenger count.&#xA;&#x9; */&#xA;&#x9;public void setPassengerCount(int passengerCount) {&#xA;&#x9;&#x9;isValidPassengerCount(passengerCount);&#xA;&#x9;&#x9;this.passengerCount= passengerCount;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * Returns the passenger count of the passenger train.&#xA;&#x9; * @return the current passenger count.&#xA;&#x9; */&#xA;&#x9;public int getPassengerCount() {&#xA;&#x9;&#x9;return this.passengerCount;&#xA;&#x9;}&#xA;&#x9;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1458215355210" sizeMeasure="56">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class PassengerCar extends TrainCar {&#xA;&#xA;&#x9;private int passengerCount;&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * Constructor for a PassengerCar object.&#xA;&#x9; * @param deadWeight is the dead weight of the passenger car.&#xA;&#x9; * @param passengerCount is the number of people in the passenger car.&#xA;&#x9; */&#xA;&#x9;public PassengerCar(int deadWeight, int passengerCount) {&#xA;&#x9;&#x9;super(deadWeight);&#xA;&#x9;&#x9;isValidPassengerCount(passengerCount);&#xA;&#x9;&#x9;this.passengerCount = passengerCount;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * Checks whether the argument is a valid passenger count.&#xA;&#x9; * @param passengerCount is the argument checked.&#xA;&#x9; */&#xA;&#x9;private void isValidPassengerCount(int passengerCount) {&#xA;&#x9;&#x9;if (passengerCount &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;ERROR! The passenger count &quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;+ &quot;cannot be less than 0.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; *Returns the total weight of the cargo train. We assume&#xA;&#x9; *the weight of the average passenger is 80 KG.&#xA;&#x9; *@return the integer representation of the total weight.&#xA;&#x9; */&#xA;&#x9;@Override&#xA;&#x9;protected int getTotalWeight() {&#xA;&#x9;&#x9;return super.getDeadWeight() + getPassengerCount()*80;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * Sets a new passenger count for the passenger train.&#xA;&#x9; * @param passengerCount is the proposed new passenger count.&#xA;&#x9; */&#xA;&#x9;public void setPassengerCount(int passengerCount) {&#xA;&#x9;&#x9;isValidPassengerCount(passengerCount);&#xA;&#x9;&#x9;this.passengerCount= passengerCount;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * Returns the passenger count of the passenger train.&#xA;&#x9; * @return the current passenger count.&#xA;&#x9; */&#xA;&#x9;public int getPassengerCount() {&#xA;&#x9;&#x9;return this.passengerCount;&#xA;&#x9;}&#xA;&#x9;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1458215379372" sizeMeasure="56">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class PassengerCar extends TrainCar {&#xA;&#xA;&#x9;private int passengerCount;&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * Constructor for a PassengerCar object.&#xA;&#x9; * @param deadWeight is the dead weight of the passenger car.&#xA;&#x9; * @param passengerCount is the number of people in the passenger car.&#xA;&#x9; */&#xA;&#x9;public PassengerCar(int deadWeight, int passengerCount) {&#xA;&#x9;&#x9;super(deadWeight);&#xA;&#x9;&#x9;isValidPassengerCount(passengerCount);&#xA;&#x9;&#x9;this.passengerCount = passengerCount;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * Checks whether the argument is a valid passenger count.&#xA;&#x9; * @param passengerCount is the argument checked.&#xA;&#x9; */&#xA;&#x9;private void isValidPassengerCount(int passengerCount) {&#xA;&#x9;&#x9;if (passengerCount &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;ERROR! The passenger count &quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;+ &quot;cannot be less than 0.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; *Returns the total weight of the cargo train. We assume&#xA;&#x9; *the average weight of the passenger is 80 KG.&#xA;&#x9; *@return the integer representation of the total weight.&#xA;&#x9; */&#xA;&#x9;@Override&#xA;&#x9;protected int getTotalWeight() {&#xA;&#x9;&#x9;return super.getDeadWeight() + getPassengerCount()*80;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * Sets a new passenger count for the passenger train.&#xA;&#x9; * @param passengerCount is the proposed new passenger count.&#xA;&#x9; */&#xA;&#x9;public void setPassengerCount(int passengerCount) {&#xA;&#x9;&#x9;isValidPassengerCount(passengerCount);&#xA;&#x9;&#x9;this.passengerCount= passengerCount;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * Returns the passenger count of the passenger train.&#xA;&#x9; * @return the current passenger count.&#xA;&#x9; */&#xA;&#x9;public int getPassengerCount() {&#xA;&#x9;&#x9;return this.passengerCount;&#xA;&#x9;}&#xA;&#x9;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1458215382442" sizeMeasure="56">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class PassengerCar extends TrainCar {&#xA;&#xA;&#x9;private int passengerCount;&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * Constructor for a PassengerCar object.&#xA;&#x9; * @param deadWeight is the dead weight of the passenger car.&#xA;&#x9; * @param passengerCount is the number of people in the passenger car.&#xA;&#x9; */&#xA;&#x9;public PassengerCar(int deadWeight, int passengerCount) {&#xA;&#x9;&#x9;super(deadWeight);&#xA;&#x9;&#x9;isValidPassengerCount(passengerCount);&#xA;&#x9;&#x9;this.passengerCount = passengerCount;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * Checks whether the argument is a valid passenger count.&#xA;&#x9; * @param passengerCount is the argument checked.&#xA;&#x9; */&#xA;&#x9;private void isValidPassengerCount(int passengerCount) {&#xA;&#x9;&#x9;if (passengerCount &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;ERROR! The passenger count &quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;+ &quot;cannot be less than 0.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; *Returns the total weight of the cargo train. We assume&#xA;&#x9; *the average weight of a passenger is 80 KG.&#xA;&#x9; *@return the integer representation of the total weight.&#xA;&#x9; */&#xA;&#x9;@Override&#xA;&#x9;protected int getTotalWeight() {&#xA;&#x9;&#x9;return super.getDeadWeight() + getPassengerCount()*80;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * Sets a new passenger count for the passenger train.&#xA;&#x9; * @param passengerCount is the proposed new passenger count.&#xA;&#x9; */&#xA;&#x9;public void setPassengerCount(int passengerCount) {&#xA;&#x9;&#x9;isValidPassengerCount(passengerCount);&#xA;&#x9;&#x9;this.passengerCount= passengerCount;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * Returns the passenger count of the passenger train.&#xA;&#x9; * @return the current passenger count.&#xA;&#x9; */&#xA;&#x9;public int getPassengerCount() {&#xA;&#x9;&#x9;return this.passengerCount;&#xA;&#x9;}&#xA;&#x9;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1458215411787" sizeMeasure="56">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class PassengerCar extends TrainCar {&#xA;&#xA;&#x9;private int passengerCount;&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * Constructor for a PassengerCar object.&#xA;&#x9; * @param deadWeight is the dead weight of the passenger car.&#xA;&#x9; * @param passengerCount is the number of people in the passenger car.&#xA;&#x9; */&#xA;&#x9;public PassengerCar(int deadWeight, int passengerCount) {&#xA;&#x9;&#x9;super(deadWeight);&#xA;&#x9;&#x9;isValidPassengerCount(passengerCount);&#xA;&#x9;&#x9;this.passengerCount = passengerCount;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * Checks whether the argument is a valid passenger count.&#xA;&#x9; * @param passengerCount is the argument checked.&#xA;&#x9; */&#xA;&#x9;private void isValidPassengerCount(int passengerCount) {&#xA;&#x9;&#x9;if (passengerCount &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;ERROR! The passenger count &quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;+ &quot;cannot be less than 0.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; *Returns the total weight of the cargo train. We assume&#xA;&#x9; *the average weight of a passenger is 80 KG.&#xA;&#x9; *@return The integer representation of the total weight.&#xA;&#x9; */&#xA;&#x9;@Override&#xA;&#x9;protected int getTotalWeight() {&#xA;&#x9;&#x9;return super.getDeadWeight() + getPassengerCount()*80;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * Sets a new passenger count for the passenger train.&#xA;&#x9; * @param passengerCount is the proposed new passenger count.&#xA;&#x9; */&#xA;&#x9;public void setPassengerCount(int passengerCount) {&#xA;&#x9;&#x9;isValidPassengerCount(passengerCount);&#xA;&#x9;&#x9;this.passengerCount= passengerCount;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * Returns the passenger count of the passenger train.&#xA;&#x9; * @return The current passenger count.&#xA;&#x9; */&#xA;&#x9;public int getPassengerCount() {&#xA;&#x9;&#x9;return this.passengerCount;&#xA;&#x9;}&#xA;&#x9;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1458217243624" sizeMeasure="64">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class PassengerCar extends TrainCar {&#xA;&#xA;&#x9;private int passengerCount;&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * Constructor for a PassengerCar object.&#xA;&#x9; * @param deadWeight is the dead weight of the passenger car.&#xA;&#x9; * @param passengerCount is the number of people in the passenger car.&#xA;&#x9; */&#xA;&#x9;public PassengerCar(int deadWeight, int passengerCount) {&#xA;&#x9;&#x9;super(deadWeight);&#xA;&#x9;&#x9;isValidPassengerCount(passengerCount);&#xA;&#x9;&#x9;this.passengerCount = passengerCount;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * Checks whether the argument is a valid passenger count.&#xA;&#x9; * @param passengerCount is the argument checked.&#xA;&#x9; */&#xA;&#x9;private void isValidPassengerCount(int passengerCount) {&#xA;&#x9;&#x9;if (passengerCount &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;ERROR! The passenger count &quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;+ &quot;cannot be less than 0.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; *Returns the total weight of the cargo train. We assume&#xA;&#x9; *the average weight of a passenger is 80 KG.&#xA;&#x9; *@return The integer representation of the total weight.&#xA;&#x9; */&#xA;&#x9;@Override&#xA;&#x9;protected int getTotalWeight() {&#xA;&#x9;&#x9;return super.getDeadWeight() + getPassengerCount()*80;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * Sets a new passenger count for the passenger train.&#xA;&#x9; * @param passengerCount is the proposed new passenger count.&#xA;&#x9; */&#xA;&#x9;public void setPassengerCount(int passengerCount) {&#xA;&#x9;&#x9;isValidPassengerCount(passengerCount);&#xA;&#x9;&#x9;this.passengerCount= passengerCount;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * Returns the passenger count of the passenger train.&#xA;&#x9; * @return The current passenger count.&#xA;&#x9; */&#xA;&#x9;public int getPassengerCount() {&#xA;&#x9;&#x9;return this.passengerCount;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public String toString() {&#xA;&#x9;&#x9;String superString = super.toString();&#xA;&#x9;&#x9;String returnString = superString.substring(0,superString.length()-1);&#xA;&#x9;&#x9;return returnString + &quot;\n Passenger Count: &quot; + this.getPassengerCount() &#xA;&#x9;&#x9;+ &quot;]&quot;;&#xA;&#x9;}&#xA;&#x9;&#xA;}&#xA;"/>
        </attempts>
      </proposals>
      <proposals xsi:type="jdt:JdtSourceEditProposal" question="/0/@parts.0/@tasks.3/@q" answer="/0/@parts.0/@tasks.3/@a">
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1458215814321" sizeMeasure="5">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class Train {&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1458216108931" sizeMeasure="25" errorCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;import java.util.ArrayList;&#xA;&#xA;public class Train {&#xA;&#xA;&#x9;private ArrayList&lt;TrainCar> trainCars = new ArrayList&lt;>();&#xA;&#xA;&#x9;public void addTrain(TrainCar trainCar) {&#xA;&#x9;&#x9;if ()&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * Tells us whether the train contains this train car.&#xA;&#x9; * @param trainCar is the train car to be checked.&#xA;&#x9; * @return True if the train has the train car, otherwise false.&#xA;&#x9; */&#xA;&#x9;&#xA;&#x9;public boolean contains(TrainCar trainCar) {&#xA;&#x9;&#x9;if (trainCars.contains(trainCar)) {&#xA;&#x9;&#x9;&#x9;return true;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return false;&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1458216137745" sizeMeasure="27">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;import java.util.ArrayList;&#xA;&#xA;public class Train {&#xA;&#xA;&#x9;private ArrayList&lt;TrainCar> trainCars = new ArrayList&lt;>();&#xA;&#xA;&#x9;public void addTrain(TrainCar trainCar) {&#xA;&#x9;&#x9;if (!contains(trainCar)) {&#xA;&#x9;&#x9;&#x9;trainCars.add(trainCar);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * Tells us whether the train contains this train car.&#xA;&#x9; * @param trainCar is the train car to be checked.&#xA;&#x9; * @return True if the train has the train car, otherwise false.&#xA;&#x9; */&#xA;&#x9;&#xA;&#x9;public boolean contains(TrainCar trainCar) {&#xA;&#x9;&#x9;if (trainCars.contains(trainCar)) {&#xA;&#x9;&#x9;&#x9;return true;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return false;&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1458216228734" sizeMeasure="33">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;import java.util.ArrayList;&#xA;&#xA;public class Train {&#xA;&#xA;&#x9;private ArrayList&lt;TrainCar> trainCars = new ArrayList&lt;>();&#xA;&#xA;&#x9;/**&#xA;&#x9; * If the train car is not already attached to the train, this&#xA;&#x9; * method will add it.&#xA;&#x9; * @param trainCar we are trying to add to the train.&#xA;&#x9; */&#xA;&#x9;&#xA;&#x9;public void addTrain(TrainCar trainCar) {&#xA;&#x9;&#x9;if (!contains(trainCar)) {&#xA;&#x9;&#x9;&#x9;trainCars.add(trainCar);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * Tells us whether the train contains this train car.&#xA;&#x9; * @param trainCar is the train car to be checked.&#xA;&#x9; * @return True if the train has the train car, otherwise false.&#xA;&#x9; */&#xA;&#x9;&#xA;&#x9;public boolean contains(TrainCar trainCar) {&#xA;&#x9;&#x9;if (trainCars.contains(trainCar)) {&#xA;&#x9;&#x9;&#x9;return true;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return false;&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1458216255354" sizeMeasure="33">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;import java.util.ArrayList;&#xA;&#xA;public class Train {&#xA;&#xA;&#x9;private ArrayList&lt;TrainCar> trainCars = new ArrayList&lt;>();&#xA;&#xA;&#x9;/**&#xA;&#x9; * If the train car is not already attached to the train, this&#xA;&#x9; * method will add it to the train.&#xA;&#x9; * @param trainCar we are trying to add to the train.&#xA;&#x9; */&#xA;&#x9;&#xA;&#x9;public void addTrain(TrainCar trainCar) {&#xA;&#x9;&#x9;if (!contains(trainCar)) {&#xA;&#x9;&#x9;&#x9;trainCars.add(trainCar);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * Tells us whether the train contains this train car.&#xA;&#x9; * @param trainCar is the train car to be checked.&#xA;&#x9; * @return True if the train has the train car, otherwise false.&#xA;&#x9; */&#xA;&#x9;&#xA;&#x9;public boolean contains(TrainCar trainCar) {&#xA;&#x9;&#x9;if (trainCars.contains(trainCar)) {&#xA;&#x9;&#x9;&#x9;return true;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return false;&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1458216340931" sizeMeasure="41" errorCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;import java.util.ArrayList;&#xA;&#xA;public class Train {&#xA;&#xA;&#x9;private ArrayList&lt;TrainCar> trainCars = new ArrayList&lt;>();&#xA;&#xA;&#x9;/**&#xA;&#x9; * If the train car is not already attached to the train, this&#xA;&#x9; * method will add it to the train.&#xA;&#x9; * @param trainCar we are trying to add to the train.&#xA;&#x9; */&#xA;&#x9;&#xA;&#x9;public void addTrain(TrainCar trainCar) {&#xA;&#x9;&#x9;if (!contains(trainCar)) {&#xA;&#x9;&#x9;&#x9;trainCars.add(trainCar);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * Tells us whether the train contains this train car.&#xA;&#x9; * @param trainCar is the train car to be checked.&#xA;&#x9; * @return True if the train has the train car, otherwise false.&#xA;&#x9; */&#xA;&#x9;&#xA;&#x9;public boolean contains(TrainCar trainCar) {&#xA;&#x9;&#x9;if (trainCars.contains(trainCar)) {&#xA;&#x9;&#x9;&#x9;return true;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return false;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public getTotalWeight() {&#xA;&#x9;&#x9;int totalWeight = 0;&#xA;&#x9;&#x9;for (TrainCar trainCar : trainCars) {&#xA;&#x9;&#x9;&#x9;totalWeight += trainCar.getTotalWeight();&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return totalWeight;&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1458216389802" sizeMeasure="46">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;import java.util.ArrayList;&#xA;&#xA;public class Train {&#xA;&#xA;&#x9;private ArrayList&lt;TrainCar> trainCars = new ArrayList&lt;>();&#xA;&#xA;&#x9;/**&#xA;&#x9; * If the train car is not already attached to the train, this&#xA;&#x9; * method will add it to the train.&#xA;&#x9; * @param trainCar we are trying to add to the train.&#xA;&#x9; */&#xA;&#x9;&#xA;&#x9;public void addTrain(TrainCar trainCar) {&#xA;&#x9;&#x9;if (!contains(trainCar)) {&#xA;&#x9;&#x9;&#x9;trainCars.add(trainCar);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * Tells us whether the train contains this train car.&#xA;&#x9; * @param trainCar is the train car to be checked.&#xA;&#x9; * @return True if the train has the train car, otherwise false.&#xA;&#x9; */&#xA;&#x9;&#xA;&#x9;public boolean contains(TrainCar trainCar) {&#xA;&#x9;&#x9;if (trainCars.contains(trainCar)) {&#xA;&#x9;&#x9;&#x9;return true;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return false;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * This method returns the total weight of the train.&#xA;&#x9; * @return The integer representation of the total weight of &#xA;&#x9; * the train.&#xA;&#x9; */&#xA;&#x9;public int getTotalWeight() {&#xA;&#x9;&#x9;int totalWeight = 0;&#xA;&#x9;&#x9;for (TrainCar trainCar : trainCars) {&#xA;&#x9;&#x9;&#x9;totalWeight += trainCar.getTotalWeight();&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return totalWeight;&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1458216573491" sizeMeasure="61">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;import java.util.ArrayList;&#xA;&#xA;public class Train {&#xA;&#xA;&#x9;private ArrayList&lt;TrainCar> trainCars = new ArrayList&lt;>();&#xA;&#xA;&#x9;/**&#xA;&#x9; * If the train car is not already attached to the train, this&#xA;&#x9; * method will add it to the train.&#xA;&#x9; * @param trainCar we are trying to add to the train.&#xA;&#x9; */&#xA;&#x9;&#xA;&#x9;public void addTrain(TrainCar trainCar) {&#xA;&#x9;&#x9;if (!contains(trainCar)) {&#xA;&#x9;&#x9;&#x9;trainCars.add(trainCar);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * Tells us whether the train contains this train car.&#xA;&#x9; * @param trainCar is the train car to be checked.&#xA;&#x9; * @return True if the train has the train car, otherwise false.&#xA;&#x9; */&#xA;&#x9;&#xA;&#x9;public boolean contains(TrainCar trainCar) {&#xA;&#x9;&#x9;if (trainCars.contains(trainCar)) {&#xA;&#x9;&#x9;&#x9;return true;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return false;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * This method returns the total weight of the train.&#xA;&#x9; * @return The integer representation of the total weight of &#xA;&#x9; * the train.&#xA;&#x9; */&#xA;&#x9;public int getTotalWeight() {&#xA;&#x9;&#x9;int totalWeight = 0;&#xA;&#x9;&#x9;for (TrainCar trainCar : trainCars) {&#xA;&#x9;&#x9;&#x9;totalWeight += trainCar.getTotalWeight();&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return totalWeight;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * This method returns the total number of passengers on the &#xA;&#x9; * train.&#xA;&#x9; * @return The total number of passengers.&#xA;&#x9; */&#xA;&#x9;public int getPassengerCount() {&#xA;&#x9;&#x9;int passengerCount = 0;&#xA;&#x9;&#x9;for (TrainCar trainCar : trainCars) {&#xA;&#x9;&#x9;&#x9;if (trainCar instanceof PassengerCar) {&#xA;&#x9;&#x9;&#x9;&#x9;passengerCount += ((PassengerCar) trainCar).getPassengerCount();&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return passengerCount;&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1458216716828" sizeMeasure="75">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;import java.util.ArrayList;&#xA;&#xA;public class Train {&#xA;&#xA;&#x9;private ArrayList&lt;TrainCar> trainCars = new ArrayList&lt;>();&#xA;&#xA;&#x9;/**&#xA;&#x9; * If the train car is not already attached to the train, this&#xA;&#x9; * method will add it to the train.&#xA;&#x9; * @param trainCar we are trying to add to the train.&#xA;&#x9; */&#xA;&#x9;&#xA;&#x9;public void addTrain(TrainCar trainCar) {&#xA;&#x9;&#x9;if (!contains(trainCar)) {&#xA;&#x9;&#x9;&#x9;trainCars.add(trainCar);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * Tells us whether the train contains this train car.&#xA;&#x9; * @param trainCar is the train car to be checked.&#xA;&#x9; * @return True if the train has the train car, otherwise false.&#xA;&#x9; */&#xA;&#x9;&#xA;&#x9;public boolean contains(TrainCar trainCar) {&#xA;&#x9;&#x9;if (trainCars.contains(trainCar)) {&#xA;&#x9;&#x9;&#x9;return true;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return false;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * This method returns the total weight of the train.&#xA;&#x9; * @return The integer representation of the total weight of &#xA;&#x9; * the train.&#xA;&#x9; */&#xA;&#x9;public int getTotalWeight() {&#xA;&#x9;&#x9;int totalWeight = 0;&#xA;&#x9;&#x9;for (TrainCar trainCar : trainCars) {&#xA;&#x9;&#x9;&#x9;totalWeight += trainCar.getTotalWeight();&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return totalWeight;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * This method returns the total number of passengers on the &#xA;&#x9; * train.&#xA;&#x9; * @return The total number of passengers.&#xA;&#x9; */&#xA;&#x9;public int getPassengerCount() {&#xA;&#x9;&#x9;int passengerCount = 0;&#xA;&#x9;&#x9;for (TrainCar trainCar : trainCars) {&#xA;&#x9;&#x9;&#x9;if (trainCar instanceof PassengerCar) {&#xA;&#x9;&#x9;&#x9;&#x9;passengerCount += ((PassengerCar) trainCar).getPassengerCount();&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return passengerCount;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * This method returns the total cargo weight of the train.&#xA;&#x9; * @return The integer representation of the cargo weight of the train.&#xA;&#x9; */&#xA;&#x9;public int getCargoCount() {&#xA;&#x9;&#x9;int cargoWeight = 0;&#xA;&#x9;&#x9;for (TrainCar trainCar : trainCars) {&#xA;&#x9;&#x9;&#x9;if (trainCar instanceof CargoCar) {&#xA;&#x9;&#x9;&#x9;&#x9;cargoWeight += ((CargoCar) trainCar).getCargoWeight();&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return cargoWeight;&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1458216726937" sizeMeasure="76">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;import java.util.ArrayList;&#xA;&#xA;public class Train {&#xA;&#xA;&#x9;private ArrayList&lt;TrainCar> trainCars = new ArrayList&lt;>();&#xA;&#xA;&#x9;/**&#xA;&#x9; * If the train car is not already attached to the train, this&#xA;&#x9; * method will add it to the train.&#xA;&#x9; * @param trainCar we are trying to add to the train.&#xA;&#x9; */&#xA;&#x9;&#xA;&#x9;public void addTrain(TrainCar trainCar) {&#xA;&#x9;&#x9;if (!contains(trainCar)) {&#xA;&#x9;&#x9;&#x9;trainCars.add(trainCar);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * Tells us whether the train contains this train car.&#xA;&#x9; * @param trainCar is the train car to be checked.&#xA;&#x9; * @return True if the train has the train car, otherwise false.&#xA;&#x9; */&#xA;&#x9;&#xA;&#x9;public boolean contains(TrainCar trainCar) {&#xA;&#x9;&#x9;if (trainCars.contains(trainCar)) {&#xA;&#x9;&#x9;&#x9;return true;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return false;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * This method returns the total weight of the train.&#xA;&#x9; * @return The integer representation of the total weight of &#xA;&#x9; * the train.&#xA;&#x9; */&#xA;&#x9;public int getTotalWeight() {&#xA;&#x9;&#x9;int totalWeight = 0;&#xA;&#x9;&#x9;for (TrainCar trainCar : trainCars) {&#xA;&#x9;&#x9;&#x9;totalWeight += trainCar.getTotalWeight();&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return totalWeight;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * This method returns the total number of passengers on the &#xA;&#x9; * train.&#xA;&#x9; * @return The total number of passengers.&#xA;&#x9; */&#xA;&#x9;public int getPassengerCount() {&#xA;&#x9;&#x9;int passengerCount = 0;&#xA;&#x9;&#x9;for (TrainCar trainCar : trainCars) {&#xA;&#x9;&#x9;&#x9;if (trainCar instanceof PassengerCar) {&#xA;&#x9;&#x9;&#x9;&#x9;passengerCount += ((PassengerCar) trainCar).getPassengerCount();&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return passengerCount;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * This method returns the total cargo weight of the train.&#xA;&#x9; * @return The integer representation of the cargo weight of &#xA;&#x9; * the train.&#xA;&#x9; */&#xA;&#x9;public int getCargoCount() {&#xA;&#x9;&#x9;int cargoWeight = 0;&#xA;&#x9;&#x9;for (TrainCar trainCar : trainCars) {&#xA;&#x9;&#x9;&#x9;if (trainCar instanceof CargoCar) {&#xA;&#x9;&#x9;&#x9;&#x9;cargoWeight += ((CargoCar) trainCar).getCargoWeight();&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return cargoWeight;&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1458217385707" sizeMeasure="83" errorCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;import java.util.ArrayList;&#xA;&#xA;public class Train {&#xA;&#xA;&#x9;private ArrayList&lt;TrainCar> trainCars = new ArrayList&lt;>();&#xA;&#xA;&#x9;/**&#xA;&#x9; * If the train car is not already attached to the train, this&#xA;&#x9; * method will add it to the train.&#xA;&#x9; * @param trainCar we are trying to add to the train.&#xA;&#x9; */&#xA;&#x9;&#xA;&#x9;public void addTrain(TrainCar trainCar) {&#xA;&#x9;&#x9;if (!contains(trainCar)) {&#xA;&#x9;&#x9;&#x9;trainCars.add(trainCar);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * Tells us whether the train contains this train car.&#xA;&#x9; * @param trainCar is the train car to be checked.&#xA;&#x9; * @return True if the train has the train car, otherwise false.&#xA;&#x9; */&#xA;&#x9;&#xA;&#x9;public boolean contains(TrainCar trainCar) {&#xA;&#x9;&#x9;if (trainCars.contains(trainCar)) {&#xA;&#x9;&#x9;&#x9;return true;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return false;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * This method returns the total weight of the train.&#xA;&#x9; * @return The integer representation of the total weight of &#xA;&#x9; * the train.&#xA;&#x9; */&#xA;&#x9;public int getTotalWeight() {&#xA;&#x9;&#x9;int totalWeight = 0;&#xA;&#x9;&#x9;for (TrainCar trainCar : trainCars) {&#xA;&#x9;&#x9;&#x9;totalWeight += trainCar.getTotalWeight();&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return totalWeight;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * This method returns the total number of passengers on the &#xA;&#x9; * train.&#xA;&#x9; * @return The total number of passengers.&#xA;&#x9; */&#xA;&#x9;public int getPassengerCount() {&#xA;&#x9;&#x9;int passengerCount = 0;&#xA;&#x9;&#x9;for (TrainCar trainCar : trainCars) {&#xA;&#x9;&#x9;&#x9;if (trainCar instanceof PassengerCar) {&#xA;&#x9;&#x9;&#x9;&#x9;passengerCount += ((PassengerCar) trainCar).getPassengerCount();&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return passengerCount;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * This method returns the total cargo weight of the train.&#xA;&#x9; * @return The integer representation of the cargo weight of &#xA;&#x9; * the train.&#xA;&#x9; */&#xA;&#x9;public int getCargoCount() {&#xA;&#x9;&#x9;int cargoWeight = 0;&#xA;&#x9;&#x9;for (TrainCar trainCar : trainCars) {&#xA;&#x9;&#x9;&#x9;if (trainCar instanceof CargoCar) {&#xA;&#x9;&#x9;&#x9;&#x9;cargoWeight += ((CargoCar) trainCar).getCargoWeight();&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return cargoWeight;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public String toString() {&#xA;&#x9;&#x9;String returnString = &quot;&quot;;&#xA;&#x9;&#x9;for (TrainCar trainCar : trainCars) {&#xA;&#x9;&#x9;&#x9;returnString += trainCar.toString() + &quot;/n&quot;;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1458217393086" sizeMeasure="84">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;import java.util.ArrayList;&#xA;&#xA;public class Train {&#xA;&#xA;&#x9;private ArrayList&lt;TrainCar> trainCars = new ArrayList&lt;>();&#xA;&#xA;&#x9;/**&#xA;&#x9; * If the train car is not already attached to the train, this&#xA;&#x9; * method will add it to the train.&#xA;&#x9; * @param trainCar we are trying to add to the train.&#xA;&#x9; */&#xA;&#x9;&#xA;&#x9;public void addTrain(TrainCar trainCar) {&#xA;&#x9;&#x9;if (!contains(trainCar)) {&#xA;&#x9;&#x9;&#x9;trainCars.add(trainCar);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * Tells us whether the train contains this train car.&#xA;&#x9; * @param trainCar is the train car to be checked.&#xA;&#x9; * @return True if the train has the train car, otherwise false.&#xA;&#x9; */&#xA;&#x9;&#xA;&#x9;public boolean contains(TrainCar trainCar) {&#xA;&#x9;&#x9;if (trainCars.contains(trainCar)) {&#xA;&#x9;&#x9;&#x9;return true;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return false;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * This method returns the total weight of the train.&#xA;&#x9; * @return The integer representation of the total weight of &#xA;&#x9; * the train.&#xA;&#x9; */&#xA;&#x9;public int getTotalWeight() {&#xA;&#x9;&#x9;int totalWeight = 0;&#xA;&#x9;&#x9;for (TrainCar trainCar : trainCars) {&#xA;&#x9;&#x9;&#x9;totalWeight += trainCar.getTotalWeight();&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return totalWeight;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * This method returns the total number of passengers on the &#xA;&#x9; * train.&#xA;&#x9; * @return The total number of passengers.&#xA;&#x9; */&#xA;&#x9;public int getPassengerCount() {&#xA;&#x9;&#x9;int passengerCount = 0;&#xA;&#x9;&#x9;for (TrainCar trainCar : trainCars) {&#xA;&#x9;&#x9;&#x9;if (trainCar instanceof PassengerCar) {&#xA;&#x9;&#x9;&#x9;&#x9;passengerCount += ((PassengerCar) trainCar).getPassengerCount();&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return passengerCount;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * This method returns the total cargo weight of the train.&#xA;&#x9; * @return The integer representation of the cargo weight of &#xA;&#x9; * the train.&#xA;&#x9; */&#xA;&#x9;public int getCargoCount() {&#xA;&#x9;&#x9;int cargoWeight = 0;&#xA;&#x9;&#x9;for (TrainCar trainCar : trainCars) {&#xA;&#x9;&#x9;&#x9;if (trainCar instanceof CargoCar) {&#xA;&#x9;&#x9;&#x9;&#x9;cargoWeight += ((CargoCar) trainCar).getCargoWeight();&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return cargoWeight;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public String toString() {&#xA;&#x9;&#x9;String returnString = &quot;&quot;;&#xA;&#x9;&#x9;for (TrainCar trainCar : trainCars) {&#xA;&#x9;&#x9;&#x9;returnString += trainCar.toString() + &quot;/n&quot;;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return returnString;&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1458217428998" sizeMeasure="84">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;import java.util.ArrayList;&#xA;&#xA;public class Train {&#xA;&#xA;&#x9;private ArrayList&lt;TrainCar> trainCars = new ArrayList&lt;>();&#xA;&#xA;&#x9;/**&#xA;&#x9; * If the train car is not already attached to the train, this&#xA;&#x9; * method will add it to the train.&#xA;&#x9; * @param trainCar we are trying to add to the train.&#xA;&#x9; */&#xA;&#x9;&#xA;&#x9;public void addTrainCar(TrainCar trainCar) {&#xA;&#x9;&#x9;if (!contains(trainCar)) {&#xA;&#x9;&#x9;&#x9;trainCars.add(trainCar);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * Tells us whether the train contains this train car.&#xA;&#x9; * @param trainCar is the train car to be checked.&#xA;&#x9; * @return True if the train has the train car, otherwise false.&#xA;&#x9; */&#xA;&#x9;&#xA;&#x9;public boolean contains(TrainCar trainCar) {&#xA;&#x9;&#x9;if (trainCars.contains(trainCar)) {&#xA;&#x9;&#x9;&#x9;return true;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return false;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * This method returns the total weight of the train.&#xA;&#x9; * @return The integer representation of the total weight of &#xA;&#x9; * the train.&#xA;&#x9; */&#xA;&#x9;public int getTotalWeight() {&#xA;&#x9;&#x9;int totalWeight = 0;&#xA;&#x9;&#x9;for (TrainCar trainCar : trainCars) {&#xA;&#x9;&#x9;&#x9;totalWeight += trainCar.getTotalWeight();&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return totalWeight;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * This method returns the total number of passengers on the &#xA;&#x9; * train.&#xA;&#x9; * @return The total number of passengers.&#xA;&#x9; */&#xA;&#x9;public int getPassengerCount() {&#xA;&#x9;&#x9;int passengerCount = 0;&#xA;&#x9;&#x9;for (TrainCar trainCar : trainCars) {&#xA;&#x9;&#x9;&#x9;if (trainCar instanceof PassengerCar) {&#xA;&#x9;&#x9;&#x9;&#x9;passengerCount += ((PassengerCar) trainCar).getPassengerCount();&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return passengerCount;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * This method returns the total cargo weight of the train.&#xA;&#x9; * @return The integer representation of the cargo weight of &#xA;&#x9; * the train.&#xA;&#x9; */&#xA;&#x9;public int getCargoCount() {&#xA;&#x9;&#x9;int cargoWeight = 0;&#xA;&#x9;&#x9;for (TrainCar trainCar : trainCars) {&#xA;&#x9;&#x9;&#x9;if (trainCar instanceof CargoCar) {&#xA;&#x9;&#x9;&#x9;&#x9;cargoWeight += ((CargoCar) trainCar).getCargoWeight();&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return cargoWeight;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public String toString() {&#xA;&#x9;&#x9;String returnString = &quot;&quot;;&#xA;&#x9;&#x9;for (TrainCar trainCar : trainCars) {&#xA;&#x9;&#x9;&#x9;returnString += trainCar.toString() + &quot;/n&quot;;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return returnString;&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1458217445833" sizeMeasure="84">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;import java.util.ArrayList;&#xA;&#xA;public class Train {&#xA;&#xA;&#x9;private ArrayList&lt;TrainCar> trainCars = new ArrayList&lt;>();&#xA;&#xA;&#x9;/**&#xA;&#x9; * If the train car is not already attached to the train, this&#xA;&#x9; * method will add it to the train.&#xA;&#x9; * @param trainCar we are trying to add to the train.&#xA;&#x9; */&#xA;&#x9;&#xA;&#x9;public void addTrainCar(TrainCar trainCar) {&#xA;&#x9;&#x9;if (!contains(trainCar)) {&#xA;&#x9;&#x9;&#x9;trainCars.add(trainCar);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * Tells us whether the train contains this train car.&#xA;&#x9; * @param trainCar is the train car to be checked.&#xA;&#x9; * @return True if the train has the train car, otherwise false.&#xA;&#x9; */&#xA;&#x9;&#xA;&#x9;public boolean contains(TrainCar trainCar) {&#xA;&#x9;&#x9;if (trainCars.contains(trainCar)) {&#xA;&#x9;&#x9;&#x9;return true;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return false;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * This method returns the total weight of the train.&#xA;&#x9; * @return The integer representation of the total weight of &#xA;&#x9; * the train.&#xA;&#x9; */&#xA;&#x9;public int getTotalWeight() {&#xA;&#x9;&#x9;int totalWeight = 0;&#xA;&#x9;&#x9;for (TrainCar trainCar : trainCars) {&#xA;&#x9;&#x9;&#x9;totalWeight += trainCar.getTotalWeight();&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return totalWeight;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * This method returns the total number of passengers on the &#xA;&#x9; * train.&#xA;&#x9; * @return The total number of passengers.&#xA;&#x9; */&#xA;&#x9;public int getPassengerCount() {&#xA;&#x9;&#x9;int passengerCount = 0;&#xA;&#x9;&#x9;for (TrainCar trainCar : trainCars) {&#xA;&#x9;&#x9;&#x9;if (trainCar instanceof PassengerCar) {&#xA;&#x9;&#x9;&#x9;&#x9;passengerCount += ((PassengerCar) trainCar).getPassengerCount();&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return passengerCount;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;/**&#xA;&#x9; * This method returns the total cargo weight of the train.&#xA;&#x9; * @return The integer representation of the cargo weight of &#xA;&#x9; * the train.&#xA;&#x9; */&#xA;&#x9;public int getCargoWeight() {&#xA;&#x9;&#x9;int cargoWeight = 0;&#xA;&#x9;&#x9;for (TrainCar trainCar : trainCars) {&#xA;&#x9;&#x9;&#x9;if (trainCar instanceof CargoCar) {&#xA;&#x9;&#x9;&#x9;&#x9;cargoWeight += ((CargoCar) trainCar).getCargoWeight();&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return cargoWeight;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public String toString() {&#xA;&#x9;&#x9;String returnString = &quot;&quot;;&#xA;&#x9;&#x9;for (TrainCar trainCar : trainCars) {&#xA;&#x9;&#x9;&#x9;returnString += trainCar.toString() + &quot;/n&quot;;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return returnString;&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
      </proposals>
      <proposals xsi:type="junit:JunitTestProposal" question="/0/@parts.0/@tasks.4/@q" answer="/0/@parts.0/@tasks.4/@a" completion="1.0">
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1458213771139" completion="1.0" successCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1458222557197" completion="1.0" successCount="1"/>
      </proposals>
      <proposals xsi:type="junit:JunitTestProposal" question="/0/@parts.0/@tasks.5/@q" answer="/0/@parts.0/@tasks.5/@a" completion="1.0">
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1458217454996" completion="1.0" successCount="4"/>
      </proposals>
    </proposals>
    <proposals exercisePart="/0/@parts.1">
      <proposals xsi:type="workbench:DebugEventProposal" question="/0/@parts.1/@tasks.0/@q" answer="/0/@parts.1/@tasks.0/@a"/>
      <proposals xsi:type="workbench:CommandExecutionProposal" question="/0/@parts.1/@tasks.1/@q" answer="/0/@parts.1/@tasks.1/@a"/>
      <proposals xsi:type="workbench:CommandExecutionProposal" question="/0/@parts.1/@tasks.2/@q" answer="/0/@parts.1/@tasks.2/@a"/>
      <proposals xsi:type="workbench:PartTaskProposal" question="/0/@parts.1/@tasks.3/@q" answer="/0/@parts.1/@tasks.3/@a"/>
      <proposals xsi:type="jdt:JdtLaunchProposal" question="/0/@parts.1/@tasks.4/@q" answer="/0/@parts.1/@tasks.4/@a"/>
      <proposals xsi:type="jdt:JdtLaunchProposal" question="/0/@parts.1/@tasks.5/@q" answer="/0/@parts.1/@tasks.5/@a"/>
      <proposals xsi:type="jdt:JdtLaunchProposal" question="/0/@parts.1/@tasks.6/@q" answer="/0/@parts.1/@tasks.6/@a"/>
      <proposals xsi:type="jdt:JdtLaunchProposal" question="/0/@parts.1/@tasks.7/@q" answer="/0/@parts.1/@tasks.7/@a"/>
    </proposals>
  </exercise:ExerciseProposals>
</xmi:XMI>
