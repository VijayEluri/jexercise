<?xml version="1.0" encoding="UTF-8"?>
<xmi:XMI xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:exercise="platform:/plugin/no.hal.learning.exercise.model/model/exercise.ecore" xmlns:jdt="platform:/plugin/no.hal.learning.exercise.jdt/model/jdt-exercise.ecore" xmlns:junit="platform:/plugin/no.hal.learning.exercise.junit/model/junit-exercise.ecore" xmlns:workbench="platform:/plugin/no.hal.learning.exercise.workbench/model/workbench-exercise.ecore">
  <exercise:Exercise>
    <parts xsi:type="exercise:ExercisePart" title="StringGridImpl">
      <tasks xsi:type="exercise:Task">
        <q xsi:type="exercise:StringQuestion" question="Copy the source code for the StringGrid interface."/>
        <a xsi:type="jdt:JdtSourceEditAnswer" className="interfaces.StringGrid"/>
      </tasks>
      <tasks xsi:type="exercise:Task">
        <q xsi:type="exercise:StringQuestion" question="Write source code for the StringGridImpl class."/>
        <a xsi:type="jdt:JdtSourceEditAnswer" className="interfaces.StringGridImpl"/>
      </tasks>
    </parts>
    <parts xsi:type="exercise:ExercisePart" title="StringGridIterator">
      <tasks xsi:type="exercise:Task">
        <q xsi:type="exercise:StringQuestion" question="Write source code for the StringGridIterator class."/>
        <a xsi:type="jdt:JdtSourceEditAnswer" className="interfaces.StringGridIterator"/>
      </tasks>
      <tasks xsi:type="exercise:Task">
        <q xsi:type="exercise:StringQuestion" question="Run the StringGridTest JUnit test."/>
        <a xsi:type="junit:JunitTestAnswer" testRunName="interfaces.StringGridTest"/>
      </tasks>
    </parts>
    <parts xsi:type="exercise:ExercisePart" title="Tool usage">
      <tasks xsi:type="exercise:Task">
        <q xsi:type="exercise:StringQuestion" question="Use breakpoints to debug code."/>
        <a xsi:type="workbench:DebugEventAnswer" action="suspend.breakpoint"/>
      </tasks>
      <tasks xsi:type="exercise:Task">
        <q xsi:type="exercise:StringQuestion" question="Use the debug command Step Over"/>
        <a xsi:type="workbench:CommandExecutionAnswer" elementId="org.eclipse.debug.ui.commands.StepOver" action="executeSuccess"/>
      </tasks>
      <tasks xsi:type="exercise:Task">
        <q xsi:type="exercise:StringQuestion" question="Use the debug command Step Into"/>
        <a xsi:type="workbench:CommandExecutionAnswer" elementId="org.eclipse.debug.ui.commands.StepInto" action="executeSuccess"/>
      </tasks>
      <tasks xsi:type="exercise:Task">
        <q xsi:type="exercise:StringQuestion" question="Use the Variables view"/>
        <a xsi:type="workbench:PartTaskAnswer" elementId="org.eclipse.debug.ui.VariableView" action="activated"/>
      </tasks>
    </parts>
  </exercise:Exercise>
  <exercise:ExerciseProposals exercise="/0">
    <proposals exercisePart="/0/@parts.0">
      <proposals xsi:type="jdt:JdtSourceEditProposal" question="/0/@parts.0/@tasks.0/@q" answer="/0/@parts.0/@tasks.0/@a">
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457100822999" sizeMeasure="21">
          <edit xsi:type="exercise:StringEdit" storedString="package interfaces;&#xA;&#xA;import java.util.Iterator;&#xA;&#xA;/*&#xA;An interface with methods for managing the content of a String grid.&#xA;The grid has a number of rows (the grid's height) and columns (the grid's width).&#xA;In each cell in the grid there is a String that can be set with the setElement method and read with the getElement method.&#xA;*/&#xA; public interface StringGrid extends Iterator&lt;String> {&#xA; &#xA;    // Returns the number of rows in this StringGrid&#xA;    public int getRowCount();&#xA;    // Returns the number of columns in this StringGrid&#xA;    public int getColumnCount();&#xA; &#xA;    // Returns the String at the given row and column. Throws an IllegalArgumentException if the row or column is out of range&#xA;    public String getElement(int row, int column);&#xA;    // Sets the String at the given row and column. Throws an IllegalArgumentException if the row or column is out of range&#xA;    public void setElement(int row, int column, String element);&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457101257011" sizeMeasure="22" warningCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package interfaces;&#xA;&#xA;import java.util.Iterator;&#xA;&#xA;/*&#xA;An interface with methods for managing the content of a String grid.&#xA;The grid has a number of rows (the grid's height) and columns (the grid's width).&#xA;In each cell in the grid there is a String that can be set with the setElement method and read with the getElement method.&#xA;*/&#xA; public interface StringGrid extends Iterable&lt;String> {&#xA; &#xA;    // Returns the number of rows in this StringGrid&#xA;    public int getRowCount();&#xA;    // Returns the number of columns in this StringGrid&#xA;    public int getColumnCount();&#xA; &#xA;    // Returns the String at the given row and column. Throws an IllegalArgumentException if the row or column is out of range&#xA;    public String getElement(int row, int column);&#xA;    // Sets the String at the given row and column. Throws an IllegalArgumentException if the row or column is out of range&#xA;    public void setElement(int row, int column, String element);&#xA;    &#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457101361684" sizeMeasure="20">
          <edit xsi:type="exercise:StringEdit" storedString="package interfaces;&#xA;&#xA;/*&#xA;An interface with methods for managing the content of a String grid.&#xA;The grid has a number of rows (the grid's height) and columns (the grid's width).&#xA;In each cell in the grid there is a String that can be set with the setElement method and read with the getElement method.&#xA;*/&#xA; public interface StringGrid extends Iterable&lt;String> {&#xA; &#xA;    // Returns the number of rows in this StringGrid&#xA;    public int getRowCount();&#xA;    // Returns the number of columns in this StringGrid&#xA;    public int getColumnCount();&#xA; &#xA;    // Returns the String at the given row and column. Throws an IllegalArgumentException if the row or column is out of range&#xA;    public String getElement(int row, int column);&#xA;    // Sets the String at the given row and column. Throws an IllegalArgumentException if the row or column is out of range&#xA;    public void setElement(int row, int column, String element);&#xA;    &#xA;}&#xA;"/>
        </attempts>
      </proposals>
      <proposals xsi:type="jdt:JdtSourceEditProposal" question="/0/@parts.0/@tasks.1/@q" answer="/0/@parts.0/@tasks.1/@a">
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457021658491" sizeMeasure="5">
          <edit xsi:type="exercise:StringEdit" storedString="package interfaces;&#xA;&#xA;public class StringGridImpl {&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457022053822" sizeMeasure="48">
          <edit xsi:type="exercise:StringEdit" storedString="package interfaces;&#xA;&#xA;import java.util.ArrayList;&#xA;&#xA;public class StringGridImpl implements StringGrid {&#xA;&#xA;&#x9;//internal state&#xA;&#x9;private int rows;&#xA;&#x9;private int columnCount;&#xA;&#x9;ArrayList&lt;ArrayList&lt;String>> matrix= new ArrayList&lt;ArrayList&lt;String>>();&#xA;&#x9;&#xA;&#x9;public StringGridImpl(int rows, int columnCount) {&#xA;&#x9;&#x9;checkForNegativeCoordinates(rows, columnCount);&#xA;&#x9;&#x9;this.rows = rows;&#xA;&#x9;&#x9;this.columnCount = columnCount;&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#xA;&#x9;private void checkForNegativeCoordinates(int rows, int columnCount) {&#xA;&#x9;&#x9;if (rows &lt; 0 || columnCount &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;ERROR! Row and column count &quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;+ &quot;cannot be a negative integer.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public int getRowCount() {&#xA;&#x9;&#x9;return rows;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getColumnCount() {&#xA;&#x9;&#x9;return columnCount;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public String getElement(int row, int column) {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;return null;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void setElement(int row, int column, String element) {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457022426592" sizeMeasure="59" warningCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package interfaces;&#xA;&#xA;import java.util.ArrayList;&#xA;&#xA;public class StringGridImpl implements StringGrid {&#xA;&#xA;&#x9;//internal state&#xA;&#x9;private int rows;&#xA;&#x9;private int columnCount;&#xA;&#x9;ArrayList&lt;ArrayList&lt;String>> matrix= new ArrayList&lt;ArrayList&lt;String>>();&#xA;&#x9;&#xA;&#x9;//implement the matrix in the constructor&#xA;&#x9;public StringGridImpl(int rows, int columnCount) {&#xA;&#x9;&#x9;checkForNegativeCoordinates(rows, columnCount);&#xA;&#x9;&#x9;this.rows = rows;&#xA;&#x9;&#x9;this.columnCount = columnCount;&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#xA;&#x9;private void checkForNegativeCoordinates(int rows, int columnCount) {&#xA;&#x9;&#x9;if (rows &lt; 0 || columnCount &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;ERROR! Row and column count &quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;+ &quot;cannot be a negative integer.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public int getRowCount() {&#xA;&#x9;&#x9;return rows;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getColumnCount() {&#xA;&#x9;&#x9;return columnCount;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public String getElement(int row, int column) {&#xA;&#x9;&#x9;checkForNegativeCoordinates(row, column);&#xA;&#x9;&#x9;checkForExceedingCoordinates(row, column);&#xA;&#x9;&#x9;return matrix.get(row).get(column);&#xA;&#x9;}&#xA;&#xA;&#x9;private void checkForExceedingCoordinates(int row, int column) {&#xA;&#x9;&#x9;if (row >= rows || column >= columnCount) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;ERROR! Row or column index &quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;+ &quot;exceeded the maximum value.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void setElement(int row, int column, String element) {&#xA;&#x9;&#x9;checkForNegativeCoordinates(row, column);&#xA;&#x9;&#x9;checkForExceedingCoordinates(row, column);&#xA;&#x9;&#x9;String elementLocation = matrix.get(row).get(column);&#xA;&#x9;&#x9;elementLocation = element;&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457022598076" sizeMeasure="60" warningCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package interfaces;&#xA;&#xA;import java.util.ArrayList;&#xA;&#xA;public class StringGridImpl implements StringGrid {&#xA;&#xA;&#x9;//internal state&#xA;&#x9;private int rows;&#xA;&#x9;private int columnCount;&#xA;&#x9;ArrayList&lt;ArrayList&lt;String>> matrix= new ArrayList&lt;ArrayList&lt;String>>();&#xA;&#x9;&#xA;&#x9;//implement the matrix in the constructor&#xA;&#x9;public StringGridImpl(int rows, int columnCount) {&#xA;&#x9;&#x9;checkForNegativeCoordinates(rows, columnCount);&#xA;&#x9;&#x9;this.rows = rows;&#xA;&#x9;&#x9;this.columnCount = columnCount;&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#xA;&#x9;private void checkForNegativeCoordinates(int rows, int columnCount) {&#xA;&#x9;&#x9;if (rows &lt; 0 || columnCount &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;ERROR! Row and column count &quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;+ &quot;cannot be a negative integer.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public int getRowCount() {&#xA;&#x9;&#x9;return rows;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getColumnCount() {&#xA;&#x9;&#x9;return columnCount;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public String getElement(int row, int column) {&#xA;&#x9;&#x9;checkForNegativeCoordinates(row, column);&#xA;&#x9;&#x9;checkForExceedingCoordinates(row, column);&#xA;&#x9;&#x9;return matrix.get(row).get(column);&#xA;&#x9;}&#xA;&#xA;&#x9;private void checkForExceedingCoordinates(int row, int column) {&#xA;&#x9;&#x9;if (row >= rows || column >= columnCount) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;ERROR! Row or column index &quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;+ &quot;exceeded the maximum value.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#x9;//find out how to actually replace the string at element &#xA;&#x9;@Override&#xA;&#x9;public void setElement(int row, int column, String element) {&#xA;&#x9;&#x9;checkForNegativeCoordinates(row, column);&#xA;&#x9;&#x9;checkForExceedingCoordinates(row, column);&#xA;&#x9;&#x9;String elementLocation = matrix.get(row).get(column);&#xA;&#x9;&#x9;elementLocation = element;&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457098747147" sizeMeasure="59">
          <edit xsi:type="exercise:StringEdit" storedString="package interfaces;&#xA;&#xA;import java.util.ArrayList;&#xA;&#xA;public class StringGridImpl implements StringGrid {&#xA;&#xA;&#x9;//internal state&#xA;&#x9;private int rows;&#xA;&#x9;private int columnCount;&#xA;&#x9;ArrayList&lt;ArrayList&lt;String>> matrix= new ArrayList&lt;ArrayList&lt;String>>();&#xA;&#x9;String[][] matrix2; &#xA;&#x9;&#xA;&#x9;public StringGridImpl(int rows, int columnCount) {&#xA;&#x9;&#x9;checkForNegativeCoordinates(rows, columnCount);&#xA;&#x9;&#x9;this.rows = rows;&#xA;&#x9;&#x9;this.columnCount = columnCount;&#xA;&#x9;&#x9;matrix2 = new String[rows][columnCount];&#xA;&#x9;}&#xA;&#xA;&#x9;private void checkForNegativeCoordinates(int rows, int columnCount) {&#xA;&#x9;&#x9;if (rows &lt; 0 || columnCount &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;ERROR! Row and column count &quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;+ &quot;cannot be a negative integer.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public int getRowCount() {&#xA;&#x9;&#x9;return rows;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getColumnCount() {&#xA;&#x9;&#x9;return columnCount;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public String getElement(int row, int column) {&#xA;&#x9;&#x9;checkForNegativeCoordinates(row, column);&#xA;&#x9;&#x9;checkForExceedingCoordinates(row, column);&#xA;&#x9;&#x9;return matrix2[row][column];&#xA;&#x9;}&#xA;&#xA;&#x9;private void checkForExceedingCoordinates(int row, int column) {&#xA;&#x9;&#x9;if (row >= rows || column >= columnCount) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;ERROR! Row or column index &quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;+ &quot;exceeded the maximum value.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#x9;//find out how to actually replace the string at element &#xA;&#x9;@Override&#xA;&#x9;public void setElement(int row, int column, String element) {&#xA;&#x9;&#x9;checkForNegativeCoordinates(row, column);&#xA;&#x9;&#x9;checkForExceedingCoordinates(row, column);&#xA;&#x9;&#x9;matrix2[row][column] = element;&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457098759866" sizeMeasure="56" errorCount="2">
          <edit xsi:type="exercise:StringEdit" storedString="package interfaces;&#xA;&#xA;public class StringGridImpl implements StringGrid {&#xA;&#xA;&#x9;//internal state&#xA;&#x9;private int rows;&#xA;&#x9;private int columnCount;&#xA;&#x9;String[][] matrix2; &#xA;&#x9;&#xA;&#x9;public StringGridImpl(int rows, int columnCount) {&#xA;&#x9;&#x9;checkForNegativeCoordinates(rows, columnCount);&#xA;&#x9;&#x9;this.rows = rows;&#xA;&#x9;&#x9;this.columnCount = columnCount;&#xA;&#x9;&#x9;matrix2 = new String[rows][columnCount];&#xA;&#x9;}&#xA;&#xA;&#x9;private void checkForNegativeCoordinates(int rows, int columnCount) {&#xA;&#x9;&#x9;if (rows &lt; 0 || columnCount &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;ERROR! Row and column count &quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;+ &quot;cannot be a negative integer.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public int getRowCount() {&#xA;&#x9;&#x9;return rows;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getColumnCount() {&#xA;&#x9;&#x9;return columnCount;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public String getElement(int row, int column) {&#xA;&#x9;&#x9;checkForNegativeCoordinates(row, column);&#xA;&#x9;&#x9;checkForExceedingCoordinates(row, column);&#xA;&#x9;&#x9;return matrix2[row][column];&#xA;&#x9;}&#xA;&#xA;&#x9;private void checkForExceedingCoordinates(int row, int column) {&#xA;&#x9;&#x9;if (row >= rows || column >= columnCount) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;ERROR! Row or column index &quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;+ &quot;exceeded the maximum value.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#x9;//find out how to actually replace the string at element &#xA;&#x9;@Override&#xA;&#x9;public void setElement(int row, int column, String element) {&#xA;&#x9;&#x9;checkForNegativeCoordinates(row, column);&#xA;&#x9;&#x9;checkForExceedingCoordinates(row, column);&#xA;&#x9;&#x9;matrix2[row][column] = element;&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457100828581" sizeMeasure="68" errorCount="7">
          <edit xsi:type="exercise:StringEdit" storedString="package interfaces;&#xA;&#xA;public class StringGridImpl implements StringGrid {&#xA;&#xA;&#x9;//internal state&#xA;&#x9;private int rows;&#xA;&#x9;private int columnCount;&#xA;&#x9;String[][] matrix2; &#xA;&#x9;&#xA;&#x9;public StringGridImpl(int rows, int columnCount) {&#xA;&#x9;&#x9;checkForNegativeCoordinates(rows, columnCount);&#xA;&#x9;&#x9;this.rows = rows;&#xA;&#x9;&#x9;this.columnCount = columnCount;&#xA;&#x9;&#x9;matrix2 = new String[rows][columnCount];&#xA;&#x9;}&#xA;&#xA;&#x9;private void checkForNegativeCoordinates(int rows, int columnCount) {&#xA;&#x9;&#x9;if (rows &lt; 0 || columnCount &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;ERROR! Row and column count &quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;+ &quot;cannot be a negative integer.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public int getRowCount() {&#xA;&#x9;&#x9;return rows;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getColumnCount() {&#xA;&#x9;&#x9;return columnCount;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public String getElement(int row, int column) {&#xA;&#x9;&#x9;checkForNegativeCoordinates(row, column);&#xA;&#x9;&#x9;checkForExceedingCoordinates(row, column);&#xA;&#x9;&#x9;return matrix2[row][column];&#xA;&#x9;}&#xA;&#xA;&#x9;private void checkForExceedingCoordinates(int row, int column) {&#xA;&#x9;&#x9;if (row >= rows || column >= columnCount) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;ERROR! Row or column index &quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;+ &quot;exceeded the maximum value.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#x9;//find out how to actually replace the string at element &#xA;&#x9;@Override&#xA;&#x9;public void setElement(int row, int column, String element) {&#xA;&#x9;&#x9;checkForNegativeCoordinates(row, column);&#xA;&#x9;&#x9;checkForExceedingCoordinates(row, column);&#xA;&#x9;&#x9;matrix2[row][column] = element;&#xA;&#x9;}&#xA;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;&#x9;StringGrid grid = new StringGridImpl(2,2);&#xA;&#x9;&#x9;&#x9;grid.setElement(0, 0, &quot;Hei[0,0]&quot;);&#xA;&#x9;&#x9;&#x9;grid.setElement(1, 0, &quot;Hei[1,0]&quot;);&#xA;&#x9;&#x9;&#x9;grid.setElement(0, 1, &quot;Hei[0,1]&quot;);&#xA;&#x9;&#x9;&#x9;grid.setElement(1, 1, &quot;Hei[1,1]&quot;);&#xA;&#x9;&#x9;&#x9;for (String element : grid) {&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457100850184" sizeMeasure="66" errorCount="3">
          <edit xsi:type="exercise:StringEdit" storedString="package interfaces;&#xA;&#xA;public class StringGridImpl implements StringGrid {&#xA;&#xA;&#x9;//internal state&#xA;&#x9;private int rows;&#xA;&#x9;private int columnCount;&#xA;&#x9;String[][] matrix2; &#xA;&#x9;&#xA;&#x9;public StringGridImpl(int rows, int columnCount) {&#xA;&#x9;&#x9;checkForNegativeCoordinates(rows, columnCount);&#xA;&#x9;&#x9;this.rows = rows;&#xA;&#x9;&#x9;this.columnCount = columnCount;&#xA;&#x9;&#x9;matrix2 = new String[rows][columnCount];&#xA;&#x9;}&#xA;&#xA;&#x9;private void checkForNegativeCoordinates(int rows, int columnCount) {&#xA;&#x9;&#x9;if (rows &lt; 0 || columnCount &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;ERROR! Row and column count &quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;+ &quot;cannot be a negative integer.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public int getRowCount() {&#xA;&#x9;&#x9;return rows;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getColumnCount() {&#xA;&#x9;&#x9;return columnCount;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public String getElement(int row, int column) {&#xA;&#x9;&#x9;checkForNegativeCoordinates(row, column);&#xA;&#x9;&#x9;checkForExceedingCoordinates(row, column);&#xA;&#x9;&#x9;return matrix2[row][column];&#xA;&#x9;}&#xA;&#xA;&#x9;private void checkForExceedingCoordinates(int row, int column) {&#xA;&#x9;&#x9;if (row >= rows || column >= columnCount) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;ERROR! Row or column index &quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;+ &quot;exceeded the maximum value.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#x9;//find out how to actually replace the string at element &#xA;&#x9;@Override&#xA;&#x9;public void setElement(int row, int column, String element) {&#xA;&#x9;&#x9;checkForNegativeCoordinates(row, column);&#xA;&#x9;&#x9;checkForExceedingCoordinates(row, column);&#xA;&#x9;&#x9;matrix2[row][column] = element;&#xA;&#x9;}&#xA;&#xA;&#x9;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;&#x9;StringGrid grid = new StringGridImpl(2,2);&#xA;&#x9;&#x9;&#x9;grid.setElement(0, 0, &quot;Hei[0,0]&quot;);&#xA;&#x9;&#x9;&#x9;grid.setElement(1, 0, &quot;Hei[1,0]&quot;);&#xA;&#x9;&#x9;&#x9;grid.setElement(0, 1, &quot;Hei[0,1]&quot;);&#xA;&#x9;&#x9;&#x9;grid.setElement(1, 1, &quot;Hei[1,1]&quot;);&#xA;&#x9;&#x9;&#x9;for (String element : grid) {&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457100908999" sizeMeasure="80" errorCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package interfaces;&#xA;&#xA;public class StringGridImpl implements StringGrid {&#xA;&#xA;&#x9;//internal state&#xA;&#x9;private int rows;&#xA;&#x9;private int columnCount;&#xA;&#x9;String[][] matrix2; &#xA;&#x9;&#xA;&#x9;public StringGridImpl(int rows, int columnCount) {&#xA;&#x9;&#x9;checkForNegativeCoordinates(rows, columnCount);&#xA;&#x9;&#x9;this.rows = rows;&#xA;&#x9;&#x9;this.columnCount = columnCount;&#xA;&#x9;&#x9;matrix2 = new String[rows][columnCount];&#xA;&#x9;}&#xA;&#xA;&#x9;private void checkForNegativeCoordinates(int rows, int columnCount) {&#xA;&#x9;&#x9;if (rows &lt; 0 || columnCount &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;ERROR! Row and column count &quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;+ &quot;cannot be a negative integer.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public int getRowCount() {&#xA;&#x9;&#x9;return rows;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getColumnCount() {&#xA;&#x9;&#x9;return columnCount;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public String getElement(int row, int column) {&#xA;&#x9;&#x9;checkForNegativeCoordinates(row, column);&#xA;&#x9;&#x9;checkForExceedingCoordinates(row, column);&#xA;&#x9;&#x9;return matrix2[row][column];&#xA;&#x9;}&#xA;&#xA;&#x9;private void checkForExceedingCoordinates(int row, int column) {&#xA;&#x9;&#x9;if (row >= rows || column >= columnCount) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;ERROR! Row or column index &quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;+ &quot;exceeded the maximum value.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#x9;//find out how to actually replace the string at element &#xA;&#x9;@Override&#xA;&#x9;public void setElement(int row, int column, String element) {&#xA;&#x9;&#x9;checkForNegativeCoordinates(row, column);&#xA;&#x9;&#x9;checkForExceedingCoordinates(row, column);&#xA;&#x9;&#x9;matrix2[row][column] = element;&#xA;&#x9;}&#xA;&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public boolean hasNext() {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;return false;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public String next() {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;return null;&#xA;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;StringGrid grid = new StringGridImpl(2,2);&#xA;&#x9;&#x9;grid.setElement(0, 0, &quot;Hei[0,0]&quot;);&#xA;&#x9;&#x9;grid.setElement(1, 0, &quot;Hei[1,0]&quot;);&#xA;&#x9;&#x9;grid.setElement(0, 1, &quot;Hei[0,1]&quot;);&#xA;&#x9;&#x9;grid.setElement(1, 1, &quot;Hei[1,1]&quot;);&#xA;&#x9;&#x9;for (String element : grid) {&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457101186601" sizeMeasure="69" errorCount="6">
          <edit xsi:type="exercise:StringEdit" storedString="package interfaces;&#xA;&#xA;public class StringGridImpl implements StringGrid {&#xA;&#xA;&#x9;//internal state&#xA;&#x9;private int rows;&#xA;&#x9;private int columnCount;&#xA;&#x9;String[][] matrix2; &#xA;&#x9;&#xA;&#x9;public StringGridImpl(int rows, int columnCount) {&#xA;&#x9;&#x9;checkForNegativeCoordinates(rows, columnCount);&#xA;&#x9;&#x9;this.rows = rows;&#xA;&#x9;&#x9;this.columnCount = columnCount;&#xA;&#x9;&#x9;matrix2 = new String[rows][columnCount];&#xA;&#x9;&#x9;Iterator&lt;String> &#xA;&#x9;}&#xA;&#xA;&#x9;private void checkForNegativeCoordinates(int rows, int columnCount) {&#xA;&#x9;&#x9;if (rows &lt; 0 || columnCount &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;ERROR! Row and column count &quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;+ &quot;cannot be a negative integer.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public int getRowCount() {&#xA;&#x9;&#x9;return rows;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getColumnCount() {&#xA;&#x9;&#x9;return columnCount;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public String getElement(int row, int column) {&#xA;&#x9;&#x9;checkForNegativeCoordinates(row, column);&#xA;&#x9;&#x9;checkForExceedingCoordinates(row, column);&#xA;&#x9;&#x9;return matrix2[row][column];&#xA;&#x9;}&#xA;&#xA;&#x9;private void checkForExceedingCoordinates(int row, int column) {&#xA;&#x9;&#x9;if (row >= rows || column >= columnCount) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;ERROR! Row or column index &quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;+ &quot;exceeded the maximum value.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#x9;//find out how to actually replace the string at element &#xA;&#x9;@Override&#xA;&#x9;public void setElement(int row, int column, String element) {&#xA;&#x9;&#x9;checkForNegativeCoordinates(row, column);&#xA;&#x9;&#x9;checkForExceedingCoordinates(row, column);&#xA;&#x9;&#x9;matrix2[row][column] = element;&#xA;&#x9;}&#xA;&#xA;&#x9;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;StringGrid grid = new StringGridImpl(2,2);&#xA;&#x9;&#x9;grid.setElement(0, 0, &quot;Hei[0,0]&quot;);&#xA;&#x9;&#x9;grid.setElement(1, 0, &quot;Hei[1,0]&quot;);&#xA;&#x9;&#x9;grid.setElement(0, 1, &quot;Hei[0,1]&quot;);&#xA;&#x9;&#x9;grid.setElement(1, 1, &quot;Hei[1,1]&quot;);&#xA;&#x9;&#x9;for (String element : grid) {&#xA;&#x9;&#x9;&#x9;System.out.println(element);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457101215465" sizeMeasure="69" errorCount="4">
          <edit xsi:type="exercise:StringEdit" storedString="package interfaces;&#xA;&#xA;public class StringGridImpl implements StringGrid {&#xA;&#xA;&#x9;//internal state&#xA;&#x9;private int rows;&#xA;&#x9;private int columnCount;&#xA;&#x9;String[][] matrix2; &#xA;&#x9;&#xA;&#x9;public StringGridImpl(int rows, int columnCount) {&#xA;&#x9;&#x9;checkForNegativeCoordinates(rows, columnCount);&#xA;&#x9;&#x9;this.rows = rows;&#xA;&#x9;&#x9;this.columnCount = columnCount;&#xA;&#x9;&#x9;matrix2 = new String[rows][columnCount];&#xA;&#x9;&#x9;Iterator&lt;String> &#xA;&#x9;}&#xA;&#xA;&#x9;private void checkForNegativeCoordinates(int rows, int columnCount) {&#xA;&#x9;&#x9;if (rows &lt; 0 || columnCount &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;ERROR! Row and column count &quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;+ &quot;cannot be a negative integer.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public int getRowCount() {&#xA;&#x9;&#x9;return rows;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getColumnCount() {&#xA;&#x9;&#x9;return columnCount;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public String getElement(int row, int column) {&#xA;&#x9;&#x9;checkForNegativeCoordinates(row, column);&#xA;&#x9;&#x9;checkForExceedingCoordinates(row, column);&#xA;&#x9;&#x9;return matrix2[row][column];&#xA;&#x9;}&#xA;&#xA;&#x9;private void checkForExceedingCoordinates(int row, int column) {&#xA;&#x9;&#x9;if (row >= rows || column >= columnCount) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;ERROR! Row or column index &quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;+ &quot;exceeded the maximum value.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#x9;//find out how to actually replace the string at element &#xA;&#x9;@Override&#xA;&#x9;public void setElement(int row, int column, String element) {&#xA;&#x9;&#x9;checkForNegativeCoordinates(row, column);&#xA;&#x9;&#x9;checkForExceedingCoordinates(row, column);&#xA;&#x9;&#x9;matrix2[row][column] = element;&#xA;&#x9;}&#xA;&#xA;&#x9;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;StringGrid grid = new StringGridImpl(2,2);&#xA;&#x9;&#x9;grid.setElement(0, 0, &quot;Hei[0,0]&quot;);&#xA;&#x9;&#x9;grid.setElement(1, 0, &quot;Hei[1,0]&quot;);&#xA;&#x9;&#x9;grid.setElement(0, 1, &quot;Hei[0,1]&quot;);&#xA;&#x9;&#x9;grid.setElement(1, 1, &quot;Hei[1,1]&quot;);&#xA;&#x9;&#x9;for (String element : grid) {&#xA;&#x9;&#x9;&#x9;System.out.println(element);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457101271798" sizeMeasure="76" errorCount="3">
          <edit xsi:type="exercise:StringEdit" storedString="package interfaces;&#xA;&#xA;import java.util.Iterator;&#xA;&#xA;public class StringGridImpl implements StringGrid {&#xA;&#xA;&#x9;//internal state&#xA;&#x9;private int rows;&#xA;&#x9;private int columnCount;&#xA;&#x9;String[][] matrix2; &#xA;&#x9;&#xA;&#x9;public StringGridImpl(int rows, int columnCount) {&#xA;&#x9;&#x9;checkForNegativeCoordinates(rows, columnCount);&#xA;&#x9;&#x9;this.rows = rows;&#xA;&#x9;&#x9;this.columnCount = columnCount;&#xA;&#x9;&#x9;matrix2 = new String[rows][columnCount];&#xA;&#x9;&#x9;Iterator&lt;String> &#xA;&#x9;}&#xA;&#xA;&#x9;private void checkForNegativeCoordinates(int rows, int columnCount) {&#xA;&#x9;&#x9;if (rows &lt; 0 || columnCount &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;ERROR! Row and column count &quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;+ &quot;cannot be a negative integer.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public int getRowCount() {&#xA;&#x9;&#x9;return rows;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getColumnCount() {&#xA;&#x9;&#x9;return columnCount;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public String getElement(int row, int column) {&#xA;&#x9;&#x9;checkForNegativeCoordinates(row, column);&#xA;&#x9;&#x9;checkForExceedingCoordinates(row, column);&#xA;&#x9;&#x9;return matrix2[row][column];&#xA;&#x9;}&#xA;&#xA;&#x9;private void checkForExceedingCoordinates(int row, int column) {&#xA;&#x9;&#x9;if (row >= rows || column >= columnCount) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;ERROR! Row or column index &quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;+ &quot;exceeded the maximum value.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#x9;//find out how to actually replace the string at element &#xA;&#x9;@Override&#xA;&#x9;public void setElement(int row, int column, String element) {&#xA;&#x9;&#x9;checkForNegativeCoordinates(row, column);&#xA;&#x9;&#x9;checkForExceedingCoordinates(row, column);&#xA;&#x9;&#x9;matrix2[row][column] = element;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public Iterator&lt;String> iterator() {&#xA;&#x9;&#x9;return StringGridIterator(this);&#xA;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;StringGrid grid = new StringGridImpl(2,2);&#xA;&#x9;&#x9;grid.setElement(0, 0, &quot;Hei[0,0]&quot;);&#xA;&#x9;&#x9;grid.setElement(1, 0, &quot;Hei[1,0]&quot;);&#xA;&#x9;&#x9;grid.setElement(0, 1, &quot;Hei[0,1]&quot;);&#xA;&#x9;&#x9;grid.setElement(1, 1, &quot;Hei[1,1]&quot;);&#xA;&#x9;&#x9;for (String element : grid) {&#xA;&#x9;&#x9;&#x9;System.out.println(element);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457101335999" sizeMeasure="76" errorCount="2">
          <edit xsi:type="exercise:StringEdit" storedString="package interfaces;&#xA;&#xA;import java.util.Iterator;&#xA;&#xA;public class StringGridImpl implements StringGrid {&#xA;&#xA;&#x9;//internal state&#xA;&#x9;private int rows;&#xA;&#x9;private int columnCount;&#xA;&#x9;String[][] matrix2; &#xA;&#x9;&#xA;&#x9;public StringGridImpl(int rows, int columnCount) {&#xA;&#x9;&#x9;checkForNegativeCoordinates(rows, columnCount);&#xA;&#x9;&#x9;this.rows = rows;&#xA;&#x9;&#x9;this.columnCount = columnCount;&#xA;&#x9;&#x9;matrix2 = new String[rows][columnCount];&#xA;&#x9;&#x9;Iterator&lt;String> &#xA;&#x9;}&#xA;&#xA;&#x9;private void checkForNegativeCoordinates(int rows, int columnCount) {&#xA;&#x9;&#x9;if (rows &lt; 0 || columnCount &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;ERROR! Row and column count &quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;+ &quot;cannot be a negative integer.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public int getRowCount() {&#xA;&#x9;&#x9;return rows;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getColumnCount() {&#xA;&#x9;&#x9;return columnCount;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public String getElement(int row, int column) {&#xA;&#x9;&#x9;checkForNegativeCoordinates(row, column);&#xA;&#x9;&#x9;checkForExceedingCoordinates(row, column);&#xA;&#x9;&#x9;return matrix2[row][column];&#xA;&#x9;}&#xA;&#xA;&#x9;private void checkForExceedingCoordinates(int row, int column) {&#xA;&#x9;&#x9;if (row >= rows || column >= columnCount) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;ERROR! Row or column index &quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;+ &quot;exceeded the maximum value.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#x9;//find out how to actually replace the string at element &#xA;&#x9;@Override&#xA;&#x9;public void setElement(int row, int column, String element) {&#xA;&#x9;&#x9;checkForNegativeCoordinates(row, column);&#xA;&#x9;&#x9;checkForExceedingCoordinates(row, column);&#xA;&#x9;&#x9;matrix2[row][column] = element;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public Iterator&lt;String> iterator() {&#xA;&#x9;&#x9;return new StringGridIterator(this, true);&#xA;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;StringGrid grid = new StringGridImpl(2,2);&#xA;&#x9;&#x9;grid.setElement(0, 0, &quot;Hei[0,0]&quot;);&#xA;&#x9;&#x9;grid.setElement(1, 0, &quot;Hei[1,0]&quot;);&#xA;&#x9;&#x9;grid.setElement(0, 1, &quot;Hei[0,1]&quot;);&#xA;&#x9;&#x9;grid.setElement(1, 1, &quot;Hei[1,1]&quot;);&#xA;&#x9;&#x9;for (String element : grid) {&#xA;&#x9;&#x9;&#x9;System.out.println(element);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457101345179" sizeMeasure="75">
          <edit xsi:type="exercise:StringEdit" storedString="package interfaces;&#xA;&#xA;import java.util.Iterator;&#xA;&#xA;public class StringGridImpl implements StringGrid {&#xA;&#xA;&#x9;//internal state&#xA;&#x9;private int rows;&#xA;&#x9;private int columnCount;&#xA;&#x9;String[][] matrix2; &#xA;&#x9;&#xA;&#x9;public StringGridImpl(int rows, int columnCount) {&#xA;&#x9;&#x9;checkForNegativeCoordinates(rows, columnCount);&#xA;&#x9;&#x9;this.rows = rows;&#xA;&#x9;&#x9;this.columnCount = columnCount;&#xA;&#x9;&#x9;matrix2 = new String[rows][columnCount];&#xA;&#x9;}&#xA;&#xA;&#x9;private void checkForNegativeCoordinates(int rows, int columnCount) {&#xA;&#x9;&#x9;if (rows &lt; 0 || columnCount &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;ERROR! Row and column count &quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;+ &quot;cannot be a negative integer.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public int getRowCount() {&#xA;&#x9;&#x9;return rows;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getColumnCount() {&#xA;&#x9;&#x9;return columnCount;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public String getElement(int row, int column) {&#xA;&#x9;&#x9;checkForNegativeCoordinates(row, column);&#xA;&#x9;&#x9;checkForExceedingCoordinates(row, column);&#xA;&#x9;&#x9;return matrix2[row][column];&#xA;&#x9;}&#xA;&#xA;&#x9;private void checkForExceedingCoordinates(int row, int column) {&#xA;&#x9;&#x9;if (row >= rows || column >= columnCount) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;ERROR! Row or column index &quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;+ &quot;exceeded the maximum value.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#x9;//find out how to actually replace the string at element &#xA;&#x9;@Override&#xA;&#x9;public void setElement(int row, int column, String element) {&#xA;&#x9;&#x9;checkForNegativeCoordinates(row, column);&#xA;&#x9;&#x9;checkForExceedingCoordinates(row, column);&#xA;&#x9;&#x9;matrix2[row][column] = element;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public Iterator&lt;String> iterator() {&#xA;&#x9;&#x9;return new StringGridIterator(this, true);&#xA;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;StringGrid grid = new StringGridImpl(2,2);&#xA;&#x9;&#x9;grid.setElement(0, 0, &quot;Hei[0,0]&quot;);&#xA;&#x9;&#x9;grid.setElement(1, 0, &quot;Hei[1,0]&quot;);&#xA;&#x9;&#x9;grid.setElement(0, 1, &quot;Hei[0,1]&quot;);&#xA;&#x9;&#x9;grid.setElement(1, 1, &quot;Hei[1,1]&quot;);&#xA;&#x9;&#x9;for (String element : grid) {&#xA;&#x9;&#x9;&#x9;System.out.println(element);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457101656147" sizeMeasure="82">
          <edit xsi:type="exercise:StringEdit" storedString="package interfaces;&#xA;&#xA;import java.util.Arrays;&#xA;import java.util.Iterator;&#xA;&#xA;public class StringGridImpl implements StringGrid {&#xA;&#xA;&#x9;//internal state&#xA;&#x9;private int rows;&#xA;&#x9;private int columnCount;&#xA;&#x9;String[][] matrix2; &#xA;&#x9;&#xA;&#x9;public StringGridImpl(int rows, int columnCount) {&#xA;&#x9;&#x9;checkForNegativeCoordinates(rows, columnCount);&#xA;&#x9;&#x9;this.rows = rows;&#xA;&#x9;&#x9;this.columnCount = columnCount;&#xA;&#x9;&#x9;matrix2 = new String[rows][columnCount];&#xA;&#x9;}&#xA;&#xA;&#x9;private void checkForNegativeCoordinates(int rows, int columnCount) {&#xA;&#x9;&#x9;if (rows &lt; 0 || columnCount &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;ERROR! Row and column count &quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;+ &quot;cannot be a negative integer.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public int getRowCount() {&#xA;&#x9;&#x9;return rows;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getColumnCount() {&#xA;&#x9;&#x9;return columnCount;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public String getElement(int row, int column) {&#xA;&#x9;&#x9;checkForNegativeCoordinates(row, column);&#xA;&#x9;&#x9;checkForExceedingCoordinates(row, column);&#xA;&#x9;&#x9;return matrix2[row][column];&#xA;&#x9;}&#xA;&#xA;&#x9;private void checkForExceedingCoordinates(int row, int column) {&#xA;&#x9;&#x9;if (row >= rows || column >= columnCount) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;ERROR! Row or column index &quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;+ &quot;exceeded the maximum value.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#x9;//find out how to actually replace the string at element &#xA;&#x9;@Override&#xA;&#x9;public void setElement(int row, int column, String element) {&#xA;&#x9;&#x9;checkForNegativeCoordinates(row, column);&#xA;&#x9;&#x9;checkForExceedingCoordinates(row, column);&#xA;&#x9;&#x9;matrix2[row][column] = element;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public Iterator&lt;String> iterator() {&#xA;&#x9;&#x9;return new StringGridIterator(this, true);&#xA;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;StringGrid grid = new StringGridImpl(2,2);&#xA;&#x9;&#x9;grid.setElement(0, 0, &quot;Hei[0,0]&quot;);&#xA;&#x9;&#x9;grid.setElement(1, 0, &quot;Hei[1,0]&quot;);&#xA;&#x9;&#x9;grid.setElement(0, 1, &quot;Hei[0,1]&quot;);&#xA;&#x9;&#x9;grid.setElement(1, 1, &quot;Hei[1,1]&quot;);&#xA;&#x9;&#x9;for (String element : grid) {&#xA;&#x9;&#x9;&#x9;System.out.println(element);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public String toString() {&#xA;&#x9;&#x9;return &quot;StringGridImpl [rows=&quot; + rows + &quot;, columnCount=&quot; + columnCount + &quot;, matrix2=&quot; + Arrays.toString(matrix2)&#xA;&#x9;&#x9;&#x9;&#x9;+ &quot;]&quot;;&#xA;&#x9;}&#xA;&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457101803417" sizeMeasure="82">
          <edit xsi:type="exercise:StringEdit" storedString="package interfaces;&#xA;&#xA;import java.util.Arrays;&#xA;import java.util.Iterator;&#xA;&#xA;public class StringGridImpl implements StringGrid {&#xA;&#xA;&#x9;//internal state&#xA;&#x9;private int rows;&#xA;&#x9;private int columnCount;&#xA;&#x9;String[][] matrix2; &#xA;&#x9;&#xA;&#x9;public StringGridImpl(int rows, int columnCount) {&#xA;&#x9;&#x9;checkForNegativeCoordinates(rows, columnCount);&#xA;&#x9;&#x9;this.rows = rows;&#xA;&#x9;&#x9;this.columnCount = columnCount;&#xA;&#x9;&#x9;matrix2 = new String[rows][columnCount];&#xA;&#x9;}&#xA;&#xA;&#x9;private void checkForNegativeCoordinates(int rows, int columnCount) {&#xA;&#x9;&#x9;if (rows &lt; 0 || columnCount &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;ERROR! Row and column count &quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;+ &quot;cannot be a negative integer.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public int getRowCount() {&#xA;&#x9;&#x9;return rows;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getColumnCount() {&#xA;&#x9;&#x9;return columnCount;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public String getElement(int row, int column) {&#xA;&#x9;&#x9;checkForNegativeCoordinates(row, column);&#xA;&#x9;&#x9;checkForExceedingCoordinates(row, column);&#xA;&#x9;&#x9;return matrix2[row][column];&#xA;&#x9;}&#xA;&#xA;&#x9;private void checkForExceedingCoordinates(int row, int column) {&#xA;&#x9;&#x9;if (row >= rows || column >= columnCount) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;ERROR! Row or column index &quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;+ &quot;exceeded the maximum value.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#x9;//find out how to actually replace the string at element &#xA;&#x9;@Override&#xA;&#x9;public void setElement(int row, int column, String element) {&#xA;&#x9;&#x9;checkForNegativeCoordinates(row, column);&#xA;&#x9;&#x9;checkForExceedingCoordinates(row, column);&#xA;&#x9;&#x9;matrix2[row][column] = element;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public Iterator&lt;String> iterator() {&#xA;&#x9;&#x9;return new StringGridIterator(this, false);&#xA;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;StringGrid grid = new StringGridImpl(2,2);&#xA;&#x9;&#x9;grid.setElement(0, 0, &quot;Hei[0,0]&quot;);&#xA;&#x9;&#x9;grid.setElement(1, 0, &quot;Hei[1,0]&quot;);&#xA;&#x9;&#x9;grid.setElement(0, 1, &quot;Hei[0,1]&quot;);&#xA;&#x9;&#x9;grid.setElement(1, 1, &quot;Hei[1,1]&quot;);&#xA;&#x9;&#x9;for (String element : grid) {&#xA;&#x9;&#x9;&#x9;System.out.println(element);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public String toString() {&#xA;&#x9;&#x9;return &quot;StringGridImpl [rows=&quot; + rows + &quot;, columnCount=&quot; + columnCount + &quot;, matrix2=&quot; + Arrays.toString(matrix2)&#xA;&#x9;&#x9;&#x9;&#x9;+ &quot;]&quot;;&#xA;&#x9;}&#xA;&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457101827494" sizeMeasure="82">
          <edit xsi:type="exercise:StringEdit" storedString="package interfaces;&#xA;&#xA;import java.util.Arrays;&#xA;import java.util.Iterator;&#xA;&#xA;public class StringGridImpl implements StringGrid {&#xA;&#xA;&#x9;//internal state&#xA;&#x9;private int rows;&#xA;&#x9;private int columnCount;&#xA;&#x9;String[][] matrix2; &#xA;&#x9;&#xA;&#x9;public StringGridImpl(int rows, int columnCount) {&#xA;&#x9;&#x9;checkForNegativeCoordinates(rows, columnCount);&#xA;&#x9;&#x9;this.rows = rows;&#xA;&#x9;&#x9;this.columnCount = columnCount;&#xA;&#x9;&#x9;matrix2 = new String[rows][columnCount];&#xA;&#x9;}&#xA;&#xA;&#x9;private void checkForNegativeCoordinates(int rows, int columnCount) {&#xA;&#x9;&#x9;if (rows &lt; 0 || columnCount &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;ERROR! Row and column count &quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;+ &quot;cannot be a negative integer.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public int getRowCount() {&#xA;&#x9;&#x9;return rows;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getColumnCount() {&#xA;&#x9;&#x9;return columnCount;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public String getElement(int row, int column) {&#xA;&#x9;&#x9;checkForNegativeCoordinates(row, column);&#xA;&#x9;&#x9;checkForExceedingCoordinates(row, column);&#xA;&#x9;&#x9;return matrix2[row][column];&#xA;&#x9;}&#xA;&#xA;&#x9;private void checkForExceedingCoordinates(int row, int column) {&#xA;&#x9;&#x9;if (row >= rows || column >= columnCount) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;ERROR! Row or column index &quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;+ &quot;exceeded the maximum value.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#x9;//find out how to actually replace the string at element &#xA;&#x9;@Override&#xA;&#x9;public void setElement(int row, int column, String element) {&#xA;&#x9;&#x9;checkForNegativeCoordinates(row, column);&#xA;&#x9;&#x9;checkForExceedingCoordinates(row, column);&#xA;&#x9;&#x9;matrix2[row][column] = element;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public Iterator&lt;String> iterator() {&#xA;&#x9;&#x9;return new StringGridIterator(this, true);&#xA;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;StringGrid grid = new StringGridImpl(2,2);&#xA;&#x9;&#x9;grid.setElement(0, 0, &quot;Hei[0,0]&quot;);&#xA;&#x9;&#x9;grid.setElement(1, 0, &quot;Hei[1,0]&quot;);&#xA;&#x9;&#x9;grid.setElement(0, 1, &quot;Hei[0,1]&quot;);&#xA;&#x9;&#x9;grid.setElement(1, 1, &quot;Hei[1,1]&quot;);&#xA;&#x9;&#x9;for (String element : grid) {&#xA;&#x9;&#x9;&#x9;System.out.println(element);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public String toString() {&#xA;&#x9;&#x9;return &quot;StringGridImpl [rows=&quot; + rows + &quot;, columnCount=&quot; + columnCount + &quot;, matrix2=&quot; + Arrays.toString(matrix2)&#xA;&#x9;&#x9;&#x9;&#x9;+ &quot;]&quot;;&#xA;&#x9;}&#xA;&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457103038166" sizeMeasure="91">
          <edit xsi:type="exercise:StringEdit" storedString="package interfaces;&#xA;&#xA;import java.util.Arrays;&#xA;import java.util.Iterator;&#xA;&#xA;public class StringGridImpl implements StringGrid {&#xA;&#xA;&#x9;//internal state&#xA;&#x9;private int rows;&#xA;&#x9;private int columnCount;&#xA;&#x9;String[][] matrix2; &#xA;&#x9;&#xA;&#x9;public StringGridImpl(int rows, int columnCount) {&#xA;&#x9;&#x9;checkForNegativeCoordinates(rows, columnCount);&#xA;&#x9;&#x9;this.rows = rows;&#xA;&#x9;&#x9;this.columnCount = columnCount;&#xA;&#x9;&#x9;matrix2 = new String[rows][columnCount];&#xA;&#x9;}&#xA;&#xA;&#x9;private void checkForNegativeCoordinates(int rows, int columnCount) {&#xA;&#x9;&#x9;if (rows &lt; 0 || columnCount &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;ERROR! Row and column count &quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;+ &quot;cannot be a negative integer.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public int getRowCount() {&#xA;&#x9;&#x9;return rows;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getColumnCount() {&#xA;&#x9;&#x9;return columnCount;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public String getElement(int row, int column) {&#xA;&#x9;&#x9;checkForNegativeCoordinates(row, column);&#xA;&#x9;&#x9;checkForExceedingCoordinates(row, column);&#xA;&#x9;&#x9;return matrix2[row][column];&#xA;&#x9;}&#xA;&#xA;&#x9;private void checkForExceedingCoordinates(int row, int column) {&#xA;&#x9;&#x9;if (row >= rows || column >= columnCount) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;ERROR! Row or column index &quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;+ &quot;exceeded the maximum value.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#x9;//find out how to actually replace the string at element &#xA;&#x9;@Override&#xA;&#x9;public void setElement(int row, int column, String element) {&#xA;&#x9;&#x9;checkForNegativeCoordinates(row, column);&#xA;&#x9;&#x9;checkForExceedingCoordinates(row, column);&#xA;&#x9;&#x9;matrix2[row][column] = element;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public Iterator&lt;String> iterator() {&#xA;&#x9;&#x9;return new StringGridIterator(this, true);&#xA;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;//&#x9;&#x9;StringGrid grid = new StringGridImpl(2,2);&#xA;//&#x9;&#x9;grid.setElement(0, 0, &quot;Hei[0,0]&quot;);&#xA;//&#x9;&#x9;grid.setElement(1, 0, &quot;Hei[1,0]&quot;);&#xA;//&#x9;&#x9;grid.setElement(0, 1, &quot;Hei[0,1]&quot;);&#xA;//&#x9;&#x9;grid.setElement(1, 1, &quot;Hei[1,1]&quot;);&#xA;//&#x9;&#x9;for (String element : grid) {&#xA;//&#x9;&#x9;&#x9;System.out.println(element);&#xA;//&#x9;&#x9;}&#xA;&#x9;&#x9;String[][] matrix = new String[2][2];&#xA;&#x9;&#x9;matrix[0][0] = &quot;1&quot;;&#xA;&#x9;&#x9;matrix[0][1] = &quot;2&quot;;&#xA;&#x9;&#x9;matrix[1][0] = &quot;3&quot;;&#xA;&#x9;&#x9;matrix[1][1] = &quot;4&quot;;&#xA;&#x9;&#x9;System.out.println(matrix[0][0]);&#xA;&#x9;&#x9;System.out.println(matrix[0][1]);&#xA;&#x9;&#x9;System.out.println(matrix[1][0]);&#xA;&#x9;&#x9;System.out.println(matrix[1][1]);&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public String toString() {&#xA;&#x9;&#x9;return &quot;StringGridImpl [rows=&quot; + rows + &quot;, columnCount=&quot; + columnCount + &quot;, matrix2=&quot; + Arrays.toString(matrix2)&#xA;&#x9;&#x9;&#x9;&#x9;+ &quot;]&quot;;&#xA;&#x9;}&#xA;&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457103102404" sizeMeasure="92">
          <edit xsi:type="exercise:StringEdit" storedString="package interfaces;&#xA;&#xA;import java.util.Arrays;&#xA;import java.util.Iterator;&#xA;&#xA;public class StringGridImpl implements StringGrid {&#xA;&#xA;&#x9;//internal state&#xA;&#x9;private int rows;&#xA;&#x9;private int columnCount;&#xA;&#x9;String[][] matrix2; &#xA;&#x9;&#xA;&#x9;public StringGridImpl(int rows, int columnCount) {&#xA;&#x9;&#x9;checkForNegativeCoordinates(rows, columnCount);&#xA;&#x9;&#x9;this.rows = rows;&#xA;&#x9;&#x9;this.columnCount = columnCount;&#xA;&#x9;&#x9;matrix2 = new String[rows][columnCount];&#xA;&#x9;}&#xA;&#xA;&#x9;private void checkForNegativeCoordinates(int rows, int columnCount) {&#xA;&#x9;&#x9;if (rows &lt; 0 || columnCount &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;ERROR! Row and column count &quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;+ &quot;cannot be a negative integer.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public int getRowCount() {&#xA;&#x9;&#x9;return rows;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getColumnCount() {&#xA;&#x9;&#x9;return columnCount;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public String getElement(int row, int column) {&#xA;&#x9;&#x9;checkForNegativeCoordinates(row, column);&#xA;&#x9;&#x9;checkForExceedingCoordinates(row, column);&#xA;&#x9;&#x9;return matrix2[row][column];&#xA;&#x9;}&#xA;&#xA;&#x9;private void checkForExceedingCoordinates(int row, int column) {&#xA;&#x9;&#x9;if (row >= rows || column >= columnCount) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;ERROR! Row or column index &quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;+ &quot;exceeded the maximum value.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#x9;//find out how to actually replace the string at element &#xA;&#x9;@Override&#xA;&#x9;public void setElement(int row, int column, String element) {&#xA;&#x9;&#x9;checkForNegativeCoordinates(row, column);&#xA;&#x9;&#x9;checkForExceedingCoordinates(row, column);&#xA;&#x9;&#x9;matrix2[row][column] = element;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public Iterator&lt;String> iterator() {&#xA;&#x9;&#x9;return new StringGridIterator(this, true);&#xA;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;//&#x9;&#x9;StringGrid grid = new StringGridImpl(2,2);&#xA;//&#x9;&#x9;grid.setElement(0, 0, &quot;Hei[0,0]&quot;);&#xA;//&#x9;&#x9;grid.setElement(1, 0, &quot;Hei[1,0]&quot;);&#xA;//&#x9;&#x9;grid.setElement(0, 1, &quot;Hei[0,1]&quot;);&#xA;//&#x9;&#x9;grid.setElement(1, 1, &quot;Hei[1,1]&quot;);&#xA;//&#x9;&#x9;for (String element : grid) {&#xA;//&#x9;&#x9;&#x9;System.out.println(element);&#xA;//&#x9;&#x9;}&#xA;&#x9;&#x9;String[][] matrix = new String[2][2];&#xA;&#x9;&#x9;matrix[0][0] = &quot;1&quot;;&#xA;&#x9;&#x9;matrix[0][1] = &quot;2&quot;;&#xA;&#x9;&#x9;matrix[1][0] = &quot;3&quot;;&#xA;&#x9;&#x9;matrix[1][1] = &quot;4&quot;;&#xA;&#x9;&#x9;for (int i = 0; i &lt; 2; i++) {&#xA;&#x9;&#x9;&#x9;for (int j = 0; j &lt; 2; j++) {&#xA;&#x9;&#x9;&#x9;&#x9;System.out.println(matrix[i][j]);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public String toString() {&#xA;&#x9;&#x9;return &quot;StringGridImpl [rows=&quot; + rows + &quot;, columnCount=&quot; + columnCount + &quot;, matrix2=&quot; + Arrays.toString(matrix2)&#xA;&#x9;&#x9;&#x9;&#x9;+ &quot;]&quot;;&#xA;&#x9;}&#xA;&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457103228929" sizeMeasure="92">
          <edit xsi:type="exercise:StringEdit" storedString="package interfaces;&#xA;&#xA;import java.util.Arrays;&#xA;import java.util.Iterator;&#xA;&#xA;public class StringGridImpl implements StringGrid {&#xA;&#xA;&#x9;//internal state&#xA;&#x9;private int rows;&#xA;&#x9;private int columnCount;&#xA;&#x9;String[][] matrix2; &#xA;&#x9;&#xA;&#x9;public StringGridImpl(int rows, int columnCount) {&#xA;&#x9;&#x9;checkForNegativeCoordinates(rows, columnCount);&#xA;&#x9;&#x9;this.rows = rows;&#xA;&#x9;&#x9;this.columnCount = columnCount;&#xA;&#x9;&#x9;matrix2 = new String[rows][columnCount];&#xA;&#x9;}&#xA;&#xA;&#x9;private void checkForNegativeCoordinates(int rows, int columnCount) {&#xA;&#x9;&#x9;if (rows &lt; 0 || columnCount &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;ERROR! Row and column count &quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;+ &quot;cannot be a negative integer.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public int getRowCount() {&#xA;&#x9;&#x9;return rows;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getColumnCount() {&#xA;&#x9;&#x9;return columnCount;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public String getElement(int row, int column) {&#xA;&#x9;&#x9;checkForNegativeCoordinates(row, column);&#xA;&#x9;&#x9;checkForExceedingCoordinates(row, column);&#xA;&#x9;&#x9;return matrix2[row][column];&#xA;&#x9;}&#xA;&#xA;&#x9;private void checkForExceedingCoordinates(int row, int column) {&#xA;&#x9;&#x9;if (row >= rows || column >= columnCount) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;ERROR! Row or column index &quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;+ &quot;exceeded the maximum value.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#x9;//find out how to actually replace the string at element &#xA;&#x9;@Override&#xA;&#x9;public void setElement(int row, int column, String element) {&#xA;&#x9;&#x9;checkForNegativeCoordinates(row, column);&#xA;&#x9;&#x9;checkForExceedingCoordinates(row, column);&#xA;&#x9;&#x9;matrix2[row][column] = element;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public Iterator&lt;String> iterator() {&#xA;&#x9;&#x9;return new StringGridIterator(this, true);&#xA;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;StringGrid grid = new StringGridImpl(2,2);&#xA;&#x9;&#x9;grid.setElement(0, 0, &quot;Hei[0,0]&quot;);&#xA;&#x9;&#x9;grid.setElement(1, 0, &quot;Hei[1,0]&quot;);&#xA;&#x9;&#x9;grid.setElement(0, 1, &quot;Hei[0,1]&quot;);&#xA;&#x9;&#x9;grid.setElement(1, 1, &quot;Hei[1,1]&quot;);&#xA;&#x9;&#x9;for (String element : grid) {&#xA;&#x9;&#x9;&#x9;System.out.println(element);&#xA;&#x9;&#x9;}&#xA;//&#x9;&#x9;String[][] matrix = new String[2][2];&#xA;//&#x9;&#x9;matrix[0][0] = &quot;1&quot;;&#xA;//&#x9;&#x9;matrix[0][1] = &quot;2&quot;;&#xA;//&#x9;&#x9;matrix[1][0] = &quot;3&quot;;&#xA;//&#x9;&#x9;matrix[1][1] = &quot;4&quot;;&#xA;//&#x9;&#x9;for (int i = 0; i &lt; 2; i++) {&#xA;//&#x9;&#x9;&#x9;for (int j = 0; j &lt; 2; j++) {&#xA;//&#x9;&#x9;&#x9;&#x9;System.out.println(matrix[i][j]);&#xA;//&#x9;&#x9;&#x9;}&#xA;//&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public String toString() {&#xA;&#x9;&#x9;return &quot;StringGridImpl [rows=&quot; + rows + &quot;, columnCount=&quot; + columnCount + &quot;, matrix2=&quot; + Arrays.toString(matrix2)&#xA;&#x9;&#x9;&#x9;&#x9;+ &quot;]&quot;;&#xA;&#x9;}&#xA;&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457103553823" sizeMeasure="92">
          <edit xsi:type="exercise:StringEdit" storedString="package interfaces;&#xA;&#xA;import java.util.Arrays;&#xA;import java.util.Iterator;&#xA;&#xA;public class StringGridImpl implements StringGrid {&#xA;&#xA;&#x9;//internal state&#xA;&#x9;private int rows;&#xA;&#x9;private int columnCount;&#xA;&#x9;String[][] matrix2; &#xA;&#x9;&#xA;&#x9;public StringGridImpl(int rows, int columnCount) {&#xA;&#x9;&#x9;checkForNegativeCoordinates(rows, columnCount);&#xA;&#x9;&#x9;this.rows = rows;&#xA;&#x9;&#x9;this.columnCount = columnCount;&#xA;&#x9;&#x9;matrix2 = new String[rows][columnCount];&#xA;&#x9;}&#xA;&#xA;&#x9;private void checkForNegativeCoordinates(int rows, int columnCount) {&#xA;&#x9;&#x9;if (rows &lt; 0 || columnCount &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;ERROR! Row and column count &quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;+ &quot;cannot be a negative integer.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public int getRowCount() {&#xA;&#x9;&#x9;return rows;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getColumnCount() {&#xA;&#x9;&#x9;return columnCount;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public String getElement(int row, int column) {&#xA;&#x9;&#x9;checkForNegativeCoordinates(row, column);&#xA;&#x9;&#x9;checkForExceedingCoordinates(row, column);&#xA;&#x9;&#x9;return matrix2[row][column];&#xA;&#x9;}&#xA;&#xA;&#x9;private void checkForExceedingCoordinates(int row, int column) {&#xA;&#x9;&#x9;if (row >= rows || column >= columnCount) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;ERROR! Row or column index &quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;+ &quot;exceeded the maximum value.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#x9;//find out how to actually replace the string at element &#xA;&#x9;@Override&#xA;&#x9;public void setElement(int row, int column, String element) {&#xA;&#x9;&#x9;checkForNegativeCoordinates(row, column);&#xA;&#x9;&#x9;checkForExceedingCoordinates(row, column);&#xA;&#x9;&#x9;matrix2[row][column] = element;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public Iterator&lt;String> iterator() {&#xA;&#x9;&#x9;return new StringGridIterator(this, false);&#xA;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;StringGrid grid = new StringGridImpl(2,2);&#xA;&#x9;&#x9;grid.setElement(0, 0, &quot;Hei[0,0]&quot;);&#xA;&#x9;&#x9;grid.setElement(1, 0, &quot;Hei[1,0]&quot;);&#xA;&#x9;&#x9;grid.setElement(0, 1, &quot;Hei[0,1]&quot;);&#xA;&#x9;&#x9;grid.setElement(1, 1, &quot;Hei[1,1]&quot;);&#xA;&#x9;&#x9;for (String element : grid) {&#xA;&#x9;&#x9;&#x9;System.out.println(element);&#xA;&#x9;&#x9;}&#xA;//&#x9;&#x9;String[][] matrix = new String[2][2];&#xA;//&#x9;&#x9;matrix[0][0] = &quot;1&quot;;&#xA;//&#x9;&#x9;matrix[0][1] = &quot;2&quot;;&#xA;//&#x9;&#x9;matrix[1][0] = &quot;3&quot;;&#xA;//&#x9;&#x9;matrix[1][1] = &quot;4&quot;;&#xA;//&#x9;&#x9;for (int i = 0; i &lt; 2; i++) {&#xA;//&#x9;&#x9;&#x9;for (int j = 0; j &lt; 2; j++) {&#xA;//&#x9;&#x9;&#x9;&#x9;System.out.println(matrix[i][j]);&#xA;//&#x9;&#x9;&#x9;}&#xA;//&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public String toString() {&#xA;&#x9;&#x9;return &quot;StringGridImpl [rows=&quot; + rows + &quot;, columnCount=&quot; + columnCount + &quot;, matrix2=&quot; + Arrays.toString(matrix2)&#xA;&#x9;&#x9;&#x9;&#x9;+ &quot;]&quot;;&#xA;&#x9;}&#xA;&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457103599277" sizeMeasure="71">
          <edit xsi:type="exercise:StringEdit" storedString="package interfaces;&#xA;&#xA;import java.util.Arrays;&#xA;import java.util.Iterator;&#xA;&#xA;public class StringGridImpl implements StringGrid {&#xA;&#xA;&#x9;//internal state&#xA;&#x9;private int rows;&#xA;&#x9;private int columnCount;&#xA;&#x9;String[][] matrix2; &#xA;&#x9;&#xA;&#x9;public StringGridImpl(int rows, int columnCount) {&#xA;&#x9;&#x9;checkForNegativeCoordinates(rows, columnCount);&#xA;&#x9;&#x9;this.rows = rows;&#xA;&#x9;&#x9;this.columnCount = columnCount;&#xA;&#x9;&#x9;matrix2 = new String[rows][columnCount];&#xA;&#x9;}&#xA;&#xA;&#x9;private void checkForNegativeCoordinates(int rows, int columnCount) {&#xA;&#x9;&#x9;if (rows &lt; 0 || columnCount &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;ERROR! Row and column count &quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;+ &quot;cannot be a negative integer.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public int getRowCount() {&#xA;&#x9;&#x9;return rows;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getColumnCount() {&#xA;&#x9;&#x9;return columnCount;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public String getElement(int row, int column) {&#xA;&#x9;&#x9;checkForNegativeCoordinates(row, column);&#xA;&#x9;&#x9;checkForExceedingCoordinates(row, column);&#xA;&#x9;&#x9;return matrix2[row][column];&#xA;&#x9;}&#xA;&#xA;&#x9;private void checkForExceedingCoordinates(int row, int column) {&#xA;&#x9;&#x9;if (row >= rows || column >= columnCount) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;ERROR! Row or column index &quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;+ &quot;exceeded the maximum value.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#x9;//find out how to actually replace the string at element &#xA;&#x9;@Override&#xA;&#x9;public void setElement(int row, int column, String element) {&#xA;&#x9;&#x9;checkForNegativeCoordinates(row, column);&#xA;&#x9;&#x9;checkForExceedingCoordinates(row, column);&#xA;&#x9;&#x9;matrix2[row][column] = element;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public Iterator&lt;String> iterator() {&#xA;&#x9;&#x9;return new StringGridIterator(this, false);&#xA;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public String toString() {&#xA;&#x9;&#x9;return &quot;StringGridImpl [rows=&quot; + rows + &quot;, columnCount=&quot; + columnCount + &quot;, matrix2=&quot; + Arrays.toString(matrix2)&#xA;&#x9;&#x9;&#x9;&#x9;+ &quot;]&quot;;&#xA;&#x9;}&#xA;&#xA;&#xA;}&#xA;"/>
        </attempts>
      </proposals>
    </proposals>
    <proposals exercisePart="/0/@parts.1">
      <proposals xsi:type="jdt:JdtSourceEditProposal" question="/0/@parts.1/@tasks.0/@q" answer="/0/@parts.1/@tasks.0/@a">
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457098865645" sizeMeasure="5">
          <edit xsi:type="exercise:StringEdit" storedString="package interfaces;&#xA;&#xA;public class StringGridIterator {&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457099276428" sizeMeasure="32" errorCount="1" warningCount="4">
          <edit xsi:type="exercise:StringEdit" storedString="package interfaces;&#xA;&#xA;import java.util.Iterator;&#xA;&#xA;public class StringGridIterator implements Iterator&lt;String> {&#xA;&#xA;&#x9;//internal state&#xA;&#x9;private StringGrid grid;&#xA;&#x9;private boolean rowMajor;&#xA;&#x9;private int rowIndex;&#xA;&#x9;private int columnIndex;&#xA;&#x9;&#xA;&#x9;public StringGridIterator(StringGrid grid, boolean rowMajorBoolean) {&#xA;&#x9;&#x9;this.grid = grid;&#xA;&#x9;&#x9;this.rowMajor = rowMajorBoolean;&#xA;&#x9;&#x9;this.rowIndex = 0;&#xA;&#x9;&#x9;this.columnIndex = 0;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public boolean hasNext() {&#xA;&#x9;&#x9;return ;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public String next() {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;return null;&#xA;&#x9;}&#xA;&#xA;&#x9;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457099336211" sizeMeasure="32" warningCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package interfaces;&#xA;&#xA;import java.util.Iterator;&#xA;&#xA;public class StringGridIterator implements Iterator&lt;String> {&#xA;&#xA;&#x9;//internal state&#xA;&#x9;private StringGrid grid;&#xA;&#x9;private boolean rowMajor;&#xA;&#x9;private int rowIndex;&#xA;&#x9;private int columnIndex;&#xA;&#x9;&#xA;&#x9;public StringGridIterator(StringGrid grid, boolean rowMajorBoolean) {&#xA;&#x9;&#x9;this.grid = grid;&#xA;&#x9;&#x9;this.rowMajor = rowMajorBoolean;&#xA;&#x9;&#x9;this.rowIndex = 0;&#xA;&#x9;&#x9;this.columnIndex = 0;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public boolean hasNext() {&#xA;&#x9;&#x9;return ((rowIndex &lt; grid.getRowCount()) || (columnIndex &lt; grid.getColumnCount()));&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public String next() {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;return null;&#xA;&#x9;}&#xA;&#xA;&#x9;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457099380592" sizeMeasure="34">
          <edit xsi:type="exercise:StringEdit" storedString="package interfaces;&#xA;&#xA;import java.util.Iterator;&#xA;&#xA;public class StringGridIterator implements Iterator&lt;String> {&#xA;&#xA;&#x9;//internal state&#xA;&#x9;private StringGrid grid;&#xA;&#x9;private boolean rowMajor;&#xA;&#x9;private int rowIndex;&#xA;&#x9;private int columnIndex;&#xA;&#x9;&#xA;&#x9;public StringGridIterator(StringGrid grid, boolean rowMajorBoolean) {&#xA;&#x9;&#x9;this.grid = grid;&#xA;&#x9;&#x9;this.rowMajor = rowMajorBoolean;&#xA;&#x9;&#x9;this.rowIndex = 0;&#xA;&#x9;&#x9;this.columnIndex = 0;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public boolean hasNext() {&#xA;&#x9;&#x9;return ((rowIndex &lt; grid.getRowCount()) || (columnIndex &lt; grid.getColumnCount()));&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public String next() {&#xA;&#x9;&#x9;if (rowMajor) {&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return null;&#xA;&#x9;}&#xA;&#xA;&#x9;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457099774033" sizeMeasure="43">
          <edit xsi:type="exercise:StringEdit" storedString="package interfaces;&#xA;&#xA;import java.util.Iterator;&#xA;&#xA;public class StringGridIterator implements Iterator&lt;String> {&#xA;&#xA;&#x9;//internal state&#xA;&#x9;private StringGrid grid;&#xA;&#x9;private boolean rowMajor;&#xA;&#x9;private int rowIndex;&#xA;&#x9;private int columnIndex;&#xA;&#x9;&#xA;&#x9;public StringGridIterator(StringGrid grid, boolean rowMajorBoolean) {&#xA;&#x9;&#x9;this.grid = grid;&#xA;&#x9;&#x9;this.rowMajor = rowMajorBoolean;&#xA;&#x9;&#x9;this.rowIndex = 0;&#xA;&#x9;&#x9;this.columnIndex = 0;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public boolean hasNext() {&#xA;&#x9;&#x9;return ((rowIndex &lt; grid.getRowCount()) || (columnIndex &lt; grid.getColumnCount()));&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public String next() {&#xA;&#x9;&#x9;if (rowMajor) {&#xA;&#x9;&#x9;&#x9;if ((rowIndex == grid.getRowCount() - 1) &amp;&amp; (columnIndex &lt; grid.getColumnCount() - 1)) {&#xA;&#x9;&#x9;&#x9;&#x9;String returnElement = grid.getElement(rowIndex, columnIndex);&#xA;&#x9;&#x9;&#x9;&#x9;rowIndex = 0;&#xA;&#x9;&#x9;&#x9;&#x9;columnIndex++;&#xA;&#x9;&#x9;&#x9;&#x9;return returnElement;&#xA;&#x9;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;&#x9;String returnElement = grid.getElement(rowIndex, columnIndex);&#xA;&#x9;&#x9;&#x9;&#x9;rowIndex++;&#xA;&#x9;&#x9;&#x9;&#x9;return returnElement;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return null;&#xA;&#x9;}&#xA;&#xA;&#x9;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457100273857" sizeMeasure="56">
          <edit xsi:type="exercise:StringEdit" storedString="package interfaces;&#xA;&#xA;import java.util.Iterator;&#xA;&#xA;public class StringGridIterator implements Iterator&lt;String> {&#xA;&#xA;&#x9;//internal state&#xA;&#x9;private StringGrid grid;&#xA;&#x9;private boolean rowMajor;&#xA;&#x9;private int rowIndex;&#xA;&#x9;private int columnIndex;&#xA;&#x9;&#xA;&#x9;public StringGridIterator(StringGrid grid, boolean rowMajorBoolean) {&#xA;&#x9;&#x9;this.grid = grid;&#xA;&#x9;&#x9;this.rowMajor = rowMajorBoolean;&#xA;&#x9;&#x9;this.rowIndex = 0;&#xA;&#x9;&#x9;this.columnIndex = 0;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public boolean hasNext() {&#xA;&#x9;&#x9;return ((rowIndex &lt; grid.getRowCount()) || (columnIndex &lt; grid.getColumnCount()));&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public String next() {&#xA;&#x9;&#x9;if (rowMajor) {&#xA;&#x9;&#x9;&#x9;if ((columnIndex == grid.getColumnCount() - 1) &amp;&amp; (rowIndex &lt; grid.getRowCount() - 1)) {&#xA;&#x9;&#x9;&#x9;&#x9;String returnElement = grid.getElement(rowIndex, columnIndex);&#xA;&#x9;&#x9;&#x9;&#x9;columnIndex = 0;&#xA;&#x9;&#x9;&#x9;&#x9;rowIndex++;&#xA;&#x9;&#x9;&#x9;&#x9;return returnElement;&#xA;&#x9;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;&#x9;String returnElement = grid.getElement(rowIndex, columnIndex);&#xA;&#x9;&#x9;&#x9;&#x9;columnIndex++;&#xA;&#x9;&#x9;&#x9;&#x9;return returnElement;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if ((rowIndex == grid.getRowCount() - 1) &amp;&amp; (columnIndex &lt; grid.getColumnCount() - 1)) {&#xA;&#x9;&#x9;&#x9;String returnElement = grid.getElement(rowIndex, columnIndex);&#xA;&#x9;&#x9;&#x9;rowIndex = 0;&#xA;&#x9;&#x9;&#x9;columnIndex++;&#xA;&#x9;&#x9;&#x9;return returnElement;&#xA;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;String returnElement = grid.getElement(rowIndex, columnIndex);&#xA;&#x9;&#x9;&#x9;rowIndex++;&#xA;&#x9;&#x9;&#x9;return returnElement;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public void remove() {&#xA;&#x9;&#x9;throw new UnsupportedOperationException(&quot;ERROR! Removing elements from &quot;&#xA;&#x9;&#x9;&#x9;&#x9;+ &quot;grid is not allowed.&quot;);&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457100342377" sizeMeasure="56">
          <edit xsi:type="exercise:StringEdit" storedString="package interfaces;&#xA;&#xA;import java.util.Iterator;&#xA;&#xA;public class StringGridIterator implements Iterator&lt;String> {&#xA;&#xA;&#x9;//internal state&#xA;&#x9;private StringGrid grid;&#xA;&#x9;private boolean rowMajor;&#xA;&#x9;private int rowIndex;&#xA;&#x9;private int columnIndex;&#xA;&#x9;&#xA;&#x9;public StringGridIterator(StringGrid grid, boolean rowMajorBoolean) {&#xA;&#x9;&#x9;this.grid = grid;&#xA;&#x9;&#x9;this.rowMajor = rowMajorBoolean;&#xA;&#x9;&#x9;this.rowIndex = 0;&#xA;&#x9;&#x9;this.columnIndex = 0;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public boolean hasNext() {&#xA;&#x9;&#x9;return ((rowIndex &lt; grid.getRowCount()) || (columnIndex &lt; grid.getColumnCount()));&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public String next() {&#xA;&#x9;&#x9;if (rowMajor) {&#xA;&#x9;&#x9;&#x9;if ((columnIndex == grid.getColumnCount() - 1) &amp;&amp; (rowIndex &lt; grid.getRowCount() - 1)) {&#xA;&#x9;&#x9;&#x9;&#x9;columnIndex = 0;&#xA;&#x9;&#x9;&#x9;&#x9;rowIndex++;&#xA;&#x9;&#x9;&#x9;&#x9;String returnElement = grid.getElement(rowIndex, columnIndex);&#xA;&#x9;&#x9;&#x9;&#x9;return returnElement;&#xA;&#x9;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;&#x9;columnIndex++;&#xA;&#x9;&#x9;&#x9;&#x9;String returnElement = grid.getElement(rowIndex, columnIndex);&#xA;&#x9;&#x9;&#x9;&#x9;return returnElement;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if ((rowIndex == grid.getRowCount() - 1) &amp;&amp; (columnIndex &lt; grid.getColumnCount() - 1)) {&#xA;&#x9;&#x9;&#x9;rowIndex = 0;&#xA;&#x9;&#x9;&#x9;columnIndex++;&#xA;&#x9;&#x9;&#x9;String returnElement = grid.getElement(rowIndex, columnIndex);&#xA;&#x9;&#x9;&#x9;return returnElement;&#xA;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;rowIndex++;&#xA;&#x9;&#x9;&#x9;String returnElement = grid.getElement(rowIndex, columnIndex);&#xA;&#x9;&#x9;&#x9;return returnElement;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public void remove() {&#xA;&#x9;&#x9;throw new UnsupportedOperationException(&quot;ERROR! Removing elements from &quot;&#xA;&#x9;&#x9;&#x9;&#x9;+ &quot;grid is not allowed.&quot;);&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457100845468" sizeMeasure="57">
          <edit xsi:type="exercise:StringEdit" storedString="package interfaces;&#xA;&#xA;import java.util.Iterator;&#xA;&#xA;public class StringGridIterator implements Iterator&lt;String> {&#xA;&#xA;&#x9;//internal state&#xA;&#x9;private StringGrid grid;&#xA;&#x9;private boolean rowMajor;&#xA;&#x9;private int rowIndex;&#xA;&#x9;private int columnIndex;&#xA;&#x9;&#xA;&#x9;public StringGridIterator(StringGrid grid, boolean rowMajorBoolean) {&#xA;&#x9;&#x9;this.grid = grid;&#xA;&#x9;&#x9;this.rowMajor = rowMajorBoolean;&#xA;&#x9;&#x9;this.rowIndex = 0;&#xA;&#x9;&#x9;this.columnIndex = 0;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public boolean hasNext() {&#xA;&#x9;&#x9;return ((rowIndex &lt; grid.getRowCount()) || (columnIndex &lt; grid.getColumnCount()));&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public String next() {&#xA;&#x9;&#x9;if (rowMajor) {&#xA;&#x9;&#x9;&#x9;if ((columnIndex == grid.getColumnCount() - 1) &amp;&amp; (rowIndex &lt; grid.getRowCount() - 1)) {&#xA;&#x9;&#x9;&#x9;&#x9;columnIndex = 0;&#xA;&#x9;&#x9;&#x9;&#x9;rowIndex++;&#xA;&#x9;&#x9;&#x9;&#x9;String returnElement = grid.getElement(rowIndex, columnIndex);&#xA;&#x9;&#x9;&#x9;&#x9;return returnElement;&#xA;&#x9;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;&#x9;columnIndex++;&#xA;&#x9;&#x9;&#x9;&#x9;String returnElement = grid.getElement(rowIndex, columnIndex);&#xA;&#x9;&#x9;&#x9;&#x9;return returnElement;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if ((rowIndex == grid.getRowCount() - 1) &amp;&amp; (columnIndex &lt; grid.getColumnCount() - 1)) {&#xA;&#x9;&#x9;&#x9;rowIndex = 0;&#xA;&#x9;&#x9;&#x9;columnIndex++;&#xA;&#x9;&#x9;&#x9;String returnElement = grid.getElement(rowIndex, columnIndex);&#xA;&#x9;&#x9;&#x9;return returnElement;&#xA;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;rowIndex++;&#xA;&#x9;&#x9;&#x9;String returnElement = grid.getElement(rowIndex, columnIndex);&#xA;&#x9;&#x9;&#x9;return returnElement;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public void remove() {&#xA;&#x9;&#x9;throw new UnsupportedOperationException(&quot;ERROR! Removing elements from &quot;&#xA;&#x9;&#x9;&#x9;&#x9;+ &quot;grid is not allowed.&quot;);&#xA;&#x9;}&#xA;}&#xA;&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457101070388" sizeMeasure="57">
          <edit xsi:type="exercise:StringEdit" storedString="package interfaces;&#xA;&#xA;import java.util.Iterator;&#xA;&#xA;public class StringGridIterator implements Iterator&lt;String> {&#xA;&#xA;&#x9;//internal state&#xA;&#x9;private StringGrid grid;&#xA;&#x9;private boolean rowMajor;&#xA;&#x9;private int rowIndex;&#xA;&#x9;private int columnIndex;&#xA;&#x9;&#xA;&#x9;public StringGridIterator(StringGrid grid, boolean rowMajorBoolean) {&#xA;&#x9;&#x9;this.grid = grid;&#xA;&#x9;&#x9;this.rowMajor = rowMajorBoolean;&#xA;&#x9;&#x9;this.rowIndex = 0;&#xA;&#x9;&#x9;this.columnIndex = 0;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public boolean hasNext() {&#xA;&#x9;&#x9;return ((rowIndex &lt; grid.getRowCount()) || (columnIndex &lt; grid.getColumnCount()));&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public String next() {&#xA;&#x9;&#x9;if (rowMajor) {&#xA;&#x9;&#x9;&#x9;if ((columnIndex == grid.getColumnCount() - 1) &amp;&amp; (rowIndex &lt; grid.getRowCount() - 1)) {&#xA;&#x9;&#x9;&#x9;&#x9;String returnElement = grid.getElement(rowIndex, columnIndex);&#xA;&#x9;&#x9;&#x9;&#x9;columnIndex = 0;&#xA;&#x9;&#x9;&#x9;&#x9;rowIndex++;&#xA;&#x9;&#x9;&#x9;&#x9;return returnElement;&#xA;&#x9;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;&#x9;String returnElement = grid.getElement(rowIndex, columnIndex);&#xA;&#x9;&#x9;&#x9;&#x9;columnIndex++;&#xA;&#x9;&#x9;&#x9;&#x9;return returnElement;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if ((rowIndex == grid.getRowCount() - 1) &amp;&amp; (columnIndex &lt; grid.getColumnCount() - 1)) {&#xA;&#x9;&#x9;&#x9;String returnElement = grid.getElement(rowIndex, columnIndex);&#xA;&#x9;&#x9;&#x9;rowIndex = 0;&#xA;&#x9;&#x9;&#x9;columnIndex++;&#xA;&#x9;&#x9;&#x9;return returnElement;&#xA;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;String returnElement = grid.getElement(rowIndex, columnIndex);&#xA;&#x9;&#x9;&#x9;rowIndex++;&#xA;&#x9;&#x9;&#x9;return returnElement;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public void remove() {&#xA;&#x9;&#x9;throw new UnsupportedOperationException(&quot;ERROR! Removing elements from &quot;&#xA;&#x9;&#x9;&#x9;&#x9;+ &quot;grid is not allowed.&quot;);&#xA;&#x9;}&#xA;}&#xA;&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457101415024" sizeMeasure="59" errorCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package interfaces;&#xA;&#xA;import java.util.Iterator;&#xA;&#xA;public class StringGridIterator implements Iterator&lt;String> {&#xA;&#xA;&#x9;//internal state&#xA;&#x9;private StringGrid grid;&#xA;&#x9;private boolean rowMajor;&#xA;&#x9;private int rowIndex;&#xA;&#x9;private int columnIndex;&#xA;&#x9;&#xA;&#x9;public StringGridIterator(StringGrid grid, boolean rowMajorBoolean) {&#xA;&#x9;&#x9;this.grid = grid;&#xA;&#x9;&#x9;this.rowMajor = rowMajorBoolean;&#xA;&#x9;&#x9;this.rowIndex = 0;&#xA;&#x9;&#x9;this.columnIndex = 0;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public boolean hasNext() {&#xA;&#x9;&#x9;return ((rowIndex &lt; grid.getRowCount()) || (columnIndex &lt; grid.getColumnCount()));&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public String next() {&#xA;&#x9;&#x9;if (this.hasNext()) {&#xA;&#x9;&#x9;&#x9;if (rowMajor) {&#xA;&#x9;&#x9;&#x9;&#x9;if ((columnIndex == grid.getColumnCount() - 1) &amp;&amp; (rowIndex &lt; grid.getRowCount() - 1)) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;String returnElement = grid.getElement(rowIndex, columnIndex);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;columnIndex = 0;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;rowIndex++;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;return returnElement;&#xA;&#x9;&#x9;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;String returnElement = grid.getElement(rowIndex, columnIndex);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;columnIndex++;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;return returnElement;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if ((rowIndex == grid.getRowCount() - 1) &amp;&amp; (columnIndex &lt; grid.getColumnCount() - 1)) {&#xA;&#x9;&#x9;&#x9;&#x9;String returnElement = grid.getElement(rowIndex, columnIndex);&#xA;&#x9;&#x9;&#x9;&#x9;rowIndex = 0;&#xA;&#x9;&#x9;&#x9;&#x9;columnIndex++;&#xA;&#x9;&#x9;&#x9;&#x9;return returnElement;&#xA;&#x9;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;&#x9;String returnElement = grid.getElement(rowIndex, columnIndex);&#xA;&#x9;&#x9;&#x9;&#x9;rowIndex++;&#xA;&#x9;&#x9;&#x9;&#x9;return returnElement;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public void remove() {&#xA;&#x9;&#x9;throw new UnsupportedOperationException(&quot;ERROR! Removing elements from &quot;&#xA;&#x9;&#x9;&#x9;&#x9;+ &quot;grid is not allowed.&quot;);&#xA;&#x9;}&#xA;}&#xA;&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457101588005" sizeMeasure="63" errorCount="3">
          <edit xsi:type="exercise:StringEdit" storedString="package interfaces;&#xA;&#xA;import java.security.NoSuchAlgorithmException;&#xA;import java.util.Iterator;&#xA;import java.util.NoSuchElementException;&#xA;&#xA;public class StringGridIterator implements Iterator&lt;String> {&#xA;&#xA;&#x9;//internal state&#xA;&#x9;private StringGrid grid;&#xA;&#x9;private boolean rowMajor;&#xA;&#x9;private int rowIndex;&#xA;&#x9;private int columnIndex;&#xA;&#x9;&#xA;&#x9;public StringGridIterator(StringGrid grid, boolean rowMajorBoolean) {&#xA;&#x9;&#x9;this.grid = grid;&#xA;&#x9;&#x9;this.rowMajor = rowMajorBoolean;&#xA;&#x9;&#x9;this.rowIndex = 0;&#xA;&#x9;&#x9;this.columnIndex = 0;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public boolean hasNext() {&#xA;&#x9;&#x9;return ((rowIndex &lt; grid.getRowCount()) || (columnIndex &lt; grid.getColumnCount()));&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public String next() {&#xA;&#x9;&#x9;if (this.hasNext()) {&#xA;&#x9;&#x9;&#x9;if (rowMajor) {&#xA;&#x9;&#x9;&#x9;&#x9;if ((columnIndex == grid.getColumnCount() - 1) &amp;&amp; (rowIndex &lt; grid.getRowCount() - 1)) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;String returnElement = grid.getElement(rowIndex, columnIndex);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;columnIndex = 0;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;rowIndex++;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;return returnElement;&#xA;&#x9;&#x9;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;String returnElement = grid.getElement(rowIndex, columnIndex);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;columnIndex++;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;return returnElement;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if ((rowIndex == grid.getRowCount() - 1) &amp;&amp; (columnIndex &lt; grid.getColumnCount() - 1)) {&#xA;&#x9;&#x9;&#x9;&#x9;String returnElement = grid.getElement(rowIndex, columnIndex);&#xA;&#x9;&#x9;&#x9;&#x9;rowIndex = 0;&#xA;&#x9;&#x9;&#x9;&#x9;columnIndex++;&#xA;&#x9;&#x9;&#x9;&#x9;return returnElement;&#xA;&#x9;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;&#x9;String returnElement = grid.getElement(rowIndex, columnIndex);&#xA;&#x9;&#x9;&#x9;&#x9;rowIndex++;&#xA;&#x9;&#x9;&#x9;&#x9;return returnElement;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;throw new NoSuchElementException(&quot;ERROR! No such element present.&quot;);&#xA;&#x9;&#x9;}s&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public void remove() {&#xA;&#x9;&#x9;throw new UnsupportedOperationException(&quot;ERROR! Removing elements from &quot;&#xA;&#x9;&#x9;&#x9;&#x9;+ &quot;grid is not allowed.&quot;);&#xA;&#x9;}&#xA;}&#xA;&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457101588612" sizeMeasure="63" warningCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package interfaces;&#xA;&#xA;import java.security.NoSuchAlgorithmException;&#xA;import java.util.Iterator;&#xA;import java.util.NoSuchElementException;&#xA;&#xA;public class StringGridIterator implements Iterator&lt;String> {&#xA;&#xA;&#x9;//internal state&#xA;&#x9;private StringGrid grid;&#xA;&#x9;private boolean rowMajor;&#xA;&#x9;private int rowIndex;&#xA;&#x9;private int columnIndex;&#xA;&#x9;&#xA;&#x9;public StringGridIterator(StringGrid grid, boolean rowMajorBoolean) {&#xA;&#x9;&#x9;this.grid = grid;&#xA;&#x9;&#x9;this.rowMajor = rowMajorBoolean;&#xA;&#x9;&#x9;this.rowIndex = 0;&#xA;&#x9;&#x9;this.columnIndex = 0;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public boolean hasNext() {&#xA;&#x9;&#x9;return ((rowIndex &lt; grid.getRowCount()) || (columnIndex &lt; grid.getColumnCount()));&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public String next() {&#xA;&#x9;&#x9;if (this.hasNext()) {&#xA;&#x9;&#x9;&#x9;if (rowMajor) {&#xA;&#x9;&#x9;&#x9;&#x9;if ((columnIndex == grid.getColumnCount() - 1) &amp;&amp; (rowIndex &lt; grid.getRowCount() - 1)) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;String returnElement = grid.getElement(rowIndex, columnIndex);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;columnIndex = 0;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;rowIndex++;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;return returnElement;&#xA;&#x9;&#x9;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;String returnElement = grid.getElement(rowIndex, columnIndex);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;columnIndex++;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;return returnElement;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if ((rowIndex == grid.getRowCount() - 1) &amp;&amp; (columnIndex &lt; grid.getColumnCount() - 1)) {&#xA;&#x9;&#x9;&#x9;&#x9;String returnElement = grid.getElement(rowIndex, columnIndex);&#xA;&#x9;&#x9;&#x9;&#x9;rowIndex = 0;&#xA;&#x9;&#x9;&#x9;&#x9;columnIndex++;&#xA;&#x9;&#x9;&#x9;&#x9;return returnElement;&#xA;&#x9;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;&#x9;String returnElement = grid.getElement(rowIndex, columnIndex);&#xA;&#x9;&#x9;&#x9;&#x9;rowIndex++;&#xA;&#x9;&#x9;&#x9;&#x9;return returnElement;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;throw new NoSuchElementException(&quot;ERROR! No such element present.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public void remove() {&#xA;&#x9;&#x9;throw new UnsupportedOperationException(&quot;ERROR! Removing elements from &quot;&#xA;&#x9;&#x9;&#x9;&#x9;+ &quot;grid is not allowed.&quot;);&#xA;&#x9;}&#xA;}&#xA;&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457101590619" sizeMeasure="63" warningCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package interfaces;&#xA;&#xA;import java.security.NoSuchAlgorithmException;&#xA;import java.util.Iterator;&#xA;import java.util.NoSuchElementException;&#xA;&#xA;public class StringGridIterator implements Iterator&lt;String> {&#xA;&#xA;&#x9;//internal state&#xA;&#x9;private StringGrid grid;&#xA;&#x9;private boolean rowMajor;&#xA;&#x9;private int rowIndex;&#xA;&#x9;private int columnIndex;&#xA;&#x9;&#xA;&#x9;public StringGridIterator(StringGrid grid, boolean rowMajorBoolean) {&#xA;&#x9;&#x9;this.grid = grid;&#xA;&#x9;&#x9;this.rowMajor = rowMajorBoolean;&#xA;&#x9;&#x9;this.rowIndex = 0;&#xA;&#x9;&#x9;this.columnIndex = 0;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public boolean hasNext() {&#xA;&#x9;&#x9;return ((rowIndex &lt; grid.getRowCount()) || (columnIndex &lt; grid.getColumnCount()));&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public String next() {&#xA;&#x9;&#x9;if (this.hasNext()) {&#xA;&#x9;&#x9;&#x9;if (rowMajor) {&#xA;&#x9;&#x9;&#x9;&#x9;if ((columnIndex == grid.getColumnCount() - 1) &amp;&amp; (rowIndex &lt; grid.getRowCount() - 1)) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;String returnElement = grid.getElement(rowIndex, columnIndex);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;columnIndex = 0;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;rowIndex++;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;return returnElement;&#xA;&#x9;&#x9;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;String returnElement = grid.getElement(rowIndex, columnIndex);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;columnIndex++;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;return returnElement;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if ((rowIndex == grid.getRowCount() - 1) &amp;&amp; (columnIndex &lt; grid.getColumnCount() - 1)) {&#xA;&#x9;&#x9;&#x9;&#x9;String returnElement = grid.getElement(rowIndex, columnIndex);&#xA;&#x9;&#x9;&#x9;&#x9;rowIndex = 0;&#xA;&#x9;&#x9;&#x9;&#x9;columnIndex++;&#xA;&#x9;&#x9;&#x9;&#x9;return returnElement;&#xA;&#x9;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;&#x9;String returnElement = grid.getElement(rowIndex, columnIndex);&#xA;&#x9;&#x9;&#x9;&#x9;rowIndex++;&#xA;&#x9;&#x9;&#x9;&#x9;return returnElement;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;throw new NoSuchElementException(&quot;ERROR! No such element present.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public void remove() {&#xA;&#x9;&#x9;throw new UnsupportedOperationException(&quot;ERROR! Removing elements from &quot;&#xA;&#x9;&#x9;&#x9;&#x9;+ &quot;grid is not allowed.&quot;);&#xA;&#x9;}&#xA;}&#xA;&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457101597262" sizeMeasure="62">
          <edit xsi:type="exercise:StringEdit" storedString="package interfaces;&#xA;&#xA;import java.util.Iterator;&#xA;import java.util.NoSuchElementException;&#xA;&#xA;public class StringGridIterator implements Iterator&lt;String> {&#xA;&#xA;&#x9;//internal state&#xA;&#x9;private StringGrid grid;&#xA;&#x9;private boolean rowMajor;&#xA;&#x9;private int rowIndex;&#xA;&#x9;private int columnIndex;&#xA;&#x9;&#xA;&#x9;public StringGridIterator(StringGrid grid, boolean rowMajorBoolean) {&#xA;&#x9;&#x9;this.grid = grid;&#xA;&#x9;&#x9;this.rowMajor = rowMajorBoolean;&#xA;&#x9;&#x9;this.rowIndex = 0;&#xA;&#x9;&#x9;this.columnIndex = 0;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public boolean hasNext() {&#xA;&#x9;&#x9;return ((rowIndex &lt; grid.getRowCount()) || (columnIndex &lt; grid.getColumnCount()));&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public String next() {&#xA;&#x9;&#x9;if (this.hasNext()) {&#xA;&#x9;&#x9;&#x9;if (rowMajor) {&#xA;&#x9;&#x9;&#x9;&#x9;if ((columnIndex == grid.getColumnCount() - 1) &amp;&amp; (rowIndex &lt; grid.getRowCount() - 1)) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;String returnElement = grid.getElement(rowIndex, columnIndex);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;columnIndex = 0;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;rowIndex++;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;return returnElement;&#xA;&#x9;&#x9;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;String returnElement = grid.getElement(rowIndex, columnIndex);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;columnIndex++;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;return returnElement;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if ((rowIndex == grid.getRowCount() - 1) &amp;&amp; (columnIndex &lt; grid.getColumnCount() - 1)) {&#xA;&#x9;&#x9;&#x9;&#x9;String returnElement = grid.getElement(rowIndex, columnIndex);&#xA;&#x9;&#x9;&#x9;&#x9;rowIndex = 0;&#xA;&#x9;&#x9;&#x9;&#x9;columnIndex++;&#xA;&#x9;&#x9;&#x9;&#x9;return returnElement;&#xA;&#x9;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;&#x9;String returnElement = grid.getElement(rowIndex, columnIndex);&#xA;&#x9;&#x9;&#x9;&#x9;rowIndex++;&#xA;&#x9;&#x9;&#x9;&#x9;return returnElement;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;throw new NoSuchElementException(&quot;ERROR! No such element present.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public void remove() {&#xA;&#x9;&#x9;throw new UnsupportedOperationException(&quot;ERROR! Removing elements from &quot;&#xA;&#x9;&#x9;&#x9;&#x9;+ &quot;grid is not allowed.&quot;);&#xA;&#x9;}&#xA;}&#xA;&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457101772341" sizeMeasure="62">
          <edit xsi:type="exercise:StringEdit" storedString="package interfaces;&#xA;&#xA;import java.util.Iterator;&#xA;import java.util.NoSuchElementException;&#xA;&#xA;public class StringGridIterator implements Iterator&lt;String> {&#xA;&#xA;&#x9;//internal state&#xA;&#x9;private StringGrid grid;&#xA;&#x9;private boolean rowMajor;&#xA;&#x9;private int rowIndex;&#xA;&#x9;private int columnIndex;&#xA;&#x9;&#xA;&#x9;public StringGridIterator(StringGrid grid, boolean rowMajorBoolean) {&#xA;&#x9;&#x9;this.grid = grid;&#xA;&#x9;&#x9;this.rowMajor = rowMajorBoolean;&#xA;&#x9;&#x9;this.rowIndex = 0;&#xA;&#x9;&#x9;this.columnIndex = 0;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public boolean hasNext() {&#xA;&#x9;&#x9;return ((rowIndex &lt; grid.getRowCount() - 1) || (columnIndex &lt; grid.getColumnCount() - 1));&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public String next() {&#xA;&#x9;&#x9;if (this.hasNext()) {&#xA;&#x9;&#x9;&#x9;if (rowMajor) {&#xA;&#x9;&#x9;&#x9;&#x9;if ((columnIndex == grid.getColumnCount() - 1) &amp;&amp; (rowIndex &lt; grid.getRowCount() - 1)) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;String returnElement = grid.getElement(rowIndex, columnIndex);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;columnIndex = 0;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;rowIndex++;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;return returnElement;&#xA;&#x9;&#x9;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;String returnElement = grid.getElement(rowIndex, columnIndex);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;columnIndex++;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;return returnElement;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if ((rowIndex == grid.getRowCount() - 1) &amp;&amp; (columnIndex &lt; grid.getColumnCount() - 1)) {&#xA;&#x9;&#x9;&#x9;&#x9;String returnElement = grid.getElement(rowIndex, columnIndex);&#xA;&#x9;&#x9;&#x9;&#x9;rowIndex = 0;&#xA;&#x9;&#x9;&#x9;&#x9;columnIndex++;&#xA;&#x9;&#x9;&#x9;&#x9;return returnElement;&#xA;&#x9;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;&#x9;String returnElement = grid.getElement(rowIndex, columnIndex);&#xA;&#x9;&#x9;&#x9;&#x9;rowIndex++;&#xA;&#x9;&#x9;&#x9;&#x9;return returnElement;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;throw new NoSuchElementException(&quot;ERROR! No such element present.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public void remove() {&#xA;&#x9;&#x9;throw new UnsupportedOperationException(&quot;ERROR! Removing elements from &quot;&#xA;&#x9;&#x9;&#x9;&#x9;+ &quot;grid is not allowed.&quot;);&#xA;&#x9;}&#xA;}&#xA;&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457101849974" sizeMeasure="62">
          <edit xsi:type="exercise:StringEdit" storedString="package interfaces;&#xA;&#xA;import java.util.Iterator;&#xA;import java.util.NoSuchElementException;&#xA;&#xA;public class StringGridIterator implements Iterator&lt;String> {&#xA;&#xA;&#x9;//internal state&#xA;&#x9;private StringGrid grid;&#xA;&#x9;private boolean rowMajor;&#xA;&#x9;private int rowIndex;&#xA;&#x9;private int columnIndex;&#xA;&#x9;&#xA;&#x9;public StringGridIterator(StringGrid grid, boolean rowMajorBoolean) {&#xA;&#x9;&#x9;this.grid = grid;&#xA;&#x9;&#x9;this.rowMajor = rowMajorBoolean;&#xA;&#x9;&#x9;this.rowIndex = 0;&#xA;&#x9;&#x9;this.columnIndex = 0;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public boolean hasNext() {&#xA;&#x9;&#x9;return ((rowIndex &lt; grid.getRowCount()) || (columnIndex &lt; grid.getColumnCount()));&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public String next() {&#xA;&#x9;&#x9;if (this.hasNext()) {&#xA;&#x9;&#x9;&#x9;if (rowMajor) {&#xA;&#x9;&#x9;&#x9;&#x9;if ((columnIndex == grid.getColumnCount() - 1) &amp;&amp; (rowIndex &lt; grid.getRowCount() - 1)) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;String returnElement = grid.getElement(rowIndex, columnIndex);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;columnIndex = 0;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;rowIndex++;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;return returnElement;&#xA;&#x9;&#x9;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;String returnElement = grid.getElement(rowIndex, columnIndex);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;columnIndex++;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;return returnElement;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if ((rowIndex == grid.getRowCount() - 1) &amp;&amp; (columnIndex &lt; grid.getColumnCount() - 1)) {&#xA;&#x9;&#x9;&#x9;&#x9;String returnElement = grid.getElement(rowIndex, columnIndex);&#xA;&#x9;&#x9;&#x9;&#x9;rowIndex = 0;&#xA;&#x9;&#x9;&#x9;&#x9;columnIndex++;&#xA;&#x9;&#x9;&#x9;&#x9;return returnElement;&#xA;&#x9;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;&#x9;String returnElement = grid.getElement(rowIndex, columnIndex);&#xA;&#x9;&#x9;&#x9;&#x9;rowIndex++;&#xA;&#x9;&#x9;&#x9;&#x9;return returnElement;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;throw new NoSuchElementException(&quot;ERROR! No such element present.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public void remove() {&#xA;&#x9;&#x9;throw new UnsupportedOperationException(&quot;ERROR! Removing elements from &quot;&#xA;&#x9;&#x9;&#x9;&#x9;+ &quot;grid is not allowed.&quot;);&#xA;&#x9;}&#xA;}&#xA;&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457102541582" sizeMeasure="62">
          <edit xsi:type="exercise:StringEdit" storedString="package interfaces;&#xA;&#xA;import java.util.Iterator;&#xA;import java.util.NoSuchElementException;&#xA;&#xA;public class StringGridIterator implements Iterator&lt;String> {&#xA;&#xA;&#x9;//internal state&#xA;&#x9;private StringGrid grid;&#xA;&#x9;private boolean rowMajor;&#xA;&#x9;private int rowIndex;&#xA;&#x9;private int columnIndex;&#xA;&#x9;&#xA;&#x9;public StringGridIterator(StringGrid grid, boolean rowMajorBoolean) {&#xA;&#x9;&#x9;this.grid = grid;&#xA;&#x9;&#x9;this.rowMajor = rowMajorBoolean;&#xA;&#x9;&#x9;this.rowIndex = 0;&#xA;&#x9;&#x9;this.columnIndex = 0;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public boolean hasNext() {&#xA;&#x9;&#x9;return ((rowIndex &lt; grid.getRowCount()) || (columnIndex &lt; grid.getColumnCount()));&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public String next() {&#xA;&#x9;&#x9;if (this.hasNext()) {&#xA;&#x9;&#x9;&#x9;if (rowMajor) {&#xA;&#x9;&#x9;&#x9;&#x9;if ((columnIndex == grid.getColumnCount() - 1) &amp;&amp; (rowIndex &lt; grid.getRowCount() - 1)) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;String returnElement = grid.getElement(rowIndex, columnIndex);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;columnIndex = 0;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;rowIndex++;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;return returnElement;&#xA;&#x9;&#x9;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;String returnElement = grid.getElement(rowIndex, columnIndex);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;columnIndex++;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;return returnElement;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if ((rowIndex == grid.getRowCount() - 1) &amp;&amp; (columnIndex &lt; grid.getColumnCount() - 1)) {&#xA;&#x9;&#x9;&#x9;&#x9;String returnElement = grid.getElement(rowIndex, columnIndex);&#xA;&#x9;&#x9;&#x9;&#x9;rowIndex = 0;&#xA;&#x9;&#x9;&#x9;&#x9;columnIndex++;&#xA;&#x9;&#x9;&#x9;&#x9;return returnElement;&#xA;&#x9;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;&#x9;String returnElement = grid.getElement(rowIndex, columnIndex);&#xA;&#x9;&#x9;&#x9;&#x9;rowIndex++;&#xA;&#x9;&#x9;&#x9;&#x9;return returnElement;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;throw new NoSuchElementException(&quot;ERROR! No such element present.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public void remove() {&#xA;&#x9;&#x9;throw new UnsupportedOperationException(&quot;ERROR! Removing elements from &quot;&#xA;&#x9;&#x9;&#x9;&#x9;+ &quot;grid is not allowed.&quot;);&#xA;&#x9;}&#xA;}&#xA;&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457102638671" sizeMeasure="62">
          <edit xsi:type="exercise:StringEdit" storedString="package interfaces;&#xA;&#xA;import java.util.Iterator;&#xA;import java.util.NoSuchElementException;&#xA;&#xA;public class StringGridIterator implements Iterator&lt;String> {&#xA;&#xA;&#x9;//internal state&#xA;&#x9;private StringGrid grid;&#xA;&#x9;private boolean rowMajor;&#xA;&#x9;private int rowIndex;&#xA;&#x9;private int columnIndex;&#xA;&#x9;&#xA;&#x9;public StringGridIterator(StringGrid grid, boolean rowMajorBoolean) {&#xA;&#x9;&#x9;this.grid = grid;&#xA;&#x9;&#x9;this.rowMajor = rowMajorBoolean;&#xA;&#x9;&#x9;this.rowIndex = 0;&#xA;&#x9;&#x9;this.columnIndex = 0;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public boolean hasNext() {&#xA;&#x9;&#x9;return ((rowIndex &lt; grid.getRowCount()) || (columnIndex &lt; grid.getColumnCount()));&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public String next() {&#xA;&#x9;&#x9;if (this.hasNext()) {&#xA;&#x9;&#x9;&#x9;if (rowMajor) {&#xA;&#x9;&#x9;&#x9;&#x9;if ((columnIndex == grid.getColumnCount() - 1) &amp;&amp; (rowIndex &lt; grid.getRowCount())) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;String returnElement = grid.getElement(rowIndex, columnIndex);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;columnIndex = 0;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;rowIndex++;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;return returnElement;&#xA;&#x9;&#x9;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;String returnElement = grid.getElement(rowIndex, columnIndex);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;columnIndex++;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;return returnElement;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if ((rowIndex == grid.getRowCount() - 1) &amp;&amp; (columnIndex &lt; grid.getColumnCount())) {&#xA;&#x9;&#x9;&#x9;&#x9;String returnElement = grid.getElement(rowIndex, columnIndex);&#xA;&#x9;&#x9;&#x9;&#x9;rowIndex = 0;&#xA;&#x9;&#x9;&#x9;&#x9;columnIndex++;&#xA;&#x9;&#x9;&#x9;&#x9;return returnElement;&#xA;&#x9;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;&#x9;String returnElement = grid.getElement(rowIndex, columnIndex);&#xA;&#x9;&#x9;&#x9;&#x9;rowIndex++;&#xA;&#x9;&#x9;&#x9;&#x9;return returnElement;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;throw new NoSuchElementException(&quot;ERROR! No such element present.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public void remove() {&#xA;&#x9;&#x9;throw new UnsupportedOperationException(&quot;ERROR! Removing elements from &quot;&#xA;&#x9;&#x9;&#x9;&#x9;+ &quot;grid is not allowed.&quot;);&#xA;&#x9;}&#xA;}&#xA;&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457103407667" sizeMeasure="65">
          <edit xsi:type="exercise:StringEdit" storedString="package interfaces;&#xA;&#xA;import java.util.Iterator;&#xA;import java.util.NoSuchElementException;&#xA;&#xA;public class StringGridIterator implements Iterator&lt;String> {&#xA;&#xA;&#x9;//internal state&#xA;&#x9;private StringGrid grid;&#xA;&#x9;private boolean rowMajor;&#xA;&#x9;private int rowIndex;&#xA;&#x9;private int columnIndex;&#xA;&#x9;&#xA;&#x9;public StringGridIterator(StringGrid grid, boolean rowMajorBoolean) {&#xA;&#x9;&#x9;this.grid = grid;&#xA;&#x9;&#x9;this.rowMajor = rowMajorBoolean;&#xA;&#x9;&#x9;this.rowIndex = 0;&#xA;&#x9;&#x9;this.columnIndex = 0;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public boolean hasNext() {&#xA;&#x9;&#x9;if (rowMajor) {&#xA;&#x9;&#x9;&#x9;return ((rowIndex &lt; grid.getRowCount()) || (columnIndex &lt; grid.getColumnCount() - 1));&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return ((rowIndex &lt; grid.getRowCount() - 1) || (columnIndex &lt; grid.getColumnCount()));&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public String next() {&#xA;&#x9;&#x9;if (this.hasNext()) {&#xA;&#x9;&#x9;&#x9;if (rowMajor) {&#xA;&#x9;&#x9;&#x9;&#x9;if ((columnIndex == grid.getColumnCount() - 1) &amp;&amp; (rowIndex &lt; grid.getRowCount())) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;String returnElement = grid.getElement(rowIndex, columnIndex);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;columnIndex = 0;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;rowIndex++;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;return returnElement;&#xA;&#x9;&#x9;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;String returnElement = grid.getElement(rowIndex, columnIndex);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;columnIndex++;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;return returnElement;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if ((rowIndex == grid.getRowCount() - 1) &amp;&amp; (columnIndex &lt; grid.getColumnCount())) {&#xA;&#x9;&#x9;&#x9;&#x9;String returnElement = grid.getElement(rowIndex, columnIndex);&#xA;&#x9;&#x9;&#x9;&#x9;rowIndex = 0;&#xA;&#x9;&#x9;&#x9;&#x9;columnIndex++;&#xA;&#x9;&#x9;&#x9;&#x9;return returnElement;&#xA;&#x9;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;&#x9;String returnElement = grid.getElement(rowIndex, columnIndex);&#xA;&#x9;&#x9;&#x9;&#x9;rowIndex++;&#xA;&#x9;&#x9;&#x9;&#x9;return returnElement;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;throw new NoSuchElementException(&quot;ERROR! No such element present.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public void remove() {&#xA;&#x9;&#x9;throw new UnsupportedOperationException(&quot;ERROR! Removing elements from &quot;&#xA;&#x9;&#x9;&#x9;&#x9;+ &quot;grid is not allowed.&quot;);&#xA;&#x9;}&#xA;}&#xA;&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457103505859" sizeMeasure="62">
          <edit xsi:type="exercise:StringEdit" storedString="package interfaces;&#xA;&#xA;import java.util.Iterator;&#xA;import java.util.NoSuchElementException;&#xA;&#xA;public class StringGridIterator implements Iterator&lt;String> {&#xA;&#xA;&#x9;//internal state&#xA;&#x9;private StringGrid grid;&#xA;&#x9;private boolean rowMajor;&#xA;&#x9;private int rowIndex;&#xA;&#x9;private int columnIndex;&#xA;&#x9;&#xA;&#x9;public StringGridIterator(StringGrid grid, boolean rowMajorBoolean) {&#xA;&#x9;&#x9;this.grid = grid;&#xA;&#x9;&#x9;this.rowMajor = rowMajorBoolean;&#xA;&#x9;&#x9;this.rowIndex = 0;&#xA;&#x9;&#x9;this.columnIndex = 0;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public boolean hasNext() {&#xA;&#x9;&#x9;return ((rowIndex &lt; grid.getRowCount()) &amp;&amp; (columnIndex &lt; grid.getColumnCount()));&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public String next() {&#xA;&#x9;&#x9;if (this.hasNext()) {&#xA;&#x9;&#x9;&#x9;if (rowMajor) {&#xA;&#x9;&#x9;&#x9;&#x9;if ((columnIndex == grid.getColumnCount() - 1) &amp;&amp; (rowIndex &lt; grid.getRowCount())) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;String returnElement = grid.getElement(rowIndex, columnIndex);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;columnIndex = 0;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;rowIndex++;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;return returnElement;&#xA;&#x9;&#x9;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;String returnElement = grid.getElement(rowIndex, columnIndex);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;columnIndex++;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;return returnElement;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if ((rowIndex == grid.getRowCount() - 1) &amp;&amp; (columnIndex &lt; grid.getColumnCount())) {&#xA;&#x9;&#x9;&#x9;&#x9;String returnElement = grid.getElement(rowIndex, columnIndex);&#xA;&#x9;&#x9;&#x9;&#x9;rowIndex = 0;&#xA;&#x9;&#x9;&#x9;&#x9;columnIndex++;&#xA;&#x9;&#x9;&#x9;&#x9;return returnElement;&#xA;&#x9;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;&#x9;String returnElement = grid.getElement(rowIndex, columnIndex);&#xA;&#x9;&#x9;&#x9;&#x9;rowIndex++;&#xA;&#x9;&#x9;&#x9;&#x9;return returnElement;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;throw new NoSuchElementException(&quot;ERROR! No such element present.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public void remove() {&#xA;&#x9;&#x9;throw new UnsupportedOperationException(&quot;ERROR! Removing elements from &quot;&#xA;&#x9;&#x9;&#x9;&#x9;+ &quot;grid is not allowed.&quot;);&#xA;&#x9;}&#xA;}&#xA;&#xA;"/>
        </attempts>
      </proposals>
      <proposals xsi:type="junit:JunitTestProposal" question="/0/@parts.1/@tasks.1/@q" answer="/0/@parts.1/@tasks.1/@a" completion="1.0">
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457103630227" completion="1.0" successCount="3"/>
      </proposals>
    </proposals>
    <proposals exercisePart="/0/@parts.2">
      <proposals xsi:type="workbench:DebugEventProposal" question="/0/@parts.2/@tasks.0/@q" answer="/0/@parts.2/@tasks.0/@a" performedCount="11">
        <attempts timestamp="1457101471883"/>
        <attempts timestamp="1457101514550"/>
        <attempts timestamp="1457101659608"/>
        <attempts timestamp="1457101861721"/>
        <attempts timestamp="1457101997198"/>
        <attempts timestamp="1457102647023"/>
        <attempts timestamp="1457102667862"/>
        <attempts timestamp="1457102870130"/>
        <attempts timestamp="1457103209932"/>
        <attempts timestamp="1457103248142"/>
        <attempts timestamp="1457103275563"/>
      </proposals>
      <proposals xsi:type="workbench:CommandExecutionProposal" question="/0/@parts.2/@tasks.1/@q" answer="/0/@parts.2/@tasks.1/@a" performedCount="107">
        <attempts timestamp="1457101479710"/>
        <attempts timestamp="1457101485939"/>
        <attempts timestamp="1457101493825"/>
        <attempts timestamp="1457101494768"/>
        <attempts timestamp="1457101496514"/>
        <attempts timestamp="1457101508133"/>
        <attempts timestamp="1457101509497"/>
        <attempts timestamp="1457101510046"/>
        <attempts timestamp="1457101510505"/>
        <attempts timestamp="1457101511089"/>
        <attempts timestamp="1457101511688"/>
        <attempts timestamp="1457101513102"/>
        <attempts timestamp="1457101514529"/>
        <attempts timestamp="1457101664358"/>
        <attempts timestamp="1457101672069"/>
        <attempts timestamp="1457101672945"/>
        <attempts timestamp="1457101673318"/>
        <attempts timestamp="1457101683520"/>
        <attempts timestamp="1457101687826"/>
        <attempts timestamp="1457101688247"/>
        <attempts timestamp="1457101688628"/>
        <attempts timestamp="1457101689281"/>
        <attempts timestamp="1457101700349"/>
        <attempts timestamp="1457101701101"/>
        <attempts timestamp="1457101703330"/>
        <attempts timestamp="1457101712210"/>
        <attempts timestamp="1457101713916"/>
        <attempts timestamp="1457101717880"/>
        <attempts timestamp="1457101718416"/>
        <attempts timestamp="1457101719535"/>
        <attempts timestamp="1457101720045"/>
        <attempts timestamp="1457101741269"/>
        <attempts timestamp="1457101742709"/>
        <attempts timestamp="1457101866939"/>
        <attempts timestamp="1457101867640"/>
        <attempts timestamp="1457101867970"/>
        <attempts timestamp="1457101868250"/>
        <attempts timestamp="1457101868568"/>
        <attempts timestamp="1457101876327"/>
        <attempts timestamp="1457101883590"/>
        <attempts timestamp="1457101893667"/>
        <attempts timestamp="1457101909490"/>
        <attempts timestamp="1457101911578"/>
        <attempts timestamp="1457101915503"/>
        <attempts timestamp="1457101919145"/>
        <attempts timestamp="1457101920650"/>
        <attempts timestamp="1457101955265"/>
        <attempts timestamp="1457101956310"/>
        <attempts timestamp="1457101957520"/>
        <attempts timestamp="1457101958808"/>
        <attempts timestamp="1457101962783"/>
        <attempts timestamp="1457101963637"/>
        <attempts timestamp="1457101966642"/>
        <attempts timestamp="1457101969012"/>
        <attempts timestamp="1457101994816"/>
        <attempts timestamp="1457101997184"/>
        <attempts timestamp="1457102671245"/>
        <attempts timestamp="1457102671463"/>
        <attempts timestamp="1457102671706"/>
        <attempts timestamp="1457102672074"/>
        <attempts timestamp="1457102672942"/>
        <attempts timestamp="1457102676345"/>
        <attempts timestamp="1457102676728"/>
        <attempts timestamp="1457102677046"/>
        <attempts timestamp="1457102677264"/>
        <attempts timestamp="1457102677529"/>
        <attempts timestamp="1457102677900"/>
        <attempts timestamp="1457102678869"/>
        <attempts timestamp="1457102679748"/>
        <attempts timestamp="1457102698536"/>
        <attempts timestamp="1457102708213"/>
        <attempts timestamp="1457102718729"/>
        <attempts timestamp="1457102721037"/>
        <attempts timestamp="1457102721958"/>
        <attempts timestamp="1457102723472"/>
        <attempts timestamp="1457102724404"/>
        <attempts timestamp="1457102725357"/>
        <attempts timestamp="1457102726465"/>
        <attempts timestamp="1457102727855"/>
        <attempts timestamp="1457102729224"/>
        <attempts timestamp="1457102739748"/>
        <attempts timestamp="1457102751358"/>
        <attempts timestamp="1457102757685"/>
        <attempts timestamp="1457102760884"/>
        <attempts timestamp="1457102766848"/>
        <attempts timestamp="1457102826010"/>
        <attempts timestamp="1457102827445"/>
        <attempts timestamp="1457102832788"/>
        <attempts timestamp="1457102835805"/>
        <attempts timestamp="1457102850371"/>
        <attempts timestamp="1457102856285"/>
        <attempts timestamp="1457102867171"/>
        <attempts timestamp="1457102868048"/>
        <attempts timestamp="1457102870112"/>
        <attempts timestamp="1457102875822"/>
        <attempts timestamp="1457103281758"/>
        <attempts timestamp="1457103282063"/>
        <attempts timestamp="1457103282306"/>
        <attempts timestamp="1457103282547"/>
        <attempts timestamp="1457103283019"/>
        <attempts timestamp="1457103287249"/>
        <attempts timestamp="1457103287453"/>
        <attempts timestamp="1457103287887"/>
        <attempts timestamp="1457103288168"/>
        <attempts timestamp="1457103288513"/>
        <attempts timestamp="1457103290730"/>
        <attempts timestamp="1457103294477"/>
      </proposals>
      <proposals xsi:type="workbench:CommandExecutionProposal" question="/0/@parts.2/@tasks.2/@q" answer="/0/@parts.2/@tasks.2/@a" performedCount="58">
        <attempts timestamp="1457101502107"/>
        <attempts timestamp="1457101505398"/>
        <attempts timestamp="1457101684870"/>
        <attempts timestamp="1457101686553"/>
        <attempts timestamp="1457101704644"/>
        <attempts timestamp="1457101716464"/>
        <attempts timestamp="1457101732709"/>
        <attempts timestamp="1457101744020"/>
        <attempts timestamp="1457101745591"/>
        <attempts timestamp="1457101869922"/>
        <attempts timestamp="1457101879384"/>
        <attempts timestamp="1457101892419"/>
        <attempts timestamp="1457101895744"/>
        <attempts timestamp="1457101896660"/>
        <attempts timestamp="1457101897234"/>
        <attempts timestamp="1457101899326"/>
        <attempts timestamp="1457101900928"/>
        <attempts timestamp="1457101903323"/>
        <attempts timestamp="1457101905260"/>
        <attempts timestamp="1457101906342"/>
        <attempts timestamp="1457101964723"/>
        <attempts timestamp="1457101965217"/>
        <attempts timestamp="1457101967942"/>
        <attempts timestamp="1457101970669"/>
        <attempts timestamp="1457101971892"/>
        <attempts timestamp="1457101972949"/>
        <attempts timestamp="1457102673873"/>
        <attempts timestamp="1457102675619"/>
        <attempts timestamp="1457102681061"/>
        <attempts timestamp="1457102682093"/>
        <attempts timestamp="1457102700296"/>
        <attempts timestamp="1457102701188"/>
        <attempts timestamp="1457102702540"/>
        <attempts timestamp="1457102704106"/>
        <attempts timestamp="1457102705229"/>
        <attempts timestamp="1457102706413"/>
        <attempts timestamp="1457102730151"/>
        <attempts timestamp="1457102732776"/>
        <attempts timestamp="1457102734063"/>
        <attempts timestamp="1457102735873"/>
        <attempts timestamp="1457102736995"/>
        <attempts timestamp="1457102738028"/>
        <attempts timestamp="1457102829192"/>
        <attempts timestamp="1457102830556"/>
        <attempts timestamp="1457102831167"/>
        <attempts timestamp="1457102833665"/>
        <attempts timestamp="1457102837605"/>
        <attempts timestamp="1457102838571"/>
        <attempts timestamp="1457102840166"/>
        <attempts timestamp="1457102842688"/>
        <attempts timestamp="1457102843838"/>
        <attempts timestamp="1457102844802"/>
        <attempts timestamp="1457102846510"/>
        <attempts timestamp="1457102851888"/>
        <attempts timestamp="1457102853927"/>
        <attempts timestamp="1457103283797"/>
        <attempts timestamp="1457103286485"/>
        <attempts timestamp="1457103295852"/>
      </proposals>
      <proposals xsi:type="workbench:PartTaskProposal" question="/0/@parts.2/@tasks.3/@q" answer="/0/@parts.2/@tasks.3/@a" performedCount="10">
        <attempts timestamp="1457101478080"/>
        <attempts timestamp="1457101665749"/>
        <attempts timestamp="1457101722866"/>
        <attempts timestamp="1457101750229"/>
        <attempts timestamp="1457101871338"/>
        <attempts timestamp="1457101933302"/>
        <attempts timestamp="1457101976467"/>
        <attempts timestamp="1457102742736"/>
        <attempts timestamp="1457102858637"/>
        <attempts timestamp="1457103279503"/>
      </proposals>
    </proposals>
  </exercise:ExerciseProposals>
</xmi:XMI>
