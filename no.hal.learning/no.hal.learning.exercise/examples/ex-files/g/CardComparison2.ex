<?xml version="1.0" encoding="UTF-8"?>
<xmi:XMI xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:exercise="platform:/plugin/no.hal.learning.exercise.model/model/exercise.ecore" xmlns:jdt="platform:/plugin/no.hal.learning.exercise.jdt/model/jdt-exercise.ecore" xmlns:junit="platform:/plugin/no.hal.learning.exercise.junit/model/junit-exercise.ecore" xmlns:workbench="platform:/plugin/no.hal.learning.exercise.workbench/model/workbench-exercise.ecore">
  <exercise:Exercise>
    <parts xsi:type="exercise:ExercisePart" title="CardContainer">
      <tasks xsi:type="exercise:Task">
        <q xsi:type="exercise:StringQuestion" question="Write source code for the CardComparator class."/>
        <a xsi:type="jdt:JdtSourceEditAnswer" className="interfaces.CardComparator"/>
      </tasks>
      <tasks xsi:type="exercise:Task">
        <q xsi:type="exercise:StringQuestion" question="Run the CardComparatorTest JUnit test."/>
        <a xsi:type="junit:JunitTestAnswer" testRunName="interfaces.CardComparatorTest"/>
      </tasks>
    </parts>
    <parts xsi:type="exercise:ExercisePart" title="Tool usage">
      <tasks xsi:type="exercise:Task">
        <q xsi:type="exercise:StringQuestion" question="Use breakpoints to debug code."/>
        <a xsi:type="workbench:DebugEventAnswer" action="suspend.breakpoint"/>
      </tasks>
      <tasks xsi:type="exercise:Task">
        <q xsi:type="exercise:StringQuestion" question="Use the debug command Step Over"/>
        <a xsi:type="workbench:CommandExecutionAnswer" elementId="org.eclipse.debug.ui.commands.StepOver" action="executeSuccess"/>
      </tasks>
      <tasks xsi:type="exercise:Task">
        <q xsi:type="exercise:StringQuestion" question="Use the debug command Step Into"/>
        <a xsi:type="workbench:CommandExecutionAnswer" elementId="org.eclipse.debug.ui.commands.StepInto" action="executeSuccess"/>
      </tasks>
      <tasks xsi:type="exercise:Task">
        <q xsi:type="exercise:StringQuestion" question="Use the Variables view"/>
        <a xsi:type="workbench:PartTaskAnswer" elementId="org.eclipse.debug.ui.VariableView" action="activated"/>
      </tasks>
    </parts>
  </exercise:Exercise>
  <exercise:ExerciseProposals exercise="/0">
    <proposals exercisePart="/0/@parts.0">
      <proposals xsi:type="jdt:JdtSourceEditProposal" question="/0/@parts.0/@tasks.0/@q" answer="/0/@parts.0/@tasks.0/@a">
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457350621625" sizeMeasure="9" errorCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package interfaces;&#xA;&#xA;import java.util.Comparator;&#xA;&#xA;public class CardComparator implements Comparator&lt;Card>{&#xA;&#xA;&#x9;&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457351049329" sizeMeasure="15">
          <edit xsi:type="exercise:StringEdit" storedString="package interfaces;&#xA;&#xA;import java.util.Comparator;&#xA;&#xA;public class CardComparator implements Comparator&lt;Card>{&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int compare(Card c1, Card c2) {&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;return 0;&#xA;&#x9;}&#xA;&#xA;&#x9;&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457351176560" sizeMeasure="14">
          <edit xsi:type="exercise:StringEdit" storedString="package interfaces;&#xA;&#xA;import java.util.Comparator;&#xA;&#xA;public class CardComparator implements Comparator&lt;Card>{&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int compare(Card c1, Card c2) {&#xA;&#x9;&#x9;return c1.compareTo(c2);&#xA;&#x9;}&#xA;&#xA;&#x9;&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457352290887" sizeMeasure="19">
          <edit xsi:type="exercise:StringEdit" storedString="package interfaces;&#xA;&#xA;import java.util.Comparator;&#xA;&#xA;public class CardComparator implements Comparator&lt;Card>{&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int compare(Card c1, Card c2) {&#xA;&#x9;&#x9;return c1.compareTo(c2);&#xA;&#x9;}&#xA;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;CardComparator program = new CardComparator();&#xA;&#x9;&#x9;Card s1 = new Card('S',1);&#xA;&#x9;&#x9;Card h2 = new Card('H',2);&#xA;&#x9;&#x9;System.out.println(program.compare(s1, h2));&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457352701472" sizeMeasure="19">
          <edit xsi:type="exercise:StringEdit" storedString="package interfaces;&#xA;&#xA;import java.util.Comparator;&#xA;&#xA;public class CardComparator implements Comparator&lt;Card>{&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int compare(Card c1, Card c2) {&#xA;&#x9;&#x9;return c1.compareTo(c2);&#xA;&#x9;}&#xA;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;CardComparator program = new CardComparator();&#xA;&#x9;&#x9;Card s1 = new Card('D',1);&#xA;&#x9;&#x9;Card h2 = new Card('H',2);&#xA;&#x9;&#x9;System.out.println(program.compare(s1, h2));&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457352708839" sizeMeasure="19">
          <edit xsi:type="exercise:StringEdit" storedString="package interfaces;&#xA;&#xA;import java.util.Comparator;&#xA;&#xA;public class CardComparator implements Comparator&lt;Card>{&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int compare(Card c1, Card c2) {&#xA;&#x9;&#x9;return c1.compareTo(c2);&#xA;&#x9;}&#xA;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;CardComparator program = new CardComparator();&#xA;&#x9;&#x9;Card s1 = new Card('H',1);&#xA;&#x9;&#x9;Card h2 = new Card('H',2);&#xA;&#x9;&#x9;System.out.println(program.compare(s1, h2));&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457352733010" sizeMeasure="19">
          <edit xsi:type="exercise:StringEdit" storedString="package interfaces;&#xA;&#xA;import java.util.Comparator;&#xA;&#xA;public class CardComparator implements Comparator&lt;Card>{&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int compare(Card c1, Card c2) {&#xA;&#x9;&#x9;return c1.compareTo(c2);&#xA;&#x9;}&#xA;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;CardComparator program = new CardComparator();&#xA;&#x9;&#x9;Card s1 = new Card('H',2);&#xA;&#x9;&#x9;Card h2 = new Card('H',2);&#xA;&#x9;&#x9;System.out.println(program.compare(s1, h2));&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457353417656" sizeMeasure="22" warningCount="2">
          <edit xsi:type="exercise:StringEdit" storedString="package interfaces;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Arrays;&#xA;import java.util.Comparator;&#xA;&#xA;public class CardComparator implements Comparator&lt;Card>{&#xA;&#xA;&#x9;private boolean ace;&#xA;&#x9;private ArrayList&lt;Character> orderedSuit = (ArrayList&lt;Character>) Arrays.asList('S','H','D','C');&#xA;&#x9;public CardComparator(boolean ace, char highestSuit){&#xA;&#x9;&#x9;this.ace = ace;&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public int compare(Card c1, Card c2) {&#xA;&#x9;&#x9;return 0;&#xA;&#x9;}&#xA;&#x9;&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457353493056" sizeMeasure="26" warningCount="2">
          <edit xsi:type="exercise:StringEdit" storedString="package interfaces;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Arrays;&#xA;import java.util.Comparator;&#xA;&#xA;public class CardComparator implements Comparator&lt;Card>{&#xA;&#xA;&#x9;private int highestCard;&#xA;&#x9;private ArrayList&lt;Character> orderedSuit = (ArrayList&lt;Character>) Arrays.asList('S','H','D','C');&#xA;&#x9;public CardComparator(boolean ace, char highestSuit){&#xA;&#x9;&#x9;if(ace){&#xA;&#x9;&#x9;&#x9;highestCard = 1;&#xA;&#x9;&#x9;} else{&#xA;&#x9;&#x9;&#x9;highestCard = 13;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public int compare(Card c1, Card c2) {&#xA;&#x9;&#x9;return 0;&#xA;&#x9;}&#xA;&#x9;&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457353553867" sizeMeasure="28" warningCount="2">
          <edit xsi:type="exercise:StringEdit" storedString="package interfaces;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Arrays;&#xA;import java.util.Comparator;&#xA;&#xA;public class CardComparator implements Comparator&lt;Card>{&#xA;&#xA;&#x9;private int highestCard;&#xA;&#x9;private ArrayList&lt;Character> orderedSuit = (ArrayList&lt;Character>) Arrays.asList('S','H','D','C');&#xA;&#x9;public CardComparator(boolean ace, char highestSuit){&#xA;&#x9;&#x9;if(ace){&#xA;&#x9;&#x9;&#x9;highestCard = 1;&#xA;&#x9;&#x9;} else{&#xA;&#x9;&#x9;&#x9;highestCard = 13;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if(highestSuit != ' '){&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public int compare(Card c1, Card c2) {&#xA;&#x9;&#x9;return 0;&#xA;&#x9;}&#xA;&#x9;&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457353617078" sizeMeasure="28" warningCount="2">
          <edit xsi:type="exercise:StringEdit" storedString="package interfaces;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Arrays;&#xA;import java.util.Comparator;&#xA;&#xA;public class CardComparator implements Comparator&lt;Card>{&#xA;&#xA;&#x9;private int highestCard;&#xA;&#x9;private ArrayList&lt;Character> suitList = (ArrayList&lt;Character>) Arrays.asList('S','H','D','C');&#xA;&#x9;public CardComparator(boolean ace, char highestSuit){&#xA;&#x9;&#x9;if(ace){&#xA;&#x9;&#x9;&#x9;highestCard = 1;&#xA;&#x9;&#x9;} else{&#xA;&#x9;&#x9;&#x9;highestCard = 13;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if(highestSuit != ' '){&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public int compare(Card c1, Card c2) {&#xA;&#x9;&#x9;return 0;&#xA;&#x9;}&#xA;&#x9;&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457353787917" sizeMeasure="29" warningCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package interfaces;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Arrays;&#xA;import java.util.Comparator;&#xA;&#xA;public class CardComparator implements Comparator&lt;Card>{&#xA;&#xA;&#x9;private int highestCard;&#xA;&#x9;private ArrayList&lt;Character> suitList = (ArrayList&lt;Character>) Arrays.asList('S','H','D','C');&#xA;&#x9;public CardComparator(boolean ace, char highestSuit){&#xA;&#x9;&#x9;if(ace){&#xA;&#x9;&#x9;&#x9;highestCard = 1;&#xA;&#x9;&#x9;} else{&#xA;&#x9;&#x9;&#x9;highestCard = 13;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if(highestSuit != ' '){&#xA;&#x9;&#x9;&#x9;suitList.remove(highestSuit);&#xA;&#x9;&#x9;&#x9;suitList.add(0, highestSuit);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public int compare(Card c1, Card c2) {&#xA;&#x9;&#x9;return 0;&#xA;&#x9;}&#xA;&#x9;&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457353810179" sizeMeasure="29" warningCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package interfaces;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Arrays;&#xA;import java.util.Comparator;&#xA;&#xA;public class CardComparator implements Comparator&lt;Card>{&#xA;&#xA;&#x9;private int highestCard;&#xA;&#x9;private ArrayList&lt;Character> suitList = (ArrayList&lt;Character>) Arrays.asList('S','H','D','C');&#xA;&#x9;public CardComparator(boolean ace, char highestSuit){&#xA;&#x9;&#x9;if(ace){&#xA;&#x9;&#x9;&#x9;highestCard = 1;&#xA;&#x9;&#x9;} else{&#xA;&#x9;&#x9;&#x9;highestCard = 13;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if(highestSuit != ' '){&#xA;&#x9;&#x9;&#x9;suitList.remove(highestSuit);&#xA;&#x9;&#x9;&#x9;suitList.add(0, highestSuit);  //order the list again so that the current highest suit is highestSuit&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public int compare(Card c1, Card c2) {&#xA;&#x9;&#x9;return 0;&#xA;&#x9;}&#xA;&#x9;&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457353920524" sizeMeasure="30" warningCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package interfaces;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Arrays;&#xA;import java.util.Comparator;&#xA;&#xA;public class CardComparator implements Comparator&lt;Card>{&#xA;&#xA;&#x9;private int highestCard;&#xA;&#x9;private ArrayList&lt;Character> suitList = (ArrayList&lt;Character>) Arrays.asList('S','H','D','C');&#xA;&#x9;public CardComparator(boolean ace, char highestSuit){&#xA;&#x9;&#x9;if(ace){&#xA;&#x9;&#x9;&#x9;highestCard = 1;&#xA;&#x9;&#x9;} else{&#xA;&#x9;&#x9;&#x9;highestCard = 13;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if(highestSuit != ' '){&#xA;&#x9;&#x9;&#x9;suitList.remove(highestSuit);&#xA;&#x9;&#x9;&#x9;suitList.add(0, highestSuit);  //order the list again so that the current highest suit is highestSuit&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public int compare(Card card1, Card card2) {&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;return 0;&#xA;&#x9;}&#xA;&#x9;&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457354012085" sizeMeasure="32" warningCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package interfaces;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Arrays;&#xA;import java.util.Comparator;&#xA;&#xA;public class CardComparator implements Comparator&lt;Card>{&#xA;&#xA;&#x9;private int highestCard;&#xA;&#x9;private ArrayList&lt;Character> suitList = (ArrayList&lt;Character>) Arrays.asList('S','H','D','C');&#xA;&#x9;public CardComparator(boolean ace, char highestSuit){&#xA;&#x9;&#x9;if(ace){&#xA;&#x9;&#x9;&#x9;highestCard = 1;&#xA;&#x9;&#x9;} else{&#xA;&#x9;&#x9;&#x9;highestCard = 13;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if(highestSuit != ' '){&#xA;&#x9;&#x9;&#x9;suitList.remove(highestSuit);&#xA;&#x9;&#x9;&#x9;suitList.add(0, highestSuit);  //order the list again so that the current highest suit is highestSuit&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public int compare(Card card1, Card card2) {&#xA;&#x9;&#x9;if(suitList.indexOf(card1.getSuit()) > suitList.indexOf(card2.getSuit())){&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return 0;&#xA;&#x9;}&#xA;&#x9;&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457354489934" sizeMeasure="43">
          <edit xsi:type="exercise:StringEdit" storedString="package interfaces;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Arrays;&#xA;import java.util.Comparator;&#xA;&#xA;public class CardComparator implements Comparator&lt;Card>{&#xA;&#xA;&#x9;private int highestCard;&#xA;&#x9;private ArrayList&lt;Character> suitList = (ArrayList&lt;Character>) Arrays.asList('S','H','D','C');&#xA;&#x9;public CardComparator(boolean ace, char highestSuit){&#xA;&#x9;&#x9;if(ace){&#xA;&#x9;&#x9;&#x9;highestCard = 1;&#xA;&#x9;&#x9;} else{&#xA;&#x9;&#x9;&#x9;highestCard = 13;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if(highestSuit != ' '){&#xA;&#x9;&#x9;&#x9;suitList.remove(highestSuit);&#xA;&#x9;&#x9;&#x9;suitList.add(0, highestSuit);  //order the list again so that the current highest suit is highestSuit&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public int compare(Card card1, Card card2) {&#xA;&#x9;&#x9;if(suitList.indexOf(card1.getSuit()) &lt; suitList.indexOf(card2.getSuit())){&#xA;//&#x9;&#x9;&#x9;The color of card1 is higher&#xA;&#x9;&#x9;&#x9;return 1;&#xA;&#x9;&#x9;} else if(suitList.indexOf(card1.getSuit()) > suitList.indexOf(card2.getSuit())){&#xA;//&#x9;&#x9;&#x9;The color of card2 is higher&#xA;&#x9;&#x9;&#x9;return -1;&#xA;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;if(highestCard == 1){&#xA;&#x9;&#x9;&#x9;&#x9;int n = 2;&#xA;&#x9;&#x9;&#x9;&#x9;while(n &lt; 14){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;return 0;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457355289204" sizeMeasure="46" warningCount="2">
          <edit xsi:type="exercise:StringEdit" storedString="package interfaces;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Arrays;&#xA;import java.util.Comparator;&#xA;&#xA;public class CardComparator implements Comparator&lt;Card>{&#xA;&#xA;&#x9;private boolean aceHighest;&#xA;&#x9;private int max;&#xA;&#x9;private int min;&#xA;&#x9;private ArrayList&lt;Character> suitList = (ArrayList&lt;Character>) Arrays.asList('S','H','D','C');&#xA;&#x9;public CardComparator(boolean aceHighest, char highestSuit){&#xA;&#x9;&#x9;this.aceHighest = aceHighest;&#xA;&#x9;&#x9;if(highestSuit != ' '){&#xA;&#x9;&#x9;&#x9;suitList.remove(highestSuit);&#xA;&#x9;&#x9;&#x9;suitList.add(0, highestSuit);  //order the list again so that the current highest suit is highestSuit&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public int compare(Card card1, Card card2) {&#xA;&#x9;&#x9;if(suitList.indexOf(card1.getSuit()) &lt; suitList.indexOf(card2.getSuit())){&#xA;//&#x9;&#x9;&#x9;The color of card1 is higher&#xA;&#x9;&#x9;&#x9;return 1;&#xA;&#x9;&#x9;} else if(suitList.indexOf(card1.getSuit()) > suitList.indexOf(card2.getSuit())){&#xA;//&#x9;&#x9;&#x9;The color of card2 is higher&#xA;&#x9;&#x9;&#x9;return -1;&#xA;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;if(card1.getFace() == card2.getFace()){ //if the cards are similar, return 0&#xA;&#x9;&#x9;&#x9;&#x9;return 0;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if(aceHighest){ //if 1 or ace is the highest card&#xA;&#x9;&#x9;&#x9;&#x9;max = 14;&#xA;&#x9;&#x9;&#x9;&#x9;min = 2;&#xA;&#x9;&#x9;&#x9;} else { //if ace is not the highest card&#xA;&#x9;&#x9;&#x9;&#x9;max = 13;&#xA;&#x9;&#x9;&#x9;&#x9;min = 1;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return 0;&#xA;&#x9;}&#xA;&#x9;&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457355390683" sizeMeasure="54">
          <edit xsi:type="exercise:StringEdit" storedString="package interfaces;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Arrays;&#xA;import java.util.Comparator;&#xA;&#xA;public class CardComparator implements Comparator&lt;Card>{&#xA;&#xA;&#x9;private boolean aceHighest;&#xA;&#x9;private int max;&#xA;&#x9;private int min;&#xA;&#x9;private ArrayList&lt;Character> suitList = (ArrayList&lt;Character>) Arrays.asList('S','H','D','C');&#xA;&#x9;public CardComparator(boolean aceHighest, char highestSuit){&#xA;&#x9;&#x9;this.aceHighest = aceHighest;&#xA;&#x9;&#x9;if(highestSuit != ' '){&#xA;&#x9;&#x9;&#x9;suitList.remove(highestSuit);&#xA;&#x9;&#x9;&#x9;suitList.add(0, highestSuit);  //order the list again so that the current highest suit is highestSuit&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public int compare(Card card1, Card card2) {&#xA;&#x9;&#x9;if(suitList.indexOf(card1.getSuit()) &lt; suitList.indexOf(card2.getSuit())){&#xA;//&#x9;&#x9;&#x9;The color of card1 is higher&#xA;&#x9;&#x9;&#x9;return 1;&#xA;&#x9;&#x9;} else if(suitList.indexOf(card1.getSuit()) > suitList.indexOf(card2.getSuit())){&#xA;//&#x9;&#x9;&#x9;The color of card2 is higher&#xA;&#x9;&#x9;&#x9;return -1;&#xA;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;if(card1.getFace() == card2.getFace()){ //if the cards are similar, return 0&#xA;&#x9;&#x9;&#x9;&#x9;return 0;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if(aceHighest){ //if 1 or ace is the highest card&#xA;&#x9;&#x9;&#x9;&#x9;max = 14;&#xA;&#x9;&#x9;&#x9;&#x9;min = 2;&#xA;&#x9;&#x9;&#x9;} else { //if ace is not the highest card&#xA;&#x9;&#x9;&#x9;&#x9;max = 13;&#xA;&#x9;&#x9;&#x9;&#x9;min = 1;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;while(min &lt; max){&#xA;&#x9;&#x9;&#x9;&#x9;if(card1.getFace() == min){ //if card1 is smaller&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;return -1;&#xA;&#x9;&#x9;&#x9;&#x9;}else if(card2.getFace() == min){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;return 1;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;min++;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return 0;&#xA;&#x9;}&#xA;&#x9;&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457355414987" sizeMeasure="54">
          <edit xsi:type="exercise:StringEdit" storedString="package interfaces;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Arrays;&#xA;import java.util.Comparator;&#xA;&#xA;public class CardComparator implements Comparator&lt;Card>{&#xA;&#xA;&#x9;private boolean aceHighest;&#xA;&#x9;private int max;&#xA;&#x9;private int min;&#xA;&#x9;private ArrayList&lt;Character> suitList = (ArrayList&lt;Character>) Arrays.asList('S','H','D','C');&#xA;&#x9;public CardComparator(boolean aceHighest, char highestSuit){&#xA;&#x9;&#x9;this.aceHighest = aceHighest;&#xA;&#x9;&#x9;if(highestSuit != ' '){&#xA;&#x9;&#x9;&#x9;suitList.remove(highestSuit);&#xA;&#x9;&#x9;&#x9;suitList.add(0, highestSuit);  //order the list again so that the current highest suit is highestSuit&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public int compare(Card card1, Card card2) {&#xA;&#x9;&#x9;if(suitList.indexOf(card1.getSuit()) &lt; suitList.indexOf(card2.getSuit())){&#xA;//&#x9;&#x9;&#x9;The color of card1 is higher&#xA;&#x9;&#x9;&#x9;return 1;&#xA;&#x9;&#x9;} else if(suitList.indexOf(card1.getSuit()) > suitList.indexOf(card2.getSuit())){&#xA;//&#x9;&#x9;&#x9;The color of card2 is higher&#xA;&#x9;&#x9;&#x9;return -1;&#xA;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;if(card1.getFace() == card2.getFace()){ //if the cards are similar, return 0&#xA;&#x9;&#x9;&#x9;&#x9;return 0;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if(aceHighest){ //if 1 or ace is the highest card&#xA;&#x9;&#x9;&#x9;&#x9;max = 14;&#xA;&#x9;&#x9;&#x9;&#x9;min = 2;&#xA;&#x9;&#x9;&#x9;} else { //if ace is not the highest card&#xA;&#x9;&#x9;&#x9;&#x9;max = 13;&#xA;&#x9;&#x9;&#x9;&#x9;min = 1;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;while(min &lt; max){&#xA;&#x9;&#x9;&#x9;&#x9;if(card1.getFace() == min){ //if card1 is smaller&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;return -1;&#xA;&#x9;&#x9;&#x9;&#x9;}else if(card2.getFace() == min){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;return 1;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;min++;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return 0;&#xA;&#x9;}&#xA;&#x9;&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457355446477" sizeMeasure="55" errorCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package interfaces;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Arrays;&#xA;import java.util.Comparator;&#xA;&#xA;public class CardComparator implements Comparator&lt;Card>{&#xA;&#xA;&#x9;private boolean aceHighest;&#xA;&#x9;private int max;&#xA;&#x9;private int min;&#xA;&#x9;private ArrayList&lt;Character> suitList = (ArrayList&lt;Character>) Arrays.asList('S','H','D','C');&#xA;&#x9;public CardComparator(boolean aceHighest, char highestSuit){&#xA;&#x9;&#x9;this.aceHighest = aceHighest;&#xA;&#x9;&#x9;if(highestSuit != ' '){&#xA;&#x9;&#x9;&#x9;suitList.remove(highestSuit);&#xA;&#x9;&#x9;&#x9;suitList.add(0, highestSuit);  //order the list again so that the current highest suit is highestSuit&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public int compare(Card card1, Card card2) {&#xA;&#x9;&#x9;if(suitList.indexOf(card1.getSuit()) &lt; suitList.indexOf(card2.getSuit())){&#xA;//&#x9;&#x9;&#x9;The color of card1 is higher&#xA;&#x9;&#x9;&#x9;return 1;&#xA;&#x9;&#x9;} else if(suitList.indexOf(card1.getSuit()) > suitList.indexOf(card2.getSuit())){&#xA;//&#x9;&#x9;&#x9;The color of card2 is higher&#xA;&#x9;&#x9;&#x9;return -1;&#xA;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;if(card1.getFace() == card2.getFace()){ //if the cards are similar, return 0&#xA;&#x9;&#x9;&#x9;&#x9;return 0;&#xA;&#x9;&#x9;&#x9;}else {&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;if(aceHighest){ //if 1 or ace is the highest card&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;max = 14;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;min = 2;&#xA;&#x9;&#x9;&#x9;&#x9;} else { //if ace is not the highest card&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;max = 13;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;min = 1;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;while(min &lt; max){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(card1.getFace() == min){ //if card1 is smaller&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;return -1;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}else if(card2.getFace() == min){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;return 1;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;min++;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457355457086" sizeMeasure="56">
          <edit xsi:type="exercise:StringEdit" storedString="package interfaces;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Arrays;&#xA;import java.util.Comparator;&#xA;&#xA;public class CardComparator implements Comparator&lt;Card>{&#xA;&#xA;&#x9;private boolean aceHighest;&#xA;&#x9;private int max;&#xA;&#x9;private int min;&#xA;&#x9;private ArrayList&lt;Character> suitList = (ArrayList&lt;Character>) Arrays.asList('S','H','D','C');&#xA;&#x9;public CardComparator(boolean aceHighest, char highestSuit){&#xA;&#x9;&#x9;this.aceHighest = aceHighest;&#xA;&#x9;&#x9;if(highestSuit != ' '){&#xA;&#x9;&#x9;&#x9;suitList.remove(highestSuit);&#xA;&#x9;&#x9;&#x9;suitList.add(0, highestSuit);  //order the list again so that the current highest suit is highestSuit&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public int compare(Card card1, Card card2) {&#xA;&#x9;&#x9;if(suitList.indexOf(card1.getSuit()) &lt; suitList.indexOf(card2.getSuit())){&#xA;//&#x9;&#x9;&#x9;The color of card1 is higher&#xA;&#x9;&#x9;&#x9;return 1;&#xA;&#x9;&#x9;} else if(suitList.indexOf(card1.getSuit()) > suitList.indexOf(card2.getSuit())){&#xA;//&#x9;&#x9;&#x9;The color of card2 is higher&#xA;&#x9;&#x9;&#x9;return -1;&#xA;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;if(card1.getFace() == card2.getFace()){ //if the cards are similar, return 0&#xA;&#x9;&#x9;&#x9;&#x9;return 0;&#xA;&#x9;&#x9;&#x9;}else {&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if(aceHighest){ //if 1 or ace is the highest card&#xA;&#x9;&#x9;&#x9;&#x9;max = 14;&#xA;&#x9;&#x9;&#x9;&#x9;min = 2;&#xA;&#x9;&#x9;&#x9;} else { //if ace is not the highest card&#xA;&#x9;&#x9;&#x9;&#x9;max = 13;&#xA;&#x9;&#x9;&#x9;&#x9;min = 1;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;while(min &lt; max){&#xA;&#x9;&#x9;&#x9;&#x9;if(card1.getFace() == min){ //if card1 is smaller&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;return -1;&#xA;&#x9;&#x9;&#x9;&#x9;}else if(card2.getFace() == min){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;return 1;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;min++;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return 0;&#xA;&#x9;}&#xA;&#x9;&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457355550652" sizeMeasure="56">
          <edit xsi:type="exercise:StringEdit" storedString="package interfaces;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Arrays;&#xA;import java.util.Comparator;&#xA;&#xA;public class CardComparator implements Comparator&lt;Card>{&#xA;&#xA;&#x9;private boolean aceHighest;&#xA;&#x9;private int max;&#xA;&#x9;private int min;&#xA;&#x9;private ArrayList&lt;Character> suitList = (ArrayList&lt;Character>) Arrays.asList('S','H','D','C');&#xA;&#x9;public CardComparator(boolean aceHighest, char highestSuit){&#xA;&#x9;&#x9;this.aceHighest = aceHighest;&#xA;&#x9;&#x9;if(highestSuit != ' '){&#xA;&#x9;&#x9;&#x9;suitList.remove(highestSuit);&#xA;&#x9;&#x9;&#x9;suitList.add(0, highestSuit);  //order the list again so that the current highest suit is highestSuit&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public int compare(Card card1, Card card2) {&#xA;&#x9;&#x9;if(suitList.indexOf(card1.getSuit()) &lt; suitList.indexOf(card2.getSuit())){&#xA;//&#x9;&#x9;&#x9;The color of card1 is higher&#xA;&#x9;&#x9;&#x9;return 1;&#xA;&#x9;&#x9;} else if(suitList.indexOf(card1.getSuit()) > suitList.indexOf(card2.getSuit())){&#xA;//&#x9;&#x9;&#x9;The color of card2 is higher&#xA;&#x9;&#x9;&#x9;return -1;&#xA;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;if(card1.getFace() == card2.getFace()){ //if the cards are similar, return 0&#xA;&#x9;&#x9;&#x9;&#x9;return 0;&#xA;&#x9;&#x9;&#x9;}else {&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if(aceHighest){ //if 1 or ace is the highest card&#xA;&#x9;&#x9;&#x9;&#x9;max = 14;&#xA;&#x9;&#x9;&#x9;&#x9;min = 2;&#xA;&#x9;&#x9;&#x9;} else { //if ace is not the highest card&#xA;&#x9;&#x9;&#x9;&#x9;max = 13;&#xA;&#x9;&#x9;&#x9;&#x9;min = 1;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;while(min &lt; max){&#xA;&#x9;&#x9;&#x9;&#x9;if(card1.getFace() == min){ //if card1 is smaller&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;return -1;&#xA;&#x9;&#x9;&#x9;&#x9;}else if(card2.getFace() == min){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;return 1;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;min++;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return 0;&#xA;&#x9;}&#xA;&#x9;&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457356114372" sizeMeasure="56">
          <edit xsi:type="exercise:StringEdit" storedString="package interfaces;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Arrays;&#xA;import java.util.Comparator;&#xA;&#xA;public class CardComparator implements Comparator&lt;Card>{&#xA;&#xA;&#x9;private boolean aceHighest;&#xA;&#x9;private int max;&#xA;&#x9;private int min;&#xA;&#x9;private ArrayList&lt;Character> suitList = new ArrayList&lt;Character>(Arrays.asList('S','H','D','C'));&#xA;&#x9;public CardComparator(boolean aceHighest, char highestSuit){&#xA;&#x9;&#x9;this.aceHighest = aceHighest;&#xA;&#x9;&#x9;if(highestSuit != ' '){&#xA;&#x9;&#x9;&#x9;suitList.remove(highestSuit);&#xA;&#x9;&#x9;&#x9;suitList.add(0, highestSuit);  //order the list again so that the current highest suit is highestSuit&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public int compare(Card card1, Card card2) {&#xA;&#x9;&#x9;if(suitList.indexOf(card1.getSuit()) &lt; suitList.indexOf(card2.getSuit())){&#xA;//&#x9;&#x9;&#x9;The color of card1 is higher&#xA;&#x9;&#x9;&#x9;return 1;&#xA;&#x9;&#x9;} else if(suitList.indexOf(card1.getSuit()) > suitList.indexOf(card2.getSuit())){&#xA;//&#x9;&#x9;&#x9;The color of card2 is higher&#xA;&#x9;&#x9;&#x9;return -1;&#xA;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;if(card1.getFace() == card2.getFace()){ //if the cards are similar, return 0&#xA;&#x9;&#x9;&#x9;&#x9;return 0;&#xA;&#x9;&#x9;&#x9;}else {&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if(aceHighest){ //if 1 or ace is the highest card&#xA;&#x9;&#x9;&#x9;&#x9;max = 14;&#xA;&#x9;&#x9;&#x9;&#x9;min = 2;&#xA;&#x9;&#x9;&#x9;} else { //if ace is not the highest card&#xA;&#x9;&#x9;&#x9;&#x9;max = 13;&#xA;&#x9;&#x9;&#x9;&#x9;min = 1;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;while(min &lt; max){&#xA;&#x9;&#x9;&#x9;&#x9;if(card1.getFace() == min){ //if card1 is smaller&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;return -1;&#xA;&#x9;&#x9;&#x9;&#x9;}else if(card2.getFace() == min){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;return 1;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;min++;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return 0;&#xA;&#x9;}&#xA;&#x9;&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457356169219" sizeMeasure="56">
          <edit xsi:type="exercise:StringEdit" storedString="package interfaces;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Arrays;&#xA;import java.util.Comparator;&#xA;&#xA;public class CardComparator implements Comparator&lt;Card>{&#xA;&#xA;&#x9;private boolean aceHighest;&#xA;&#x9;private int max;&#xA;&#x9;private int min;&#xA;&#x9;private ArrayList&lt;Character> suitList = new ArrayList&lt;Character>(Arrays.asList('S','H','D','C'));&#xA;&#x9;public CardComparator(boolean aceHighest, char highestSuit){&#xA;&#x9;&#x9;this.aceHighest = aceHighest;&#xA;&#x9;&#x9;if(highestSuit != ' '){&#xA;&#x9;&#x9;&#x9;suitList.remove(highestSuit);&#xA;&#x9;&#x9;&#x9;suitList.add(0, highestSuit);  //order the list again so that the current highest suit is highestSuit&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public int compare(Card card1, Card card2) {&#xA;&#x9;&#x9;if(suitList.indexOf(card1.getSuit()) &lt; suitList.indexOf(card2.getSuit())){&#xA;//&#x9;&#x9;&#x9;The color of card1 is higher&#xA;&#x9;&#x9;&#x9;return 1;&#xA;&#x9;&#x9;} else if(suitList.indexOf(card1.getSuit()) > suitList.indexOf(card2.getSuit())){&#xA;//&#x9;&#x9;&#x9;The color of card2 is higher&#xA;&#x9;&#x9;&#x9;return -1;&#xA;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;if(card1.getFace() == card2.getFace()){ //if the cards are similar, return 0&#xA;&#x9;&#x9;&#x9;&#x9;return 0;&#xA;&#x9;&#x9;&#x9;}else {&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if(aceHighest){ //if 1 or ace is the highest card&#xA;&#x9;&#x9;&#x9;&#x9;max = 14;&#xA;&#x9;&#x9;&#x9;&#x9;min = 2;&#xA;&#x9;&#x9;&#x9;} else { //if ace is not the highest card&#xA;&#x9;&#x9;&#x9;&#x9;max = 13;&#xA;&#x9;&#x9;&#x9;&#x9;min = 1;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;while(min &lt; max){&#xA;&#x9;&#x9;&#x9;&#x9;if(card1.getFace() == min){ //if card1 is smaller&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;return -1;&#xA;&#x9;&#x9;&#x9;&#x9;}else if(card2.getFace() == min){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;return 1;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;min++;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return 0;&#xA;&#x9;}&#xA;&#x9;&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457356226859" sizeMeasure="56">
          <edit xsi:type="exercise:StringEdit" storedString="package interfaces;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Arrays;&#xA;import java.util.Comparator;&#xA;&#xA;public class CardComparator implements Comparator&lt;Card>{&#xA;&#xA;&#x9;private boolean aceHighest;&#xA;&#x9;private int max;&#xA;&#x9;private int min;&#xA;&#x9;private ArrayList&lt;Character> suitList = new ArrayList&lt;Character>(Arrays.asList('S','H','D','C'));&#xA;&#x9;public CardComparator(boolean aceHighest, char highestSuit){&#xA;&#x9;&#x9;this.aceHighest = aceHighest;&#xA;&#x9;&#x9;if(highestSuit != ' '){&#xA;&#x9;&#x9;&#x9;suitList.remove(suitList.indexOf(highestSuit));&#xA;&#x9;&#x9;&#x9;suitList.add(0, highestSuit);  //order the list again so that the current highest suit is highestSuit&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public int compare(Card card1, Card card2) {&#xA;&#x9;&#x9;if(suitList.indexOf(card1.getSuit()) &lt; suitList.indexOf(card2.getSuit())){&#xA;//&#x9;&#x9;&#x9;The color of card1 is higher&#xA;&#x9;&#x9;&#x9;return 1;&#xA;&#x9;&#x9;} else if(suitList.indexOf(card1.getSuit()) > suitList.indexOf(card2.getSuit())){&#xA;//&#x9;&#x9;&#x9;The color of card2 is higher&#xA;&#x9;&#x9;&#x9;return -1;&#xA;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;if(card1.getFace() == card2.getFace()){ //if the cards are similar, return 0&#xA;&#x9;&#x9;&#x9;&#x9;return 0;&#xA;&#x9;&#x9;&#x9;}else {&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;if(aceHighest){ //if 1 or ace is the highest card&#xA;&#x9;&#x9;&#x9;&#x9;max = 14;&#xA;&#x9;&#x9;&#x9;&#x9;min = 2;&#xA;&#x9;&#x9;&#x9;} else { //if ace is not the highest card&#xA;&#x9;&#x9;&#x9;&#x9;max = 13;&#xA;&#x9;&#x9;&#x9;&#x9;min = 1;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;while(min &lt; max){&#xA;&#x9;&#x9;&#x9;&#x9;if(card1.getFace() == min){ //if card1 is smaller&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;return -1;&#xA;&#x9;&#x9;&#x9;&#x9;}else if(card2.getFace() == min){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;return 1;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;min++;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return 0;&#xA;&#x9;}&#xA;&#x9;&#xA;&#xA;}&#xA;"/>
        </attempts>
      </proposals>
      <proposals xsi:type="junit:JunitTestProposal" question="/0/@parts.0/@tasks.1/@q" answer="/0/@parts.0/@tasks.1/@a" completion="0.5">
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457355498220" completion="0.0" errorCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457355580163" completion="0.0" errorCount="2"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457355583849" completion="0.0" errorCount="3"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457356244442" completion="0.25" successCount="1" errorCount="3"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457356245630" completion="0.4" successCount="2" errorCount="3"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457356246675" completion="0.5" successCount="3" errorCount="3"/>
      </proposals>
    </proposals>
    <proposals exercisePart="/0/@parts.1">
      <proposals xsi:type="workbench:DebugEventProposal" question="/0/@parts.1/@tasks.0/@q" answer="/0/@parts.1/@tasks.0/@a" completion="0.0" performedCount="28">
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
      </proposals>
      <proposals xsi:type="workbench:CommandExecutionProposal" question="/0/@parts.1/@tasks.1/@q" answer="/0/@parts.1/@tasks.1/@a" completion="0.0" performedCount="47">
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
      </proposals>
      <proposals xsi:type="workbench:CommandExecutionProposal" question="/0/@parts.1/@tasks.2/@q" answer="/0/@parts.1/@tasks.2/@a"/>
      <proposals xsi:type="workbench:PartTaskProposal" question="/0/@parts.1/@tasks.3/@q" answer="/0/@parts.1/@tasks.3/@a" completion="0.0" performedCount="5">
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
      </proposals>
    </proposals>
  </exercise:ExerciseProposals>
</xmi:XMI>
