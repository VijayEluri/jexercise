<?xml version="1.0" encoding="UTF-8"?>
<xmi:XMI xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:exercise="platform:/plugin/no.hal.learning.exercise.model/model/exercise.ecore" xmlns:jdt="platform:/plugin/no.hal.learning.exercise.jdt/model/jdt-exercise.ecore" xmlns:junit="platform:/plugin/no.hal.learning.exercise.junit/model/junit-exercise.ecore" xmlns:workbench="platform:/plugin/no.hal.learning.exercise.workbench/model/workbench-exercise.ecore">
  <exercise:Exercise>
    <parts xsi:type="exercise:ExercisePart" title="AbstractAccount">
      <tasks xsi:type="exercise:Task">
        <q xsi:type="exercise:StringQuestion" question="Write the source code for the abstract AbstractAccount class."/>
        <a xsi:type="jdt:JdtSourceEditAnswer" className="inheritance.AbstractAccount"/>
      </tasks>
      <tasks xsi:type="exercise:Task">
        <q xsi:type="exercise:StringQuestion" question="Write the source code for the DebitAccount class."/>
        <a xsi:type="jdt:JdtSourceEditAnswer" className="inheritance.DebitAccount"/>
      </tasks>
      <tasks xsi:type="exercise:Task">
        <q xsi:type="exercise:StringQuestion" question="Write the source code for the CreditAccount class."/>
        <a xsi:type="jdt:JdtSourceEditAnswer" className="inheritance.CreditAccount"/>
      </tasks>
      <tasks xsi:type="exercise:Task">
        <q xsi:type="exercise:StringQuestion" question="Write the source code for the SavingsAccount2 class."/>
        <a xsi:type="jdt:JdtSourceEditAnswer" className="inheritance.SavingsAccount2"/>
      </tasks>
      <tasks xsi:type="exercise:Task">
        <q xsi:type="exercise:StringQuestion" question="Run the DebitAccountTest JUnit test."/>
        <a xsi:type="junit:JunitTestAnswer" testRunName="inheritance.DebitAccountTest"/>
      </tasks>
      <tasks xsi:type="exercise:Task">
        <q xsi:type="exercise:StringQuestion" question="Run the CreditAccountTest JUnit test."/>
        <a xsi:type="junit:JunitTestAnswer" testRunName="inheritance.CreditAccountTest"/>
      </tasks>
      <tasks xsi:type="exercise:Task">
        <q xsi:type="exercise:StringQuestion" question="Run the SavingsAccount2Test JUnit test."/>
        <a xsi:type="junit:JunitTestAnswer" testRunName="inheritance.SavingsAccount2Test"/>
      </tasks>
    </parts>
    <parts xsi:type="exercise:ExercisePart" title="Tool usage">
      <tasks xsi:type="exercise:Task">
        <q xsi:type="exercise:StringQuestion" question="Use breakpoints to debug code."/>
        <a xsi:type="workbench:DebugEventAnswer" action="suspend.breakpoint"/>
      </tasks>
      <tasks xsi:type="exercise:Task">
        <q xsi:type="exercise:StringQuestion" question="Use the debug command Step Over"/>
        <a xsi:type="workbench:CommandExecutionAnswer" elementId="org.eclipse.debug.ui.commands.StepOver" action="executeSuccess"/>
      </tasks>
      <tasks xsi:type="exercise:Task">
        <q xsi:type="exercise:StringQuestion" question="Use the debug command Step Into"/>
        <a xsi:type="workbench:CommandExecutionAnswer" elementId="org.eclipse.debug.ui.commands.StepInto" action="executeSuccess"/>
      </tasks>
      <tasks xsi:type="exercise:Task">
        <q xsi:type="exercise:StringQuestion" question="Use the Variables view"/>
        <a xsi:type="workbench:PartTaskAnswer" elementId="org.eclipse.debug.ui.VariableView" action="activated"/>
      </tasks>
      <tasks xsi:type="exercise:Task">
        <q xsi:type="exercise:StringQuestion" question="Run the DebitAccount class."/>
        <a xsi:type="jdt:JdtLaunchAnswer" className="inheritance.DebitAccount"/>
      </tasks>
      <tasks xsi:type="exercise:Task">
        <q xsi:type="exercise:StringQuestion" question="Run the CreditAccount class."/>
        <a xsi:type="jdt:JdtLaunchAnswer" className="inheritance.CreditAccount"/>
      </tasks>
      <tasks xsi:type="exercise:Task">
        <q xsi:type="exercise:StringQuestion" question="Run the SavingsAccount2 class."/>
        <a xsi:type="jdt:JdtLaunchAnswer" className="inheritance.SavingsAccount2"/>
      </tasks>
    </parts>
  </exercise:Exercise>
  <exercise:ExerciseProposals exercise="/0">
    <proposals exercisePart="/0/@parts.0">
      <proposals xsi:type="jdt:JdtSourceEditProposal" question="/0/@parts.0/@tasks.0/@q" answer="/0/@parts.0/@tasks.0/@a">
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460373006909" sizeMeasure="5">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class AbstractAccount {&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460373017635" sizeMeasure="5">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public abstract class AbstractAccount {&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460373043935" sizeMeasure="9" warningCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public abstract class AbstractAccount {&#xA;&#x9;&#xA;&#x9;private int balance;&#xA;&#x9;&#xA;&#x9;&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460373059612" sizeMeasure="11" warningCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public abstract class AbstractAccount {&#xA;&#x9;&#xA;&#x9;private int balance;&#xA;&#x9;&#xA;&#x9;void deposit(double amount) {&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460373134883" sizeMeasure="15" warningCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public abstract class AbstractAccount {&#xA;&#x9;&#xA;&#x9;private int balance;&#xA;&#x9;&#xA;&#x9;void deposit(double amount) {&#xA;&#x9;&#x9;if (amount &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;You can't deposit a negative value.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460373140033" sizeMeasure="16" warningCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public abstract class AbstractAccount {&#xA;&#x9;&#xA;&#x9;private int balance;&#xA;&#x9;&#xA;&#x9;void deposit(double amount) {&#xA;&#x9;&#x9;if (amount &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;You can't deposit a negative value.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460373147363" sizeMeasure="16" errorCount="3">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public abstract class AbstractAccount {&#xA;&#x9;&#xA;&#x9;private double balance;&#xA;&#x9;&#xA;&#x9;void deposit(double amount) {&#xA;&#x9;&#x9;if (amount &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;You can't deposit a negative value.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;balan&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460373154268" sizeMeasure="16" warningCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public abstract class AbstractAccount {&#xA;&#x9;&#xA;&#x9;private double balance;&#xA;&#x9;&#xA;&#x9;void deposit(double amount) {&#xA;&#x9;&#x9;if (amount &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;You can't deposit a negative value.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;balance += amount;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460373183802" sizeMeasure="18" warningCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public abstract class AbstractAccount {&#xA;&#x9;&#xA;&#x9;private double balance;&#xA;&#x9;&#xA;&#x9;void deposit(double amount) {&#xA;&#x9;&#x9;if (amount &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;You can't deposit a negative value.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;balance += amount;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void withdraw(double amount) {&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460373189088" sizeMeasure="18" warningCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public abstract class AbstractAccount {&#xA;&#x9;&#xA;&#x9;private double balance;&#xA;&#x9;&#xA;&#x9;public void deposit(double amount) {&#xA;&#x9;&#x9;if (amount &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;You can't deposit a negative value.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;balance += amount;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void withdraw(double amount) {&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460373213851" sizeMeasure="19" errorCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public abstract class AbstractAccount {&#xA;&#x9;&#xA;&#x9;private double balance;&#xA;&#x9;&#xA;&#x9;public void deposit(double amount) {&#xA;&#x9;&#x9;if (amount &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;You can't deposit a negative value.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;balance += amount;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void withdraw(double amount) {&#xA;&#x9;&#x9;if (amount &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;You can't withdraw a negative value.&quot;);&#xA;&#x9;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460373223470" sizeMeasure="20" warningCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public abstract class AbstractAccount {&#xA;&#x9;&#xA;&#x9;private double balance;&#xA;&#x9;&#xA;&#x9;public void deposit(double amount) {&#xA;&#x9;&#x9;if (amount &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;You can't deposit a negative value.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;balance += amount;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void withdraw(double amount) {&#xA;&#x9;&#x9;if (amount &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;You can't withdraw a negative value.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460373227004" sizeMeasure="21" warningCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public abstract class AbstractAccount {&#xA;&#x9;&#xA;&#x9;private double balance;&#xA;&#x9;&#xA;&#x9;public void deposit(double amount) {&#xA;&#x9;&#x9;if (amount &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;You can't deposit a negative value.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;balance += amount;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void withdraw(double amount) {&#xA;&#x9;&#x9;if (amount &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;You can't withdraw a negative value.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460373244476" sizeMeasure="21" errorCount="1" warningCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public abstract class AbstractAccount {&#xA;&#x9;&#xA;&#x9;private double balance;&#xA;&#x9;&#xA;&#x9;public void deposit(double amount) {&#xA;&#x9;&#x9;if (amount &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;You can't deposit a negative value.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;balance += amount;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void withdraw(double amount) {&#xA;&#x9;&#x9;if (amount &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;You can't withdraw a negative value.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;internalWithdraw(amount);&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460373269233" sizeMeasure="25" errorCount="1" warningCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public abstract class AbstractAccount {&#xA;&#x9;&#xA;&#x9;private double balance;&#xA;&#x9;&#xA;&#x9;public void deposit(double amount) {&#xA;&#x9;&#x9;if (amount &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;You can't deposit a negative value.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;balance += amount;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void withdraw(double amount) {&#xA;&#x9;&#x9;if (amount &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;You can't withdraw a negative value.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;internalWithdraw(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public abstract void internalWithdraw(double amount) {&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460373277915" sizeMeasure="25" errorCount="1" warningCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public abstract class AbstractAccount {&#xA;&#x9;&#xA;&#x9;private double balance;&#xA;&#x9;&#xA;&#x9;public void deposit(double amount) {&#xA;&#x9;&#x9;if (amount &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;You can't deposit a negative value.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;balance += amount;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void withdraw(double amount) {&#xA;&#x9;&#x9;if (amount &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;You can't withdraw a negative value.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;internalWithdraw(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;abstract void internalWithdraw(double amount) {&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460373289203" sizeMeasure="23" warningCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public abstract class AbstractAccount {&#xA;&#x9;&#xA;&#x9;private double balance;&#xA;&#x9;&#xA;&#x9;public void deposit(double amount) {&#xA;&#x9;&#x9;if (amount &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;You can't deposit a negative value.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;balance += amount;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void withdraw(double amount) {&#xA;&#x9;&#x9;if (amount &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;You can't withdraw a negative value.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;internalWithdraw(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;abstract void internalWithdraw(double amount);&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460373294402" sizeMeasure="23" warningCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public abstract class AbstractAccount {&#xA;&#x9;&#xA;&#x9;private double balance;&#xA;&#x9;&#xA;&#x9;public void deposit(double amount) {&#xA;&#x9;&#x9;if (amount &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;You can't deposit a negative value.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;balance += amount;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void withdraw(double amount) {&#xA;&#x9;&#x9;if (amount &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;You can't withdraw a negative value.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;internalWithdraw(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public abstract void internalWithdraw(double amount);&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460373295807" sizeMeasure="22" warningCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public abstract class AbstractAccount {&#xA;&#x9;&#xA;&#x9;private double balance;&#xA;&#x9;&#xA;&#x9;public void deposit(double amount) {&#xA;&#x9;&#x9;if (amount &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;You can't deposit a negative value.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;balance += amount;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void withdraw(double amount) {&#xA;&#x9;&#x9;if (amount &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;You can't withdraw a negative value.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;internalWithdraw(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public abstract void internalWithdraw(double amount);&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460373340799" sizeMeasure="26">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public abstract class AbstractAccount {&#xA;&#x9;&#xA;&#x9;private double balance;&#xA;&#x9;&#xA;&#x9;public void deposit(double amount) {&#xA;&#x9;&#x9;if (amount &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;You can't deposit a negative value.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;balance += amount;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void withdraw(double amount) {&#xA;&#x9;&#x9;if (amount &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;You can't withdraw a negative value.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;internalWithdraw(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public abstract void internalWithdraw(double amount);&#xA;&#x9;&#xA;&#x9;public double getbalance() {&#xA;&#x9;&#x9;return balance;&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460373344389" sizeMeasure="26">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public abstract class AbstractAccount {&#xA;&#x9;&#xA;&#x9;private double balance;&#xA;&#x9;&#xA;&#x9;public void deposit(double amount) {&#xA;&#x9;&#x9;if (amount &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;You can't deposit a negative value.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;balance += amount;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void withdraw(double amount) {&#xA;&#x9;&#x9;if (amount &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;You can't withdraw a negative value.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;internalWithdraw(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public abstract void internalWithdraw(double amount);&#xA;&#x9;&#xA;&#x9;public double getBalance() {&#xA;&#x9;&#x9;return balance;&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460373346829" sizeMeasure="26">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public abstract class AbstractAccount {&#xA;&#x9;&#xA;&#x9;private double balance;&#xA;&#x9;&#xA;&#x9;public void deposit(double amount) {&#xA;&#x9;&#x9;if (amount &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;You can't deposit a negative value.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;balance += amount;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void withdraw(double amount) {&#xA;&#x9;&#x9;if (amount &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;You can't withdraw a negative value.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;internalWithdraw(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public abstract void internalWithdraw(double amount);&#xA;&#x9;&#xA;&#x9;public double getbalance() {&#xA;&#x9;&#x9;return balance;&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460373382392" sizeMeasure="30">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public abstract class AbstractAccount {&#xA;&#x9;&#xA;&#x9;private double balance;&#xA;&#x9;&#xA;&#x9;AbstractAccount() {&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void deposit(double amount) {&#xA;&#x9;&#x9;if (amount &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;You can't deposit a negative value.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;balance += amount;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void withdraw(double amount) {&#xA;&#x9;&#x9;if (amount &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;You can't withdraw a negative value.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;internalWithdraw(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public abstract void internalWithdraw(double amount);&#xA;&#x9;&#xA;&#x9;public double getbalance() {&#xA;&#x9;&#x9;return balance;&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460373387583" sizeMeasure="30">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public abstract class AbstractAccount {&#xA;&#x9;&#xA;&#x9;private double balance;&#xA;&#x9;&#xA;&#x9;AbstractAccount() {&#xA;&#x9;&#x9;balance = 0;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void deposit(double amount) {&#xA;&#x9;&#x9;if (amount &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;You can't deposit a negative value.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;balance += amount;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void withdraw(double amount) {&#xA;&#x9;&#x9;if (amount &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;You can't withdraw a negative value.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;internalWithdraw(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public abstract void internalWithdraw(double amount);&#xA;&#x9;&#xA;&#x9;public double getbalance() {&#xA;&#x9;&#x9;return balance;&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460373419855" sizeMeasure="30">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public abstract class AbstractAccount {&#xA;&#x9;&#xA;&#x9;protected double balance;&#xA;&#x9;&#xA;&#x9;AbstractAccount() {&#xA;&#x9;&#x9;balance = 0;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void deposit(double amount) {&#xA;&#x9;&#x9;if (amount &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;You can't deposit a negative value.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;balance += amount;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void withdraw(double amount) {&#xA;&#x9;&#x9;if (amount &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;You can't withdraw a negative value.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;internalWithdraw(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public abstract void internalWithdraw(double amount);&#xA;&#x9;&#xA;&#x9;public double getbalance() {&#xA;&#x9;&#x9;return balance;&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460373783290" sizeMeasure="30">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public abstract class AbstractAccount {&#xA;&#x9;&#xA;&#x9;protected double balance;&#xA;&#x9;&#xA;&#x9;AbstractAccount() {&#xA;&#x9;&#x9;balance = 0;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void deposit(double amount) {&#xA;&#x9;&#x9;if (amount &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;You can't deposit a negative value.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;balance += amount;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void withdraw(double amount) {&#xA;&#x9;&#x9;if (amount &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;You can't withdraw a negative value.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;internalWithdraw(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public abstract void internalWithdraw(double amount);&#xA;&#x9;&#xA;&#x9;public double getBalance() {&#xA;&#x9;&#x9;return balance;&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
      </proposals>
      <proposals xsi:type="jdt:JdtSourceEditProposal" question="/0/@parts.0/@tasks.1/@q" answer="/0/@parts.0/@tasks.1/@a">
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460373546999" sizeMeasure="5">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class DebitAccount {&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460373560008" sizeMeasure="11">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class DebitAccount extends AbstractAccount{&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void internalWithdraw(double amount) {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460373598620" sizeMeasure="12">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class DebitAccount extends AbstractAccount{&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void internalWithdraw(double amount) {&#xA;&#x9;&#x9;if (super.balance - amount &lt; 0) {&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460373602485" sizeMeasure="13">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class DebitAccount extends AbstractAccount{&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void internalWithdraw(double amount) {&#xA;&#x9;&#x9;if (super.balance - amount &lt; 0) {&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460373627168" sizeMeasure="13">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class DebitAccount extends AbstractAccount{&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void internalWithdraw(double amount) {&#xA;&#x9;&#x9;if (super.balance - amount &lt; 0) {&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;super.balance -= amount;&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460373674533" sizeMeasure="13">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class DebitAccount extends AbstractAccount{&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void internalWithdraw(double amount) {&#xA;&#x9;&#x9;if (super.balance - amount &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalStateException(&quot;Balance in debit account cannot be less than 0.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;super.balance -= amount;&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460373678259" sizeMeasure="13">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class DebitAccount extends AbstractAccount{&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void internalWithdraw(double amount) {&#xA;&#x9;&#x9;if (super.balance - amount &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalStateException(&quot;Balance in debit account cannot be less than zero.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;super.balance -= amount;&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460373746611" sizeMeasure="17" errorCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class DebitAccount extends AbstractAccount{&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void internalWithdraw(double amount) {&#xA;&#x9;&#x9;if (super.balance - amount &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalStateException(&quot;Balance in debit account cannot be less than zero.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;super.balance -= amount;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public double getbalance() {&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460373751536" sizeMeasure="17" errorCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class DebitAccount extends AbstractAccount{&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void internalWithdraw(double amount) {&#xA;&#x9;&#x9;if (super.balance - amount &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalStateException(&quot;Balance in debit account cannot be less than zero.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;super.balance -= amount;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public double getbalance() {&#xA;&#x9;&#x9;super.getbalance();&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460373764348" sizeMeasure="17" errorCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class DebitAccount extends AbstractAccount{&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void internalWithdraw(double amount) {&#xA;&#x9;&#x9;if (super.balance - amount &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalStateException(&quot;Balance in debit account cannot be less than zero.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;super.balance -= amount;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public double getBalance() {&#xA;&#x9;&#x9;super.getBalance();&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460373774735" sizeMeasure="17" errorCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class DebitAccount extends AbstractAccount{&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void internalWithdraw(double amount) {&#xA;&#x9;&#x9;if (super.balance - amount &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalStateException(&quot;Balance in debit account cannot be less than zero.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;super.balance -= amount;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public double getBalance() {&#xA;&#x9;&#x9;return super.getBalance();&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460373776853" sizeMeasure="17">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class DebitAccount extends AbstractAccount{&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void internalWithdraw(double amount) {&#xA;&#x9;&#x9;if (super.balance - amount &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalStateException(&quot;Balance in debit account cannot be less than zero.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;super.balance -= amount;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public double getBalance() {&#xA;&#x9;&#x9;return super.getBalance();&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460373830852" sizeMeasure="21">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class DebitAccount extends AbstractAccount{&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void internalWithdraw(double amount) {&#xA;&#x9;&#x9;if (super.balance - amount &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalStateException(&quot;Balance in debit account cannot be less than zero.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;super.balance -= amount;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public double getBalance() {&#xA;&#x9;&#x9;return super.getBalance();&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void withdraw(double amount) {&#xA;&#x9;&#x9;super.withdraw(amount);&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460373857919" sizeMeasure="25">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class DebitAccount extends AbstractAccount{&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void internalWithdraw(double amount) {&#xA;&#x9;&#x9;if (super.balance - amount &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalStateException(&quot;Balance in debit account cannot be less than zero.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;super.balance -= amount;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public double getBalance() {&#xA;&#x9;&#x9;return super.getBalance();&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void withdraw(double amount) {&#xA;&#x9;&#x9;super.withdraw(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void deposit(double amount) {&#xA;&#x9;&#x9;super.deposit(amount);&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
      </proposals>
      <proposals xsi:type="jdt:JdtSourceEditProposal" question="/0/@parts.0/@tasks.2/@q" answer="/0/@parts.0/@tasks.2/@a">
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460373904732" sizeMeasure="5">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class CreditAccount {&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460373918459" sizeMeasure="11">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class CreditAccount extends AbstractAccount{&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void internalWithdraw(double amount) {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460373923138" sizeMeasure="10">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class CreditAccount extends AbstractAccount{&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void internalWithdraw(double amount) {&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460373925612" sizeMeasure="12">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class CreditAccount extends AbstractAccount{&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void internalWithdraw(double amount) {&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460373945462" sizeMeasure="16">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class CreditAccount extends AbstractAccount{&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void internalWithdraw(double amount) {&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void deposit(double amount) {&#xA;&#x9;&#x9;super.deposit(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460373959597" sizeMeasure="18">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class CreditAccount extends AbstractAccount{&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void internalWithdraw(double amount) {&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void deposit(double amount) {&#xA;&#x9;&#x9;super.deposit(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void withdraw(double amount) {&#xA;&#x9;&#x9;super.withdraw(amount);&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460373967643" sizeMeasure="19">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class CreditAccount extends AbstractAccount{&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void internalWithdraw(double amount) {&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void deposit(double amount) {&#xA;&#x9;&#x9;super.deposit(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void withdraw(double amount) {&#xA;&#x9;&#x9;super.withdraw(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460373978757" sizeMeasure="21">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class CreditAccount extends AbstractAccount{&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void internalWithdraw(double amount) {&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void deposit(double amount) {&#xA;&#x9;&#x9;super.deposit(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void withdraw(double amount) {&#xA;&#x9;&#x9;super.withdraw(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public double getBalance() {&#xA;&#x9;&#x9;return super.getBalance();&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460374011288" sizeMeasure="25">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class CreditAccount extends AbstractAccount{&#xA;&#xA;&#x9;CreditAccount() {&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public void internalWithdraw(double amount) {&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void deposit(double amount) {&#xA;&#x9;&#x9;super.deposit(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void withdraw(double amount) {&#xA;&#x9;&#x9;super.withdraw(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public double getBalance() {&#xA;&#x9;&#x9;return super.getBalance();&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460374032826" sizeMeasure="27" warningCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class CreditAccount extends AbstractAccount{&#xA;&#xA;&#x9;private double creditLine;&#xA;&#x9;&#xA;&#x9;CreditAccount() {&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public void internalWithdraw(double amount) {&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void deposit(double amount) {&#xA;&#x9;&#x9;super.deposit(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void withdraw(double amount) {&#xA;&#x9;&#x9;super.withdraw(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public double getBalance() {&#xA;&#x9;&#x9;return super.getBalance();&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460374072263" sizeMeasure="27" warningCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class CreditAccount extends AbstractAccount{&#xA;&#xA;&#x9;private double creditLine;&#xA;&#x9;&#xA;&#x9;CreditAccount(double line) {&#xA;&#x9;&#x9;creditLine = line;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public void internalWithdraw(double amount) {&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void deposit(double amount) {&#xA;&#x9;&#x9;super.deposit(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void withdraw(double amount) {&#xA;&#x9;&#x9;super.withdraw(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public double getBalance() {&#xA;&#x9;&#x9;return super.getBalance();&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460374077560" sizeMeasure="27" warningCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class CreditAccount extends AbstractAccount{&#xA;&#xA;&#x9;private double creditLine;&#xA;&#x9;&#xA;&#x9;CreditAccount(double line) {&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public void internalWithdraw(double amount) {&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void deposit(double amount) {&#xA;&#x9;&#x9;super.deposit(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void withdraw(double amount) {&#xA;&#x9;&#x9;super.withdraw(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public double getBalance() {&#xA;&#x9;&#x9;return super.getBalance();&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460374098191" sizeMeasure="35" errorCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class CreditAccount extends AbstractAccount{&#xA;&#xA;&#x9;private double creditLine;&#xA;&#x9;&#xA;&#x9;CreditAccount(double line) {&#xA;&#x9;&#x9;setCreditLine(line)M&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public double getCreditLine() {&#xA;&#x9;&#x9;return creditLine;&#xA;&#x9;}&#xA;&#xA;&#x9;public void setCreditLine(double creditLine) {&#xA;&#x9;&#x9;this.creditLine = creditLine;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void internalWithdraw(double amount) {&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void deposit(double amount) {&#xA;&#x9;&#x9;super.deposit(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void withdraw(double amount) {&#xA;&#x9;&#x9;super.withdraw(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public double getBalance() {&#xA;&#x9;&#x9;return super.getBalance();&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460374099859" sizeMeasure="35">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class CreditAccount extends AbstractAccount{&#xA;&#xA;&#x9;private double creditLine;&#xA;&#x9;&#xA;&#x9;CreditAccount(double line) {&#xA;&#x9;&#x9;setCreditLine(line);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public double getCreditLine() {&#xA;&#x9;&#x9;return creditLine;&#xA;&#x9;}&#xA;&#xA;&#x9;public void setCreditLine(double creditLine) {&#xA;&#x9;&#x9;this.creditLine = creditLine;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void internalWithdraw(double amount) {&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void deposit(double amount) {&#xA;&#x9;&#x9;super.deposit(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void withdraw(double amount) {&#xA;&#x9;&#x9;super.withdraw(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public double getBalance() {&#xA;&#x9;&#x9;return super.getBalance();&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460374120324" sizeMeasure="37">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class CreditAccount extends AbstractAccount{&#xA;&#xA;&#x9;private double creditLine;&#xA;&#x9;&#xA;&#x9;CreditAccount(double line) {&#xA;&#x9;&#x9;setCreditLine(line);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public double getCreditLine() {&#xA;&#x9;&#x9;return creditLine;&#xA;&#x9;}&#xA;&#xA;&#x9;public void setCreditLine(double creditLine) {&#xA;&#x9;&#x9;if (creditLine &lt; 0) {&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void internalWithdraw(double amount) {&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void deposit(double amount) {&#xA;&#x9;&#x9;super.deposit(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void withdraw(double amount) {&#xA;&#x9;&#x9;super.withdraw(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public double getBalance() {&#xA;&#x9;&#x9;return super.getBalance();&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460374153251" sizeMeasure="37">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class CreditAccount extends AbstractAccount{&#xA;&#xA;&#x9;private double creditLine;&#xA;&#x9;&#xA;&#x9;CreditAccount(double line) {&#xA;&#x9;&#x9;setCreditLine(line);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public double getCreditLine() {&#xA;&#x9;&#x9;return creditLine;&#xA;&#x9;}&#xA;&#xA;&#x9;public void setCreditLine(double creditLine) {&#xA;&#x9;&#x9;if (creditLine &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;Credit line must always be greater than zero.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void internalWithdraw(double amount) {&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void deposit(double amount) {&#xA;&#x9;&#x9;super.deposit(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void withdraw(double amount) {&#xA;&#x9;&#x9;super.withdraw(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public double getBalance() {&#xA;&#x9;&#x9;return super.getBalance();&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460374156263" sizeMeasure="38">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class CreditAccount extends AbstractAccount{&#xA;&#xA;&#x9;private double creditLine;&#xA;&#x9;&#xA;&#x9;CreditAccount(double line) {&#xA;&#x9;&#x9;setCreditLine(line);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public double getCreditLine() {&#xA;&#x9;&#x9;return creditLine;&#xA;&#x9;}&#xA;&#xA;&#x9;public void setCreditLine(double creditLine) {&#xA;&#x9;&#x9;if (creditLine &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;Credit line must always be greater than zero.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void internalWithdraw(double amount) {&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void deposit(double amount) {&#xA;&#x9;&#x9;super.deposit(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void withdraw(double amount) {&#xA;&#x9;&#x9;super.withdraw(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public double getBalance() {&#xA;&#x9;&#x9;return super.getBalance();&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460374178446" sizeMeasure="40">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class CreditAccount extends AbstractAccount{&#xA;&#xA;&#x9;private double creditLine;&#xA;&#x9;&#xA;&#x9;CreditAccount(double line) {&#xA;&#x9;&#x9;setCreditLine(line);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public double getCreditLine() {&#xA;&#x9;&#x9;return creditLine;&#xA;&#x9;}&#xA;&#xA;&#x9;public void setCreditLine(double creditLine) {&#xA;&#x9;&#x9;if (creditLine &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;Credit line must always be greater than zero.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (1 &lt; 2) {&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void internalWithdraw(double amount) {&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void deposit(double amount) {&#xA;&#x9;&#x9;super.deposit(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void withdraw(double amount) {&#xA;&#x9;&#x9;super.withdraw(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public double getBalance() {&#xA;&#x9;&#x9;return super.getBalance();&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460374190369" sizeMeasure="41">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class CreditAccount extends AbstractAccount{&#xA;&#xA;&#x9;private double creditLine;&#xA;&#x9;&#xA;&#x9;CreditAccount(double line) {&#xA;&#x9;&#x9;setCreditLine(line);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public double getCreditLine() {&#xA;&#x9;&#x9;return creditLine;&#xA;&#x9;}&#xA;&#xA;&#x9;public void setCreditLine(double creditLine) {&#xA;&#x9;&#x9;if (creditLine &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;Credit line must always be greater than zero.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (1 &lt; 2) {&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;this.creditLine = creditLine;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void internalWithdraw(double amount) {&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void deposit(double amount) {&#xA;&#x9;&#x9;super.deposit(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void withdraw(double amount) {&#xA;&#x9;&#x9;super.withdraw(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public double getBalance() {&#xA;&#x9;&#x9;return super.getBalance();&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460374265187" sizeMeasure="41" errorCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class CreditAccount extends AbstractAccount{&#xA;&#xA;&#x9;private double creditLine;&#xA;&#x9;&#xA;&#x9;CreditAccount(double line) {&#xA;&#x9;&#x9;setCreditLine(line);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public double getCreditLine() {&#xA;&#x9;&#x9;return creditLine;&#xA;&#x9;}&#xA;&#xA;&#x9;public void setCreditLine(double creditLine) {&#xA;&#x9;&#x9;if (creditLine &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;Credit line must always be greater than zero.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if () {&#xA;&#x9;&#x9;&#x9;throw new IllegalStateException(&quot;New credit line doesn't cover debt.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;this.creditLine = creditLine;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void internalWithdraw(double amount) {&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void deposit(double amount) {&#xA;&#x9;&#x9;super.deposit(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void withdraw(double amount) {&#xA;&#x9;&#x9;super.withdraw(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public double getBalance() {&#xA;&#x9;&#x9;return super.getBalance();&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460374329657" sizeMeasure="41">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class CreditAccount extends AbstractAccount{&#xA;&#xA;&#x9;private double creditLine;&#xA;&#x9;&#xA;&#x9;CreditAccount(double line) {&#xA;&#x9;&#x9;setCreditLine(line);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public double getCreditLine() {&#xA;&#x9;&#x9;return creditLine;&#xA;&#x9;}&#xA;&#xA;&#x9;public void setCreditLine(double creditLine) {&#xA;&#x9;&#x9;if (creditLine &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;Credit line must always be greater than zero.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (super.balance - creditLine &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalStateException(&quot;New credit line doesn't cover debt.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;this.creditLine = creditLine;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void internalWithdraw(double amount) {&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void deposit(double amount) {&#xA;&#x9;&#x9;super.deposit(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void withdraw(double amount) {&#xA;&#x9;&#x9;super.withdraw(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public double getBalance() {&#xA;&#x9;&#x9;return super.getBalance();&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460374370410" sizeMeasure="41">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class CreditAccount extends AbstractAccount{&#xA;&#xA;&#x9;private double creditLine;&#xA;&#x9;&#xA;&#x9;CreditAccount(double line) {&#xA;&#x9;&#x9;setCreditLine(line);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public double getCreditLine() {&#xA;&#x9;&#x9;return creditLine;&#xA;&#x9;}&#xA;&#xA;&#x9;public void setCreditLine(double creditLine) {&#xA;&#x9;&#x9;if (creditLine &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;Credit line must always be greater than zero.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (super.balance + creditLine &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalStateException(&quot;New credit line doesn't cover debt.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;this.creditLine = creditLine;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void internalWithdraw(double amount) {&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void deposit(double amount) {&#xA;&#x9;&#x9;super.deposit(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void withdraw(double amount) {&#xA;&#x9;&#x9;super.withdraw(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public double getBalance() {&#xA;&#x9;&#x9;return super.getBalance();&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460374412043" sizeMeasure="43" errorCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class CreditAccount extends AbstractAccount{&#xA;&#xA;&#x9;private double creditLine;&#xA;&#x9;&#xA;&#x9;CreditAccount(double line) {&#xA;&#x9;&#x9;setCreditLine(line);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public double getCreditLine() {&#xA;&#x9;&#x9;return creditLine;&#xA;&#x9;}&#xA;&#xA;&#x9;public void setCreditLine(double creditLine) {&#xA;&#x9;&#x9;if (creditLine &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;Credit line must always be greater than zero.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (super.balance + creditLine &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalStateException(&quot;New credit line doesn't cover debt.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;this.creditLine = creditLine;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void internalWithdraw(double amount) {&#xA;&#x9;&#x9;if () {&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void deposit(double amount) {&#xA;&#x9;&#x9;super.deposit(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void withdraw(double amount) {&#xA;&#x9;&#x9;super.withdraw(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public double getBalance() {&#xA;&#x9;&#x9;return super.getBalance();&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460374425140" sizeMeasure="43" errorCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class CreditAccount extends AbstractAccount{&#xA;&#xA;&#x9;private double creditLine;&#xA;&#x9;&#xA;&#x9;CreditAccount(double line) {&#xA;&#x9;&#x9;setCreditLine(line);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public double getCreditLine() {&#xA;&#x9;&#x9;return creditLine;&#xA;&#x9;}&#xA;&#xA;&#x9;public void setCreditLine(double creditLine) {&#xA;&#x9;&#x9;if (creditLine &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;Credit line must always be greater than zero.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (super.balance + creditLine &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalStateException(&quot;New credit line doesn't cover debt.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;this.creditLine = creditLine;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void internalWithdraw(double amount) {&#xA;&#x9;&#x9;if () {&#xA;&#x9;&#x9;&#x9;throw new IllegalStateException();&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void deposit(double amount) {&#xA;&#x9;&#x9;super.deposit(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void withdraw(double amount) {&#xA;&#x9;&#x9;super.withdraw(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public double getBalance() {&#xA;&#x9;&#x9;return super.getBalance();&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460374488713" sizeMeasure="43" errorCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class CreditAccount extends AbstractAccount{&#xA;&#xA;&#x9;private double creditLine;&#xA;&#x9;&#xA;&#x9;CreditAccount(double line) {&#xA;&#x9;&#x9;setCreditLine(line);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public double getCreditLine() {&#xA;&#x9;&#x9;return creditLine;&#xA;&#x9;}&#xA;&#xA;&#x9;public void setCreditLine(double creditLine) {&#xA;&#x9;&#x9;if (creditLine &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;Credit line must always be greater than zero.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (super.balance + creditLine &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalStateException(&quot;New credit line doesn't cover debt.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;this.creditLine = creditLine;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void internalWithdraw(double amount) {&#xA;&#x9;&#x9;if () {&#xA;&#x9;&#x9;&#x9;throw new IllegalStateException(&quot;Credit line doesn't cover this withdraw.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void deposit(double amount) {&#xA;&#x9;&#x9;super.deposit(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void withdraw(double amount) {&#xA;&#x9;&#x9;super.withdraw(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public double getBalance() {&#xA;&#x9;&#x9;return super.getBalance();&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460374494481" sizeMeasure="43" errorCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class CreditAccount extends AbstractAccount{&#xA;&#xA;&#x9;private double creditLine;&#xA;&#x9;&#xA;&#x9;CreditAccount(double line) {&#xA;&#x9;&#x9;setCreditLine(line);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public double getCreditLine() {&#xA;&#x9;&#x9;return creditLine;&#xA;&#x9;}&#xA;&#xA;&#x9;public void setCreditLine(double creditLine) {&#xA;&#x9;&#x9;if (creditLine &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;Credit line must always be greater than zero.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (super.balance + creditLine &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalStateException(&quot;New credit line doesn't cover debt.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;this.creditLine = creditLine;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void internalWithdraw(double amount) {&#xA;&#x9;&#x9;if () {&#xA;&#x9;&#x9;&#x9;throw new IllegalStateException(&quot;The credit line doesn't cover this withdraw.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void deposit(double amount) {&#xA;&#x9;&#x9;super.deposit(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void withdraw(double amount) {&#xA;&#x9;&#x9;super.withdraw(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public double getBalance() {&#xA;&#x9;&#x9;return super.getBalance();&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460374501723" sizeMeasure="44" errorCount="2">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class CreditAccount extends AbstractAccount{&#xA;&#xA;&#x9;private double creditLine;&#xA;&#x9;&#xA;&#x9;CreditAccount(double line) {&#xA;&#x9;&#x9;setCreditLine(line);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public double getCreditLine() {&#xA;&#x9;&#x9;return creditLine;&#xA;&#x9;}&#xA;&#xA;&#x9;public void setCreditLine(double creditLine) {&#xA;&#x9;&#x9;if (creditLine &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;Credit line must always be greater than zero.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (super.balance + creditLine &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalStateException(&quot;New credit line doesn't cover debt.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;this.creditLine = creditLine;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void internalWithdraw(double amount) {&#xA;&#x9;&#x9;if () {&#xA;&#x9;&#x9;&#x9;throw new IllegalStateException(&quot;The credit line doesn't cover this withdraw.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;super.balance - amount;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void deposit(double amount) {&#xA;&#x9;&#x9;super.deposit(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void withdraw(double amount) {&#xA;&#x9;&#x9;super.withdraw(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public double getBalance() {&#xA;&#x9;&#x9;return super.getBalance();&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460374505935" sizeMeasure="44" errorCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class CreditAccount extends AbstractAccount{&#xA;&#xA;&#x9;private double creditLine;&#xA;&#x9;&#xA;&#x9;CreditAccount(double line) {&#xA;&#x9;&#x9;setCreditLine(line);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public double getCreditLine() {&#xA;&#x9;&#x9;return creditLine;&#xA;&#x9;}&#xA;&#xA;&#x9;public void setCreditLine(double creditLine) {&#xA;&#x9;&#x9;if (creditLine &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;Credit line must always be greater than zero.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (super.balance + creditLine &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalStateException(&quot;New credit line doesn't cover debt.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;this.creditLine = creditLine;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void internalWithdraw(double amount) {&#xA;&#x9;&#x9;if () {&#xA;&#x9;&#x9;&#x9;throw new IllegalStateException(&quot;The credit line doesn't cover this withdraw.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;super.balance -= amount;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void deposit(double amount) {&#xA;&#x9;&#x9;super.deposit(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void withdraw(double amount) {&#xA;&#x9;&#x9;super.withdraw(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public double getBalance() {&#xA;&#x9;&#x9;return super.getBalance();&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460374526116" sizeMeasure="44">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class CreditAccount extends AbstractAccount{&#xA;&#xA;&#x9;private double creditLine;&#xA;&#x9;&#xA;&#x9;CreditAccount(double line) {&#xA;&#x9;&#x9;setCreditLine(line);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public double getCreditLine() {&#xA;&#x9;&#x9;return creditLine;&#xA;&#x9;}&#xA;&#xA;&#x9;public void setCreditLine(double creditLine) {&#xA;&#x9;&#x9;if (creditLine &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;Credit line must always be greater than zero.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (super.balance + creditLine &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalStateException(&quot;New credit line doesn't cover debt.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;this.creditLine = creditLine;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void internalWithdraw(double amount) {&#xA;&#x9;&#x9;if (super.balance + creditLine - amount &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalStateException(&quot;The credit line doesn't cover this withdraw.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;super.balance -= amount;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void deposit(double amount) {&#xA;&#x9;&#x9;super.deposit(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void withdraw(double amount) {&#xA;&#x9;&#x9;super.withdraw(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public double getBalance() {&#xA;&#x9;&#x9;return super.getBalance();&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460374563811" sizeMeasure="44">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class CreditAccount extends AbstractAccount{&#xA;&#xA;&#x9;private double creditLine;&#xA;&#x9;&#xA;&#x9;CreditAccount(double line) {&#xA;&#x9;&#x9;setCreditLine(line);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public double getCreditLine() {&#xA;&#x9;&#x9;return creditLine;&#xA;&#x9;}&#xA;&#xA;&#x9;public void setCreditLine(double creditLine) {&#xA;&#x9;&#x9;if (creditLine &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;Credit line must always be greater than zero.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (super.balance + creditLine &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalStateException(&quot;New credit line doesn't cover debt.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;this.creditLine = creditLine;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void internalWithdraw(double amount) {&#xA;&#x9;&#x9;if (super.balance + creditLine &lt; amount) {&#xA;&#x9;&#x9;&#x9;throw new IllegalStateException(&quot;The credit line doesn't cover this withdraw.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;super.balance -= amount;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void deposit(double amount) {&#xA;&#x9;&#x9;super.deposit(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void withdraw(double amount) {&#xA;&#x9;&#x9;super.withdraw(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public double getBalance() {&#xA;&#x9;&#x9;return super.getBalance();&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
      </proposals>
      <proposals xsi:type="jdt:JdtSourceEditProposal" question="/0/@parts.0/@tasks.3/@q" answer="/0/@parts.0/@tasks.3/@a">
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460374601223" sizeMeasure="5">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class SavingsAccount2 {&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460374617010" sizeMeasure="5" errorCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class SavingsAccount2 extends AbstractAccount{&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460374619588" sizeMeasure="11">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class SavingsAccount2 extends AbstractAccount{&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void internalWithdraw(double amount) {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460374623418" sizeMeasure="10">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class SavingsAccount2 extends AbstractAccount{&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void internalWithdraw(double amount) {&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460374638594" sizeMeasure="14">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class SavingsAccount2 extends AbstractAccount{&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void internalWithdraw(double amount) {&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public double getBalance() {&#xA;&#x9;&#x9;return super.getBalance();&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460374643311" sizeMeasure="16">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class SavingsAccount2 extends AbstractAccount{&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void internalWithdraw(double amount) {&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;public double getBalance() {&#xA;&#x9;&#x9;return super.getBalance();&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460374654063" sizeMeasure="18">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class SavingsAccount2 extends AbstractAccount{&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void internalWithdraw(double amount) {&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void withdraw(double amount) {&#xA;&#x9;&#x9;super.withdraw(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public double getBalance() {&#xA;&#x9;&#x9;return super.getBalance();&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460374656179" sizeMeasure="20">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class SavingsAccount2 extends AbstractAccount{&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void internalWithdraw(double amount) {&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;public void withdraw(double amount) {&#xA;&#x9;&#x9;super.withdraw(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public double getBalance() {&#xA;&#x9;&#x9;return super.getBalance();&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460374667225" sizeMeasure="22">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class SavingsAccount2 extends AbstractAccount{&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void internalWithdraw(double amount) {&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void deposit(double amount) {&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void withdraw(double amount) {&#xA;&#x9;&#x9;super.withdraw(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public double getBalance() {&#xA;&#x9;&#x9;return super.getBalance();&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460374672324" sizeMeasure="22">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class SavingsAccount2 extends AbstractAccount{&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void internalWithdraw(double amount) {&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void deposit(double amount) {&#xA;&#x9;&#x9;super.deposit(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void withdraw(double amount) {&#xA;&#x9;&#x9;super.withdraw(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public double getBalance() {&#xA;&#x9;&#x9;return super.getBalance();&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460374678420" sizeMeasure="21">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class SavingsAccount2 extends AbstractAccount{&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void internalWithdraw(double amount) {&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void deposit(double amount) {&#xA;&#x9;&#x9;super.deposit(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void withdraw(double amount) {&#xA;&#x9;&#x9;super.withdraw(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public double getBalance() {&#xA;&#x9;&#x9;return super.getBalance();&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460374682464" sizeMeasure="21">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class SavingsAccount2 extends AbstractAccount{&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void internalWithdraw(double amount) {&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void deposit(double amount) {&#xA;&#x9;&#x9;super.deposit(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void withdraw(double amount) {&#xA;&#x9;&#x9;super.withdraw(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public double getBalance() {&#xA;&#x9;&#x9;return super.getBalance();&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460374728862" sizeMeasure="24" warningCount="2">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class SavingsAccount2 extends AbstractAccount{&#xA;&#xA;&#x9;private double fee;&#xA;&#x9;private int withdrawals;&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public void internalWithdraw(double amount) {&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void deposit(double amount) {&#xA;&#x9;&#x9;super.deposit(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void withdraw(double amount) {&#xA;&#x9;&#x9;super.withdraw(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public double getBalance() {&#xA;&#x9;&#x9;return super.getBalance();&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460374780057" sizeMeasure="28" warningCount="2">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class SavingsAccount2 extends AbstractAccount{&#xA;&#xA;&#x9;private int withdrawals;&#xA;&#x9;private double fee;&#xA;&#x9;&#xA;&#x9;SavingsAccount2(int withdrawals, double fee) {&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public void internalWithdraw(double amount) {&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void deposit(double amount) {&#xA;&#x9;&#x9;super.deposit(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void withdraw(double amount) {&#xA;&#x9;&#x9;super.withdraw(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public double getBalance() {&#xA;&#x9;&#x9;return super.getBalance();&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460374855824" sizeMeasure="30" warningCount="2">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class SavingsAccount2 extends AbstractAccount{&#xA;&#xA;&#x9;private int withdrawals;&#xA;&#x9;private double fee;&#xA;&#x9;&#xA;&#x9;SavingsAccount2(int withdrawals, double fee) {&#xA;&#x9;&#x9;if (withdrawals &lt; 0 || fee &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException();&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public void internalWithdraw(double amount) {&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void deposit(double amount) {&#xA;&#x9;&#x9;super.deposit(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void withdraw(double amount) {&#xA;&#x9;&#x9;super.withdraw(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public double getBalance() {&#xA;&#x9;&#x9;return super.getBalance();&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460374884557" sizeMeasure="30" warningCount="2">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class SavingsAccount2 extends AbstractAccount{&#xA;&#xA;&#x9;private int withdrawals;&#xA;&#x9;private double fee;&#xA;&#x9;&#xA;&#x9;SavingsAccount2(int withdrawals, double fee) {&#xA;&#x9;&#x9;if (withdrawals &lt; 0 || fee &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;Withdrawals and fee cannot be set to be negative&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public void internalWithdraw(double amount) {&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void deposit(double amount) {&#xA;&#x9;&#x9;super.deposit(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void withdraw(double amount) {&#xA;&#x9;&#x9;super.withdraw(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public double getBalance() {&#xA;&#x9;&#x9;return super.getBalance();&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460374910217" sizeMeasure="32" warningCount="2">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class SavingsAccount2 extends AbstractAccount{&#xA;&#xA;&#x9;private int withdrawals;&#xA;&#x9;private double fee;&#xA;&#x9;&#xA;&#x9;SavingsAccount2(int withdrawals, double fee) {&#xA;&#x9;&#x9;if (withdrawals &lt; 0 || fee &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;Withdrawals and fee cannot be set to be negative&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;this.withdrawals = withdrawals;&#xA;&#x9;&#x9;this.fee = fee;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public void internalWithdraw(double amount) {&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void deposit(double amount) {&#xA;&#x9;&#x9;super.deposit(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void withdraw(double amount) {&#xA;&#x9;&#x9;super.withdraw(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public double getBalance() {&#xA;&#x9;&#x9;return super.getBalance();&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460374983457" sizeMeasure="34" warningCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class SavingsAccount2 extends AbstractAccount{&#xA;&#xA;&#x9;private int withdrawals;&#xA;&#x9;private double fee;&#xA;&#x9;&#xA;&#x9;SavingsAccount2(int withdrawals, double fee) {&#xA;&#x9;&#x9;if (withdrawals &lt; 0 || fee &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;Withdrawals and fee cannot be set to be negative&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;this.withdrawals = withdrawals;&#xA;&#x9;&#x9;this.fee = fee;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public void internalWithdraw(double amount) {&#xA;&#x9;&#x9;if (withdrawals &lt; 0) {&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void deposit(double amount) {&#xA;&#x9;&#x9;super.deposit(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void withdraw(double amount) {&#xA;&#x9;&#x9;super.withdraw(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public double getBalance() {&#xA;&#x9;&#x9;return super.getBalance();&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460375014132" sizeMeasure="35" warningCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class SavingsAccount2 extends AbstractAccount{&#xA;&#xA;&#x9;private int withdrawals;&#xA;&#x9;private double fee;&#xA;&#x9;&#xA;&#x9;SavingsAccount2(int withdrawals, double fee) {&#xA;&#x9;&#x9;if (withdrawals &lt; 0 || fee &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;Withdrawals and fee cannot be set to be negative&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;this.withdrawals = withdrawals;&#xA;&#x9;&#x9;this.fee = fee;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public void internalWithdraw(double amount) {&#xA;&#x9;&#x9;if (super.balance &lt; amount)&#xA;&#x9;&#x9;if (withdrawals &lt; 0) {&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void deposit(double amount) {&#xA;&#x9;&#x9;super.deposit(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void withdraw(double amount) {&#xA;&#x9;&#x9;super.withdraw(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public double getBalance() {&#xA;&#x9;&#x9;return super.getBalance();&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460375021290" sizeMeasure="37" warningCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class SavingsAccount2 extends AbstractAccount{&#xA;&#xA;&#x9;private int withdrawals;&#xA;&#x9;private double fee;&#xA;&#x9;&#xA;&#x9;SavingsAccount2(int withdrawals, double fee) {&#xA;&#x9;&#x9;if (withdrawals &lt; 0 || fee &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;Withdrawals and fee cannot be set to be negative&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;this.withdrawals = withdrawals;&#xA;&#x9;&#x9;this.fee = fee;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public void internalWithdraw(double amount) {&#xA;&#x9;&#x9;if (super.balance &lt; amount) {&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (withdrawals &lt; 0) {&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void deposit(double amount) {&#xA;&#x9;&#x9;super.deposit(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void withdraw(double amount) {&#xA;&#x9;&#x9;super.withdraw(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public double getBalance() {&#xA;&#x9;&#x9;return super.getBalance();&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460375032385" sizeMeasure="37" errorCount="1" warningCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class SavingsAccount2 extends AbstractAccount{&#xA;&#xA;&#x9;private int withdrawals;&#xA;&#x9;private double fee;&#xA;&#x9;&#xA;&#x9;SavingsAccount2(int withdrawals, double fee) {&#xA;&#x9;&#x9;if (withdrawals &lt; 0 || fee &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;Withdrawals and fee cannot be set to be negative&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;this.withdrawals = withdrawals;&#xA;&#x9;&#x9;this.fee = fee;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public void internalWithdraw(double amount) {&#xA;&#x9;&#x9;if (super.balance &lt; amount) {&#xA;&#x9;&#x9;&#x9;return IllegalStateException();&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (withdrawals &lt; 0) {&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void deposit(double amount) {&#xA;&#x9;&#x9;super.deposit(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void withdraw(double amount) {&#xA;&#x9;&#x9;super.withdraw(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public double getBalance() {&#xA;&#x9;&#x9;return super.getBalance();&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460375063995" sizeMeasure="37" errorCount="1" warningCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class SavingsAccount2 extends AbstractAccount{&#xA;&#xA;&#x9;private int withdrawals;&#xA;&#x9;private double fee;&#xA;&#x9;&#xA;&#x9;SavingsAccount2(int withdrawals, double fee) {&#xA;&#x9;&#x9;if (withdrawals &lt; 0 || fee &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;Withdrawals and fee cannot be set to be negative&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;this.withdrawals = withdrawals;&#xA;&#x9;&#x9;this.fee = fee;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public void internalWithdraw(double amount) {&#xA;&#x9;&#x9;if (super.balance &lt; amount) {&#xA;&#x9;&#x9;&#x9;return IllegalStateException();&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (withdrawals &lt; 0) {&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void deposit(double amount) {&#xA;&#x9;&#x9;super.deposit(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void withdraw(double amount) {&#xA;&#x9;&#x9;super.withdraw(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public double getBalance() {&#xA;&#x9;&#x9;return super.getBalance();&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460375087366" sizeMeasure="37" errorCount="1" warningCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class SavingsAccount2 extends AbstractAccount{&#xA;&#xA;&#x9;private int withdrawals;&#xA;&#x9;private double fee;&#xA;&#x9;&#xA;&#x9;SavingsAccount2(int withdrawals, double fee) {&#xA;&#x9;&#x9;if (withdrawals &lt; 0 || fee &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;Withdrawals and fee cannot be set to be negative&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;this.withdrawals = withdrawals;&#xA;&#x9;&#x9;this.fee = fee;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public void internalWithdraw(double amount) {&#xA;&#x9;&#x9;if (super.balance &lt; amount) {&#xA;&#x9;&#x9;&#x9;return IllegalStateException();&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (withdrawals &lt; 0) {&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void deposit(double amount) {&#xA;&#x9;&#x9;super.deposit(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void withdraw(double amount) {&#xA;&#x9;&#x9;super.withdraw(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public double getBalance() {&#xA;&#x9;&#x9;return super.getBalance();&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460375112384" sizeMeasure="40" errorCount="1" warningCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class SavingsAccount2 extends AbstractAccount{&#xA;&#xA;&#x9;private int withdrawals;&#xA;&#x9;private double fee;&#xA;&#x9;&#xA;&#x9;SavingsAccount2(int withdrawals, double fee) {&#xA;&#x9;&#x9;if (withdrawals &lt; 0 || fee &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;Withdrawals and fee cannot be set to be negative&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;this.withdrawals = withdrawals;&#xA;&#x9;&#x9;this.fee = fee;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public void internalWithdraw(double amount) {&#xA;&#x9;&#x9;if (super.balance &lt; amount) {&#xA;&#x9;&#x9;&#x9;return IllegalStateException();&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (withdrawals &lt; 0) {&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else {&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void deposit(double amount) {&#xA;&#x9;&#x9;super.deposit(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void withdraw(double amount) {&#xA;&#x9;&#x9;super.withdraw(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public double getBalance() {&#xA;&#x9;&#x9;return super.getBalance();&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460375129163" sizeMeasure="32" warningCount="2">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class SavingsAccount2 extends AbstractAccount{&#xA;&#xA;&#x9;private int withdrawals;&#xA;&#x9;private double fee;&#xA;&#x9;&#xA;&#x9;SavingsAccount2(int withdrawals, double fee) {&#xA;&#x9;&#x9;if (withdrawals &lt; 0 || fee &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;Withdrawals and fee cannot be set to be negative&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;this.withdrawals = withdrawals;&#xA;&#x9;&#x9;this.fee = fee;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public void internalWithdraw(double amount) {&#xA;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void deposit(double amount) {&#xA;&#x9;&#x9;super.deposit(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void withdraw(double amount) {&#xA;&#x9;&#x9;super.withdraw(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public double getBalance() {&#xA;&#x9;&#x9;return super.getBalance();&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460375137157" sizeMeasure="32" warningCount="2">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class SavingsAccount2 extends AbstractAccount{&#xA;&#xA;&#x9;private int withdrawals;&#xA;&#x9;private double fee;&#xA;&#x9;&#xA;&#x9;SavingsAccount2(int withdrawals, double fee) {&#xA;&#x9;&#x9;if (withdrawals &lt; 0 || fee &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;Withdrawals and fee cannot be set to be negative&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;this.withdrawals = withdrawals;&#xA;&#x9;&#x9;this.fee = fee;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public void internalWithdraw(double amount) {&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void deposit(double amount) {&#xA;&#x9;&#x9;super.deposit(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void withdraw(double amount) {&#xA;&#x9;&#x9;super.withdraw(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public double getBalance() {&#xA;&#x9;&#x9;return super.getBalance();&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460375389567" sizeMeasure="34" errorCount="1" warningCount="2">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class SavingsAccount2 extends AbstractAccount{&#xA;&#xA;&#x9;private int withdrawals;&#xA;&#x9;private double fee;&#xA;&#x9;&#xA;&#x9;SavingsAccount2(int withdrawals, double fee) {&#xA;&#x9;&#x9;if (withdrawals &lt; 0 || fee &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;Withdrawals and fee cannot be set to be negative&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;this.withdrawals = withdrawals;&#xA;&#x9;&#x9;this.fee = fee;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public void internalWithdraw(double amount) {&#xA;&#x9;&#x9;if (withdraws &lt; 0) {&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void deposit(double amount) {&#xA;&#x9;&#x9;super.deposit(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void withdraw(double amount) {&#xA;&#x9;&#x9;super.withdraw(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public double getBalance() {&#xA;&#x9;&#x9;return super.getBalance();&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460375401252" sizeMeasure="34" warningCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class SavingsAccount2 extends AbstractAccount{&#xA;&#xA;&#x9;private int withdrawals;&#xA;&#x9;private double fee;&#xA;&#x9;&#xA;&#x9;SavingsAccount2(int withdrawals, double fee) {&#xA;&#x9;&#x9;if (withdrawals &lt; 0 || fee &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;Withdrawals and fee cannot be set to be negative&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;this.withdrawals = withdrawals;&#xA;&#x9;&#x9;this.fee = fee;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public void internalWithdraw(double amount) {&#xA;&#x9;&#x9;if (withdrawals &lt; 0) {&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void deposit(double amount) {&#xA;&#x9;&#x9;super.deposit(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void withdraw(double amount) {&#xA;&#x9;&#x9;super.withdraw(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public double getBalance() {&#xA;&#x9;&#x9;return super.getBalance();&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460375451833" sizeMeasure="33" errorCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class SavingsAccount2 extends AbstractAccount{&#xA;&#xA;&#x9;private int withdrawals;&#xA;&#x9;private double fee;&#xA;&#x9;&#xA;&#x9;SavingsAccount2(int withdrawals, double fee) {&#xA;&#x9;&#x9;if (withdrawals &lt; 0 || fee &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;Withdrawals and fee cannot be set to be negative&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;this.withdrawals = withdrawals;&#xA;&#x9;&#x9;this.fee = fee;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public void internalWithdraw(double amount) {&#xA;&#x9;&#x9;if (withdrawals &lt; 0 &amp;&amp; ) {&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void deposit(double amount) {&#xA;&#x9;&#x9;super.deposit(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void withdraw(double amount) {&#xA;&#x9;&#x9;super.withdraw(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public double getBalance() {&#xA;&#x9;&#x9;return super.getBalance();&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460375480703" sizeMeasure="34">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class SavingsAccount2 extends AbstractAccount{&#xA;&#xA;&#x9;private int withdrawals;&#xA;&#x9;private double fee;&#xA;&#x9;&#xA;&#x9;SavingsAccount2(int withdrawals, double fee) {&#xA;&#x9;&#x9;if (withdrawals &lt; 0 || fee &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;Withdrawals and fee cannot be set to be negative&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;this.withdrawals = withdrawals;&#xA;&#x9;&#x9;this.fee = fee;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public void internalWithdraw(double amount) {&#xA;&#x9;&#x9;if (withdrawals &lt; 0 &amp;&amp; super.balance &lt; amount + fee) {&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void deposit(double amount) {&#xA;&#x9;&#x9;super.deposit(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void withdraw(double amount) {&#xA;&#x9;&#x9;super.withdraw(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public double getBalance() {&#xA;&#x9;&#x9;return super.getBalance();&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460375502333" sizeMeasure="34">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class SavingsAccount2 extends AbstractAccount{&#xA;&#xA;&#x9;private int withdrawals;&#xA;&#x9;private double fee;&#xA;&#x9;&#xA;&#x9;SavingsAccount2(int withdrawals, double fee) {&#xA;&#x9;&#x9;if (withdrawals &lt; 0 || fee &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;Withdrawals and fee cannot be set to be negative&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;this.withdrawals = withdrawals;&#xA;&#x9;&#x9;this.fee = fee;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public void internalWithdraw(double amount) {&#xA;&#x9;&#x9;if (withdrawals &lt; 0 &amp;&amp; super.balance &lt; amount + fee) {&#xA;&#x9;&#x9;&#x9;throw new IllegalStateException();&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void deposit(double amount) {&#xA;&#x9;&#x9;super.deposit(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void withdraw(double amount) {&#xA;&#x9;&#x9;super.withdraw(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public double getBalance() {&#xA;&#x9;&#x9;return super.getBalance();&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460375521341" sizeMeasure="35">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class SavingsAccount2 extends AbstractAccount{&#xA;&#xA;&#x9;private int withdrawals;&#xA;&#x9;private double fee;&#xA;&#x9;&#xA;&#x9;SavingsAccount2(int withdrawals, double fee) {&#xA;&#x9;&#x9;if (withdrawals &lt; 0 || fee &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;Withdrawals and fee cannot be set to be negative&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;this.withdrawals = withdrawals;&#xA;&#x9;&#x9;this.fee = fee;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public void internalWithdraw(double amount) {&#xA;&#x9;&#x9;if (withdrawals &lt; 0 &amp;&amp; super.balance &lt; amount + fee) {&#xA;&#x9;&#x9;&#x9;throw new IllegalStateException(&quot;&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void deposit(double amount) {&#xA;&#x9;&#x9;super.deposit(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void withdraw(double amount) {&#xA;&#x9;&#x9;super.withdraw(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public double getBalance() {&#xA;&#x9;&#x9;return super.getBalance();&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460375524586" sizeMeasure="35" errorCount="2">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class SavingsAccount2 extends AbstractAccount{&#xA;&#xA;&#x9;private int withdrawals;&#xA;&#x9;private double fee;&#xA;&#x9;&#xA;&#x9;SavingsAccount2(int withdrawals, double fee) {&#xA;&#x9;&#x9;if (withdrawals &lt; 0 || fee &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;Withdrawals and fee cannot be set to be negative&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;this.withdrawals = withdrawals;&#xA;&#x9;&#x9;this.fee = fee;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public void internalWithdraw(double amount) {&#xA;&#x9;&#x9;if (withdrawals &lt; 0 &amp;&amp; super.balance &lt; amount + fee) {&#xA;&#x9;&#x9;&#x9;throw new IllegalStateException(&quot;&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else if ()&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void deposit(double amount) {&#xA;&#x9;&#x9;super.deposit(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void withdraw(double amount) {&#xA;&#x9;&#x9;super.withdraw(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public double getBalance() {&#xA;&#x9;&#x9;return super.getBalance();&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460375557439" sizeMeasure="34" warningCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class SavingsAccount2 extends AbstractAccount{&#xA;&#xA;&#x9;private int withdrawals;&#xA;&#x9;private double fee;&#xA;&#x9;&#xA;&#x9;SavingsAccount2(int withdrawals, double fee) {&#xA;&#x9;&#x9;if (withdrawals &lt; 0 || fee &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;Withdrawals and fee cannot be set to be negative&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;this.withdrawals = withdrawals;&#xA;&#x9;&#x9;this.fee = fee;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public void internalWithdraw(double amount) {&#xA;&#x9;&#x9;if (withdrawals &lt; 0) {&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void deposit(double amount) {&#xA;&#x9;&#x9;super.deposit(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void withdraw(double amount) {&#xA;&#x9;&#x9;super.withdraw(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public double getBalance() {&#xA;&#x9;&#x9;return super.getBalance();&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460375581618" sizeMeasure="36">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class SavingsAccount2 extends AbstractAccount{&#xA;&#xA;&#x9;private int withdrawals;&#xA;&#x9;private double fee;&#xA;&#x9;&#xA;&#x9;SavingsAccount2(int withdrawals, double fee) {&#xA;&#x9;&#x9;if (withdrawals &lt; 0 || fee &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;Withdrawals and fee cannot be set to be negative&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;this.withdrawals = withdrawals;&#xA;&#x9;&#x9;this.fee = fee;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public void internalWithdraw(double amount) {&#xA;&#x9;&#x9;if (withdrawals &lt; 0) {&#xA;&#x9;&#x9;&#x9;if (super.balance &lt; amount + fee) {&#xA;&#x9;&#x9;&#x9;&#x9;throw new IllegalStateException();&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void deposit(double amount) {&#xA;&#x9;&#x9;super.deposit(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void withdraw(double amount) {&#xA;&#x9;&#x9;super.withdraw(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public double getBalance() {&#xA;&#x9;&#x9;return super.getBalance();&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460375584231" sizeMeasure="36">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class SavingsAccount2 extends AbstractAccount{&#xA;&#xA;&#x9;private int withdrawals;&#xA;&#x9;private double fee;&#xA;&#x9;&#xA;&#x9;SavingsAccount2(int withdrawals, double fee) {&#xA;&#x9;&#x9;if (withdrawals &lt; 0 || fee &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;Withdrawals and fee cannot be set to be negative&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;this.withdrawals = withdrawals;&#xA;&#x9;&#x9;this.fee = fee;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public void internalWithdraw(double amount) {&#xA;&#x9;&#x9;if (withdrawals &lt; 0) {&#xA;&#x9;&#x9;&#x9;if (super.balance &lt; amount + fee) {&#xA;&#x9;&#x9;&#x9;&#x9;throw new IllegalStateException(&quot;&quot;);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void deposit(double amount) {&#xA;&#x9;&#x9;super.deposit(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void withdraw(double amount) {&#xA;&#x9;&#x9;super.withdraw(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public double getBalance() {&#xA;&#x9;&#x9;return super.getBalance();&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460375593487" sizeMeasure="36">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class SavingsAccount2 extends AbstractAccount{&#xA;&#xA;&#x9;private int withdrawals;&#xA;&#x9;private double fee;&#xA;&#x9;&#xA;&#x9;SavingsAccount2(int withdrawals, double fee) {&#xA;&#x9;&#x9;if (withdrawals &lt; 0 || fee &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;Withdrawals and fee cannot be set to be negative&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;this.withdrawals = withdrawals;&#xA;&#x9;&#x9;this.fee = fee;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public void internalWithdraw(double amount) {&#xA;&#x9;&#x9;if (withdrawals &lt; 0) {&#xA;&#x9;&#x9;&#x9;if (super.balance &lt; amount + fee) {&#xA;&#x9;&#x9;&#x9;&#x9;throw new IllegalStateException(&quot;You have &quot;);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void deposit(double amount) {&#xA;&#x9;&#x9;super.deposit(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void withdraw(double amount) {&#xA;&#x9;&#x9;super.withdraw(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public double getBalance() {&#xA;&#x9;&#x9;return super.getBalance();&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460375639124" sizeMeasure="36">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class SavingsAccount2 extends AbstractAccount{&#xA;&#xA;&#x9;private int withdrawals;&#xA;&#x9;private double fee;&#xA;&#x9;&#xA;&#x9;SavingsAccount2(int withdrawals, double fee) {&#xA;&#x9;&#x9;if (withdrawals &lt; 0 || fee &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;Withdrawals and fee cannot be set to be negative&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;this.withdrawals = withdrawals;&#xA;&#x9;&#x9;this.fee = fee;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public void internalWithdraw(double amount) {&#xA;&#x9;&#x9;if (withdrawals &lt; 0) {&#xA;&#x9;&#x9;&#x9;if (super.balance &lt; amount + fee) {&#xA;&#x9;&#x9;&#x9;&#x9;throw new IllegalStateException(&quot;You have exceeded maximum amount of withdrawals and &quot;);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void deposit(double amount) {&#xA;&#x9;&#x9;super.deposit(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void withdraw(double amount) {&#xA;&#x9;&#x9;super.withdraw(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public double getBalance() {&#xA;&#x9;&#x9;return super.getBalance();&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460375658961" sizeMeasure="36">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class SavingsAccount2 extends AbstractAccount{&#xA;&#xA;&#x9;private int withdrawals;&#xA;&#x9;private double fee;&#xA;&#x9;&#xA;&#x9;SavingsAccount2(int withdrawals, double fee) {&#xA;&#x9;&#x9;if (withdrawals &lt; 0 || fee &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;Withdrawals and fee cannot be set to be negative&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;this.withdrawals = withdrawals;&#xA;&#x9;&#x9;this.fee = fee;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public void internalWithdraw(double amount) {&#xA;&#x9;&#x9;if (withdrawals &lt; 0) {&#xA;&#x9;&#x9;&#x9;if (super.balance &lt; amount + fee) {&#xA;&#x9;&#x9;&#x9;&#x9;throw new IllegalStateException(&quot;You have exceeded maximum amount of withdrawals and balance cannot be negative.&quot;);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void deposit(double amount) {&#xA;&#x9;&#x9;super.deposit(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void withdraw(double amount) {&#xA;&#x9;&#x9;super.withdraw(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public double getBalance() {&#xA;&#x9;&#x9;return super.getBalance();&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460375661973" sizeMeasure="37">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class SavingsAccount2 extends AbstractAccount{&#xA;&#xA;&#x9;private int withdrawals;&#xA;&#x9;private double fee;&#xA;&#x9;&#xA;&#x9;SavingsAccount2(int withdrawals, double fee) {&#xA;&#x9;&#x9;if (withdrawals &lt; 0 || fee &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;Withdrawals and fee cannot be set to be negative&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;this.withdrawals = withdrawals;&#xA;&#x9;&#x9;this.fee = fee;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public void internalWithdraw(double amount) {&#xA;&#x9;&#x9;if (withdrawals &lt; 0) {&#xA;&#x9;&#x9;&#x9;if (super.balance &lt; amount + fee) {&#xA;&#x9;&#x9;&#x9;&#x9;throw new IllegalStateException(&quot;You have exceeded maximum &quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;+ &quot;amount of withdrawals and balance cannot be negative.&quot;);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void deposit(double amount) {&#xA;&#x9;&#x9;super.deposit(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void withdraw(double amount) {&#xA;&#x9;&#x9;super.withdraw(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public double getBalance() {&#xA;&#x9;&#x9;return super.getBalance();&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460375666653" sizeMeasure="38">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class SavingsAccount2 extends AbstractAccount{&#xA;&#xA;&#x9;private int withdrawals;&#xA;&#x9;private double fee;&#xA;&#x9;&#xA;&#x9;SavingsAccount2(int withdrawals, double fee) {&#xA;&#x9;&#x9;if (withdrawals &lt; 0 || fee &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;Withdrawals and fee cannot be set to be negative&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;this.withdrawals = withdrawals;&#xA;&#x9;&#x9;this.fee = fee;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public void internalWithdraw(double amount) {&#xA;&#x9;&#x9;if (withdrawals &lt; 0) {&#xA;&#x9;&#x9;&#x9;if (super.balance &lt; amount + fee) {&#xA;&#x9;&#x9;&#x9;&#x9;throw new IllegalStateException(&quot;You have exceeded maximum &quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;+ &quot;amount of withdrawals and balance cannot be negative.&quot;);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void deposit(double amount) {&#xA;&#x9;&#x9;super.deposit(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void withdraw(double amount) {&#xA;&#x9;&#x9;super.withdraw(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public double getBalance() {&#xA;&#x9;&#x9;return super.getBalance();&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460375690802" sizeMeasure="38">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class SavingsAccount2 extends AbstractAccount{&#xA;&#xA;&#x9;private int withdrawals;&#xA;&#x9;private double fee;&#xA;&#x9;&#xA;&#x9;SavingsAccount2(int withdrawals, double fee) {&#xA;&#x9;&#x9;if (withdrawals &lt; 0 || fee &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;Withdrawals and fee cannot be set to be negative&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;this.withdrawals = withdrawals;&#xA;&#x9;&#x9;this.fee = fee;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public void internalWithdraw(double amount) {&#xA;&#x9;&#x9;if (withdrawals &lt; 0) {&#xA;&#x9;&#x9;&#x9;if (super.balance &lt; amount + fee) {&#xA;&#x9;&#x9;&#x9;&#x9;throw new IllegalStateException(&quot;You have exceeded maximum &quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;+ &quot;amount of withdrawals and balance cannot be negative.&quot;);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;super.balance -= amount + fee;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void deposit(double amount) {&#xA;&#x9;&#x9;super.deposit(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void withdraw(double amount) {&#xA;&#x9;&#x9;super.withdraw(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public double getBalance() {&#xA;&#x9;&#x9;return super.getBalance();&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460375695607" sizeMeasure="41">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class SavingsAccount2 extends AbstractAccount{&#xA;&#xA;&#x9;private int withdrawals;&#xA;&#x9;private double fee;&#xA;&#x9;&#xA;&#x9;SavingsAccount2(int withdrawals, double fee) {&#xA;&#x9;&#x9;if (withdrawals &lt; 0 || fee &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;Withdrawals and fee cannot be set to be negative&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;this.withdrawals = withdrawals;&#xA;&#x9;&#x9;this.fee = fee;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public void internalWithdraw(double amount) {&#xA;&#x9;&#x9;if (withdrawals &lt; 0) {&#xA;&#x9;&#x9;&#x9;if (super.balance &lt; amount + fee) {&#xA;&#x9;&#x9;&#x9;&#x9;throw new IllegalStateException(&quot;You have exceeded maximum &quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;+ &quot;amount of withdrawals and balance cannot be negative.&quot;);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;super.balance -= amount + fee;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else {&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void deposit(double amount) {&#xA;&#x9;&#x9;super.deposit(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void withdraw(double amount) {&#xA;&#x9;&#x9;super.withdraw(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public double getBalance() {&#xA;&#x9;&#x9;return super.getBalance();&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460375709951" sizeMeasure="43">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class SavingsAccount2 extends AbstractAccount{&#xA;&#xA;&#x9;private int withdrawals;&#xA;&#x9;private double fee;&#xA;&#x9;&#xA;&#x9;SavingsAccount2(int withdrawals, double fee) {&#xA;&#x9;&#x9;if (withdrawals &lt; 0 || fee &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;Withdrawals and fee cannot be set to be negative&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;this.withdrawals = withdrawals;&#xA;&#x9;&#x9;this.fee = fee;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public void internalWithdraw(double amount) {&#xA;&#x9;&#x9;if (withdrawals &lt; 0) {&#xA;&#x9;&#x9;&#x9;if (super.balance &lt; amount + fee) {&#xA;&#x9;&#x9;&#x9;&#x9;throw new IllegalStateException(&quot;You have exceeded maximum &quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;+ &quot;amount of withdrawals and balance cannot be negative.&quot;);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;super.balance -= amount + fee;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else {&#xA;&#x9;&#x9;&#x9;if (super.balance &lt; amount) {&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void deposit(double amount) {&#xA;&#x9;&#x9;super.deposit(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void withdraw(double amount) {&#xA;&#x9;&#x9;super.withdraw(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public double getBalance() {&#xA;&#x9;&#x9;return super.getBalance();&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460375717215" sizeMeasure="43">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class SavingsAccount2 extends AbstractAccount{&#xA;&#xA;&#x9;private int withdrawals;&#xA;&#x9;private double fee;&#xA;&#x9;&#xA;&#x9;SavingsAccount2(int withdrawals, double fee) {&#xA;&#x9;&#x9;if (withdrawals &lt; 0 || fee &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;Withdrawals and fee cannot be set to be negative&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;this.withdrawals = withdrawals;&#xA;&#x9;&#x9;this.fee = fee;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public void internalWithdraw(double amount) {&#xA;&#x9;&#x9;if (withdrawals &lt; 0) {&#xA;&#x9;&#x9;&#x9;if (super.balance &lt; amount + fee) {&#xA;&#x9;&#x9;&#x9;&#x9;throw new IllegalStateException(&quot;You have exceeded maximum &quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;+ &quot;amount of withdrawals and balance cannot be negative.&quot;);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;super.balance -= amount + fee;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else {&#xA;&#x9;&#x9;&#x9;if (super.balance &lt; amount) {&#xA;&#x9;&#x9;&#x9;&#x9;throw new IllegalStateException();&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void deposit(double amount) {&#xA;&#x9;&#x9;super.deposit(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void withdraw(double amount) {&#xA;&#x9;&#x9;super.withdraw(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public double getBalance() {&#xA;&#x9;&#x9;return super.getBalance();&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460375733555" sizeMeasure="44">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class SavingsAccount2 extends AbstractAccount{&#xA;&#xA;&#x9;private int withdrawals;&#xA;&#x9;private double fee;&#xA;&#x9;&#xA;&#x9;SavingsAccount2(int withdrawals, double fee) {&#xA;&#x9;&#x9;if (withdrawals &lt; 0 || fee &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;Withdrawals and fee cannot be set to be negative&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;this.withdrawals = withdrawals;&#xA;&#x9;&#x9;this.fee = fee;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public void internalWithdraw(double amount) {&#xA;&#x9;&#x9;if (withdrawals &lt; 0) {&#xA;&#x9;&#x9;&#x9;if (super.balance &lt; amount + fee) {&#xA;&#x9;&#x9;&#x9;&#x9;throw new IllegalStateException(&quot;You have exceeded maximum &quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;+ &quot;amount of withdrawals and balance cannot be negative.&quot;);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;super.balance -= amount + fee;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else {&#xA;&#x9;&#x9;&#x9;if (super.balance &lt; amount) {&#xA;&#x9;&#x9;&#x9;&#x9;throw new IllegalStateException(&quot;Balance cannot be negative.&quot;);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void deposit(double amount) {&#xA;&#x9;&#x9;super.deposit(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void withdraw(double amount) {&#xA;&#x9;&#x9;super.withdraw(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public double getBalance() {&#xA;&#x9;&#x9;return super.getBalance();&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460375741632" sizeMeasure="44">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class SavingsAccount2 extends AbstractAccount{&#xA;&#xA;&#x9;private int withdrawals;&#xA;&#x9;private double fee;&#xA;&#x9;&#xA;&#x9;SavingsAccount2(int withdrawals, double fee) {&#xA;&#x9;&#x9;if (withdrawals &lt; 0 || fee &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;Withdrawals and fee cannot be set to be negative&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;this.withdrawals = withdrawals;&#xA;&#x9;&#x9;this.fee = fee;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public void internalWithdraw(double amount) {&#xA;&#x9;&#x9;if (withdrawals &lt; 0) {&#xA;&#x9;&#x9;&#x9;if (super.balance &lt; amount + fee) {&#xA;&#x9;&#x9;&#x9;&#x9;throw new IllegalStateException(&quot;You have exceeded maximum &quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;+ &quot;amount of withdrawals and balance cannot be negative.&quot;);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;super.balance -= amount + fee;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else {&#xA;&#x9;&#x9;&#x9;if (super.balance &lt; amount) {&#xA;&#x9;&#x9;&#x9;&#x9;throw new IllegalStateException(&quot;Balance cannot be negative.&quot;);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;super.balance -= amount;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void deposit(double amount) {&#xA;&#x9;&#x9;super.deposit(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void withdraw(double amount) {&#xA;&#x9;&#x9;super.withdraw(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public double getBalance() {&#xA;&#x9;&#x9;return super.getBalance();&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460375752529" sizeMeasure="45">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class SavingsAccount2 extends AbstractAccount{&#xA;&#xA;&#x9;private int withdrawals;&#xA;&#x9;private double fee;&#xA;&#x9;&#xA;&#x9;SavingsAccount2(int withdrawals, double fee) {&#xA;&#x9;&#x9;if (withdrawals &lt; 0 || fee &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;Withdrawals and fee cannot be set to be negative&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;this.withdrawals = withdrawals;&#xA;&#x9;&#x9;this.fee = fee;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public void internalWithdraw(double amount) {&#xA;&#x9;&#x9;if (withdrawals &lt; 0) {&#xA;&#x9;&#x9;&#x9;if (super.balance &lt; amount + fee) {&#xA;&#x9;&#x9;&#x9;&#x9;throw new IllegalStateException(&quot;You have exceeded maximum &quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;+ &quot;amount of withdrawals and balance cannot be negative.&quot;);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;super.balance -= amount + fee;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else {&#xA;&#x9;&#x9;&#x9;if (super.balance &lt; amount) {&#xA;&#x9;&#x9;&#x9;&#x9;throw new IllegalStateException(&quot;Balance cannot be negative.&quot;);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;super.balance -= amount;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;withdrawals --;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void deposit(double amount) {&#xA;&#x9;&#x9;super.deposit(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void withdraw(double amount) {&#xA;&#x9;&#x9;super.withdraw(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public double getBalance() {&#xA;&#x9;&#x9;return super.getBalance();&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1460375784296" sizeMeasure="45">
          <edit xsi:type="exercise:StringEdit" storedString="package inheritance;&#xA;&#xA;public class SavingsAccount2 extends AbstractAccount{&#xA;&#xA;&#x9;private int withdrawals;&#xA;&#x9;private double fee;&#xA;&#x9;&#xA;&#x9;SavingsAccount2(int withdrawals, double fee) {&#xA;&#x9;&#x9;if (withdrawals &lt; 0 || fee &lt; 0) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;Withdrawals and fee cannot be set to be negative&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;this.withdrawals = withdrawals;&#xA;&#x9;&#x9;this.fee = fee;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public void internalWithdraw(double amount) {&#xA;&#x9;&#x9;if (withdrawals &lt;= 0) {&#xA;&#x9;&#x9;&#x9;if (super.balance &lt; amount + fee) {&#xA;&#x9;&#x9;&#x9;&#x9;throw new IllegalStateException(&quot;You have exceeded maximum &quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;+ &quot;amount of withdrawals and balance cannot be negative.&quot;);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;super.balance -= amount + fee;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else {&#xA;&#x9;&#x9;&#x9;if (super.balance &lt; amount) {&#xA;&#x9;&#x9;&#x9;&#x9;throw new IllegalStateException(&quot;Balance cannot be negative.&quot;);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;super.balance -= amount;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;withdrawals --;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void deposit(double amount) {&#xA;&#x9;&#x9;super.deposit(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void withdraw(double amount) {&#xA;&#x9;&#x9;super.withdraw(amount);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public double getBalance() {&#xA;&#x9;&#x9;return super.getBalance();&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
      </proposals>
      <proposals xsi:type="junit:JunitTestProposal" question="/0/@parts.0/@tasks.4/@q" answer="/0/@parts.0/@tasks.4/@a" completion="1.0">
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1460373879808" completion="1.0" successCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1460373881154" completion="1.0" successCount="1"/>
      </proposals>
      <proposals xsi:type="junit:JunitTestProposal" question="/0/@parts.0/@tasks.5/@q" answer="/0/@parts.0/@tasks.5/@a" completion="1.0">
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1460374538331" completion="1.0" successCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1460374539471" completion="1.0" successCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1460374540476" completion="1.0" successCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1460374566398" completion="1.0" successCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1460374567618" completion="1.0" successCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1460374568668" completion="1.0" successCount="1"/>
      </proposals>
      <proposals xsi:type="junit:JunitTestProposal" question="/0/@parts.0/@tasks.6/@q" answer="/0/@parts.0/@tasks.6/@a" completion="1.0">
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1460375763748" completion="1.0" successCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1460375765064" completion="0.0" failureCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1460375786417" completion="1.0" successCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1460375792812" completion="1.0" successCount="1"/>
      </proposals>
    </proposals>
    <proposals exercisePart="/0/@parts.1">
      <proposals xsi:type="workbench:DebugEventProposal" question="/0/@parts.1/@tasks.0/@q" answer="/0/@parts.1/@tasks.0/@a"/>
      <proposals xsi:type="workbench:CommandExecutionProposal" question="/0/@parts.1/@tasks.1/@q" answer="/0/@parts.1/@tasks.1/@a"/>
      <proposals xsi:type="workbench:CommandExecutionProposal" question="/0/@parts.1/@tasks.2/@q" answer="/0/@parts.1/@tasks.2/@a"/>
      <proposals xsi:type="workbench:PartTaskProposal" question="/0/@parts.1/@tasks.3/@q" answer="/0/@parts.1/@tasks.3/@a"/>
      <proposals xsi:type="jdt:JdtLaunchProposal" question="/0/@parts.1/@tasks.4/@q" answer="/0/@parts.1/@tasks.4/@a"/>
      <proposals xsi:type="jdt:JdtLaunchProposal" question="/0/@parts.1/@tasks.5/@q" answer="/0/@parts.1/@tasks.5/@a"/>
      <proposals xsi:type="jdt:JdtLaunchProposal" question="/0/@parts.1/@tasks.6/@q" answer="/0/@parts.1/@tasks.6/@a"/>
    </proposals>
  </exercise:ExerciseProposals>
</xmi:XMI>
