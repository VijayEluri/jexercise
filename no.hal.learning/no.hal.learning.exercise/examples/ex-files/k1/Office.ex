<?xml version="1.0" encoding="UTF-8"?>
<xmi:XMI xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:exercise="platform:/plugin/no.hal.learning.exercise.model/model/exercise.ecore" xmlns:jdt="platform:/plugin/no.hal.learning.exercise.jdt/model/jdt-exercise.ecore" xmlns:junit="platform:/plugin/no.hal.learning.exercise.junit/model/junit-exercise.ecore" xmlns:workbench="platform:/plugin/no.hal.learning.exercise.workbench/model/workbench-exercise.ecore">
  <exercise:Exercise>
    <parts xsi:type="exercise:ExercisePart" title="Employee">
      <tasks xsi:type="exercise:Task">
        <q xsi:type="exercise:StringQuestion" question="Write source code for the Employee Interface."/>
        <a xsi:type="jdt:JdtSourceEditAnswer" className="delegation.office.Employee"/>
      </tasks>
      <tasks xsi:type="exercise:Task">
        <q xsi:type="exercise:StringQuestion" question="Write source code for the Clerk Class."/>
        <a xsi:type="jdt:JdtSourceEditAnswer" className="delegation.office.Clerk"/>
      </tasks>
      <tasks xsi:type="exercise:Task">
        <q xsi:type="exercise:StringQuestion" question="Run the Clerk JUnit test."/>
        <a xsi:type="junit:JunitTestAnswer" testRunName="delegation.office.ClerkTest"/>
      </tasks>
      <tasks xsi:type="exercise:Task">
        <q xsi:type="exercise:StringQuestion" question="Write source code for the Printer Class."/>
        <a xsi:type="jdt:JdtSourceEditAnswer" className="delegation.office.Printer"/>
      </tasks>
      <tasks xsi:type="exercise:Task">
        <q xsi:type="exercise:StringQuestion" question="Run the Printer JUnit test."/>
        <a xsi:type="junit:JunitTestAnswer" testRunName="delegation.office.PrinterTest"/>
      </tasks>
      <tasks xsi:type="exercise:Task">
        <q xsi:type="exercise:StringQuestion" question="Write source code for the Manager Class."/>
        <a xsi:type="jdt:JdtSourceEditAnswer" className="delegation.office.Manager"/>
      </tasks>
      <tasks xsi:type="exercise:Task">
        <q xsi:type="exercise:StringQuestion" question="Run the Manager JUnit test."/>
        <a xsi:type="junit:JunitTestAnswer" testRunName="delegation.office.ManagerTest"/>
      </tasks>
    </parts>
    <parts xsi:type="exercise:ExercisePart" title="Tool usage">
      <tasks xsi:type="exercise:Task">
        <q xsi:type="exercise:StringQuestion" question="Use breakpoints to debug code."/>
        <a xsi:type="workbench:DebugEventAnswer" action="suspend.breakpoint"/>
      </tasks>
      <tasks xsi:type="exercise:Task">
        <q xsi:type="exercise:StringQuestion" question="Use the debug command Step Over"/>
        <a xsi:type="workbench:CommandExecutionAnswer" elementId="org.eclipse.debug.ui.commands.StepOver" action="executeSuccess"/>
      </tasks>
      <tasks xsi:type="exercise:Task">
        <q xsi:type="exercise:StringQuestion" question="Use the debug command Step Into"/>
        <a xsi:type="workbench:CommandExecutionAnswer" elementId="org.eclipse.debug.ui.commands.StepInto" action="executeSuccess"/>
      </tasks>
      <tasks xsi:type="exercise:Task">
        <q xsi:type="exercise:StringQuestion" question="Use the Variables view"/>
        <a xsi:type="workbench:PartTaskAnswer" elementId="org.eclipse.debug.ui.VariableView" action="activated"/>
      </tasks>
      <tasks xsi:type="exercise:Task">
        <q xsi:type="exercise:StringQuestion" question="Run the Printer class."/>
        <a xsi:type="jdt:JdtLaunchAnswer" className="delegation.office.Printer"/>
      </tasks>
      <tasks xsi:type="exercise:Task">
        <q xsi:type="exercise:StringQuestion" question="Run the Manager class."/>
        <a xsi:type="jdt:JdtLaunchAnswer" className="delegation.office.Manager"/>
      </tasks>
      <tasks xsi:type="exercise:Task">
        <q xsi:type="exercise:StringQuestion" question="Run the Clerk class."/>
        <a xsi:type="jdt:JdtLaunchAnswer" className="delegation.office.Clerk"/>
      </tasks>
    </parts>
  </exercise:Exercise>
  <exercise:ExerciseProposals exercise="/0">
    <proposals exercisePart="/0/@parts.0">
      <proposals xsi:type="jdt:JdtSourceEditProposal" question="/0/@parts.0/@tasks.0/@q" answer="/0/@parts.0/@tasks.0/@a">
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457955780313" sizeMeasure="15">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.function.BinaryOperator;&#xA;&#xA;public interface Employee {&#xA;&#x9;&#xA;&#x9;double doCalculations(BinaryOperator&lt;Double> operation, double value1, &#xA;&#x9;&#x9;&#x9;double value2);&#xA;&#x9;&#xA;&#x9;void printDocument(String document);&#xA;&#x9;&#xA;&#x9;int getTaskCount();&#xA;&#x9;&#xA;&#x9;int getResourceCount();&#xA;}&#xA;"/>
        </attempts>
      </proposals>
      <proposals xsi:type="jdt:JdtSourceEditProposal" question="/0/@parts.0/@tasks.1/@q" answer="/0/@parts.0/@tasks.1/@a">
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457821162350" sizeMeasure="36">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.function.BinaryOperator;&#xA;&#xA;public class Clerk implements Employee{&#xA;&#x9;&#xA;&#x9;private Printer printer;&#xA;&#x9;private int taskCounts;&#xA;&#x9;&#xA;&#x9;Clerk(Printer printer) {&#xA;&#x9;&#x9;this.printer = printer;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public double doCalculations(BinaryOperator&lt;Double> operation, double value1, double value2) {&#xA;&#x9;&#x9;this.taskCounts++;&#xA;&#x9;&#x9;return operation.apply(value1, value2);&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void printDocument(String document) {&#xA;&#x9;&#x9;this.taskCounts++;&#xA;&#x9;&#x9;printer.printDocument(document, this);&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getTaskCount() {&#xA;&#x9;&#x9;return this.taskCounts;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getResourceCount() {&#xA;&#x9;&#x9;return 1;&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457898997765" sizeMeasure="37" errorCount="2">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.function.BinaryOperator;&#xA;&#xA;public class Clerk implements Employee{&#xA;&#x9;&#xA;&#x9;private Printer printer;&#xA;&#x9;private int taskCounts;&#xA;&#x9;&#xA;&#x9;Clerk(Printer printer) {&#xA;&#x9;&#x9;this.printer = printer;&#xA;&#x9;&#x9;printer.&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public double doCalculations(BinaryOperator&lt;Double> operation, double value1, double value2) {&#xA;&#x9;&#x9;this.taskCounts++;&#xA;&#x9;&#x9;return operation.apply(value1, value2);&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void printDocument(String document) {&#xA;&#x9;&#x9;this.taskCounts++;&#xA;&#x9;&#x9;printer.printDocument(document, this);&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getTaskCount() {&#xA;&#x9;&#x9;return this.taskCounts;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getResourceCount() {&#xA;&#x9;&#x9;return 1;&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457899002322" sizeMeasure="37">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.function.BinaryOperator;&#xA;&#xA;public class Clerk implements Employee{&#xA;&#x9;&#xA;&#x9;private Printer printer;&#xA;&#x9;private int taskCounts;&#xA;&#x9;&#xA;&#x9;Clerk(Printer printer) {&#xA;&#x9;&#x9;this.printer = printer;&#xA;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public double doCalculations(BinaryOperator&lt;Double> operation, double value1, double value2) {&#xA;&#x9;&#x9;this.taskCounts++;&#xA;&#x9;&#x9;return operation.apply(value1, value2);&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void printDocument(String document) {&#xA;&#x9;&#x9;this.taskCounts++;&#xA;&#x9;&#x9;printer.printDocument(document, this);&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getTaskCount() {&#xA;&#x9;&#x9;return this.taskCounts;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getResourceCount() {&#xA;&#x9;&#x9;return 1;&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457899228915" sizeMeasure="37">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.function.BinaryOperator;&#xA;&#xA;public class Clerk implements Employee{&#xA;&#x9;&#xA;&#x9;private Printer printer;&#xA;&#x9;private int taskCounts;&#xA;&#x9;&#xA;&#x9;Clerk(Printer printer) {&#xA;&#x9;&#x9;this.printer = printer;&#xA;&#x9;&#x9;printer.addEmployee(this);&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public double doCalculations(BinaryOperator&lt;Double> operation, double value1, double value2) {&#xA;&#x9;&#x9;this.taskCounts++;&#xA;&#x9;&#x9;return operation.apply(value1, value2);&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void printDocument(String document) {&#xA;&#x9;&#x9;this.taskCounts++;&#xA;&#x9;&#x9;printer.printDocument(document, this);&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getTaskCount() {&#xA;&#x9;&#x9;return this.taskCounts;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getResourceCount() {&#xA;&#x9;&#x9;return 1;&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457955780316" sizeMeasure="37">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.function.BinaryOperator;&#xA;&#xA;public class Clerk implements Employee{&#xA;&#x9;&#xA;&#x9;private Printer printer;&#xA;&#x9;private int taskCounts;&#xA;&#x9;&#xA;&#x9;Clerk(Printer printer) {&#xA;&#x9;&#x9;this.printer = printer;&#xA;&#x9;&#x9;printer.addEmployee(this);&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public double doCalculations(BinaryOperator&lt;Double> operation, double value1, double value2) {&#xA;&#x9;&#x9;this.taskCounts++;&#xA;&#x9;&#x9;return operation.apply(value1, value2);&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void printDocument(String document) {&#xA;&#x9;&#x9;this.taskCounts++;&#xA;&#x9;&#x9;printer.printDocument(document, this);&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getTaskCount() {&#xA;&#x9;&#x9;return this.taskCounts;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getResourceCount() {&#xA;&#x9;&#x9;return 1;&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457959573956" sizeMeasure="39">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.function.BinaryOperator;&#xA;&#xA;public class Clerk implements Employee{&#xA;&#x9;&#xA;&#x9;private Printer printer;&#xA;&#x9;private int taskCounts;&#xA;&#x9;&#xA;&#x9;Clerk(Printer printer) {&#xA;&#x9;&#x9;//Adds a printer as a private field, also adds this Clerk as a user of the specific printer&#xA;&#x9;&#x9;this.printer = printer;&#xA;&#x9;&#x9;printer.addEmployee(this);&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public double doCalculations(BinaryOperator&lt;Double> operation, &#xA;&#x9;&#x9;&#x9;double value1, double value2) {&#xA;&#x9;&#x9;this.taskCounts++;&#xA;&#x9;&#x9;return operation.apply(value1, value2);&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void printDocument(String document) {&#xA;&#x9;&#x9;this.taskCounts++;&#xA;&#x9;&#x9;printer.printDocument(document, this);&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getTaskCount() {&#xA;&#x9;&#x9;return this.taskCounts;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getResourceCount() {&#xA;&#x9;&#x9;return 1;&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457959580375" sizeMeasure="40">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.function.BinaryOperator;&#xA;&#xA;public class Clerk implements Employee{&#xA;&#x9;&#xA;&#x9;private Printer printer;&#xA;&#x9;private int taskCounts;&#xA;&#x9;&#xA;&#x9;Clerk(Printer printer) {&#xA;&#x9;&#x9;//Adds a printer as a private field, also adds this Clerk as a &#xA;&#x9;&#x9;&#x9;//user of the specific printer&#xA;&#x9;&#x9;this.printer = printer;&#xA;&#x9;&#x9;printer.addEmployee(this);&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public double doCalculations(BinaryOperator&lt;Double> operation, &#xA;&#x9;&#x9;&#x9;double value1, double value2) {&#xA;&#x9;&#x9;this.taskCounts++;&#xA;&#x9;&#x9;return operation.apply(value1, value2);&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void printDocument(String document) {&#xA;&#x9;&#x9;this.taskCounts++;&#xA;&#x9;&#x9;printer.printDocument(document, this);&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getTaskCount() {&#xA;&#x9;&#x9;return this.taskCounts;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getResourceCount() {&#xA;&#x9;&#x9;return 1;&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
      </proposals>
      <proposals xsi:type="junit:JunitTestProposal" question="/0/@parts.0/@tasks.2/@q" answer="/0/@parts.0/@tasks.2/@a" completion="1.0">
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457887342739" completion="1.0" successCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457887343685" completion="1.0" successCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457887346058" completion="1.0" successCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457887348269" completion="1.0" successCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457892802936" completion="1.0" successCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457892803707" completion="1.0" successCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457892806140" completion="1.0" successCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457892806781" completion="1.0" successCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457899582603" completion="1.0" successCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457899583272" completion="1.0" successCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457899585535" completion="1.0" successCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457899587213" completion="1.0" successCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457958883826" completion="1.0" successCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457958883978" completion="1.0" successCount="2"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457958887124" completion="1.0" successCount="3"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457958890277" completion="1.0" successCount="4"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457958898066" completion="1.0" successCount="5"/>
      </proposals>
      <proposals xsi:type="jdt:JdtSourceEditProposal" question="/0/@parts.0/@tasks.3/@q" answer="/0/@parts.0/@tasks.3/@a">
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457821383048" sizeMeasure="33">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.HashMap;&#xA;import java.util.List;&#xA;import java.util.Map;&#xA;&#xA;public class Printer {&#xA;&#xA;&#x9;private Map&lt;Employee, ArrayList&lt;String>> printHistory = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;void printDocument(String document, Employee employee) {&#xA;&#x9;&#x9;if (!printHistory.containsKey(employee)) {&#xA;&#x9;&#x9;&#x9;printHistory.put(employee, null);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;printHistory.get(employee).add(document);&#xA;&#x9;&#x9;System.out.println(document);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;List&lt;String> getPrintHistory(Employee employee) {&#xA;&#x9;&#x9;if (printHistory.containsKey(employee)) {&#xA;&#x9;&#x9;&#x9;return printHistory.get(employee);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return null;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;//For testing&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#x9;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457821403828" sizeMeasure="34">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.HashMap;&#xA;import java.util.List;&#xA;import java.util.Map;&#xA;&#xA;public class Printer {&#xA;&#xA;&#x9;private Map&lt;Employee, ArrayList&lt;String>> printHistory = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;void printDocument(String document, Employee employee) {&#xA;&#x9;&#x9;if (!printHistory.containsKey(employee)) {&#xA;&#x9;&#x9;&#x9;printHistory.put(employee, null);&#xA;&#x9;&#x9;&#x9;//Funker null her?&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;printHistory.get(employee).add(document);&#xA;&#x9;&#x9;System.out.println(document);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;List&lt;String> getPrintHistory(Employee employee) {&#xA;&#x9;&#x9;if (printHistory.containsKey(employee)) {&#xA;&#x9;&#x9;&#x9;return printHistory.get(employee);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return null;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;//For testing&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#x9;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457821486010" sizeMeasure="34">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.HashMap;&#xA;import java.util.List;&#xA;import java.util.Map;&#xA;&#xA;public class Printer {&#xA;&#xA;&#x9;private Map&lt;Employee, ArrayList&lt;String>> printHistory = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;void printDocument(String document, Employee employee) {&#xA;&#x9;&#x9;if (!printHistory.containsKey(employee)) {&#xA;&#x9;&#x9;&#x9;printHistory.put(employee, null);&#xA;&#x9;&#x9;&#x9;//Funker null her?&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;printHistory.get(employee).add(document);&#xA;&#x9;&#x9;System.out.println(document);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;List&lt;String> getPrintHistory(Employee employee) {&#xA;&#x9;&#x9;if (printHistory.containsKey(employee)) {&#xA;&#x9;&#x9;&#x9;return printHistory.get(employee);&#xA;&#x9;&#x9;&#x9;//Trenger denne å sorteres?&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return null;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;//For testing&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457821529380" sizeMeasure="35" errorCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.HashMap;&#xA;import java.util.List;&#xA;import java.util.Map;&#xA;&#xA;public class Printer {&#xA;&#xA;&#x9;private Map&lt;Employee, ArrayList&lt;String>> printHistory = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;void printDocument(String document, Employee employee) {&#xA;&#x9;&#x9;if (!printHistory.containsKey(employee)) {&#xA;&#x9;&#x9;&#x9;printHistory.put(employee, document);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else {&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;printHistory.get(employee).add(document);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;System.out.println(document);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;List&lt;String> getPrintHistory(Employee employee) {&#xA;&#x9;&#x9;if (printHistory.containsKey(employee)) {&#xA;&#x9;&#x9;&#x9;return printHistory.get(employee);&#xA;&#x9;&#x9;&#x9;//Trenger denne å sorteres?&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return null;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;//For testing&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457821823841" sizeMeasure="35">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.HashMap;&#xA;import java.util.List;&#xA;import java.util.Map;&#xA;&#xA;public class Printer {&#xA;&#xA;&#x9;private Map&lt;Employee, ArrayList&lt;String>> printHistory = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;void printDocument(String document, Employee employee) {&#xA;&#x9;&#x9;if (!printHistory.containsKey(employee)) {&#xA;&#x9;&#x9;&#x9;printHistory.put(employee, new ArrayList&lt;String>());&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else {&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;printHistory.get(employee).add(document);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;System.out.println(document);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;List&lt;String> getPrintHistory(Employee employee) {&#xA;&#x9;&#x9;if (printHistory.containsKey(employee)) {&#xA;&#x9;&#x9;&#x9;return printHistory.get(employee);&#xA;&#x9;&#x9;&#x9;//Trenger denne å sorteres?&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return null;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;//For testing&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457821836811" sizeMeasure="32" errorCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.HashMap;&#xA;import java.util.List;&#xA;import java.util.Map;&#xA;&#xA;public class Printer {&#xA;&#xA;&#x9;private Map&lt;Employee, ArrayList&lt;String>> printHistory = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;void printDocument(String document, Employee employee) {&#xA;&#x9;&#x9;if (!printHistory.containsKey(employee)) {&#xA;&#x9;&#x9;&#x9;printHistory.put(employee, new ArrayList&lt;String>());&#x9;&#xA;&#x9;&#x9;printHistory.get(employee).add(document);&#xA;&#x9;&#x9;System.out.println(document);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;List&lt;String> getPrintHistory(Employee employee) {&#xA;&#x9;&#x9;if (printHistory.containsKey(employee)) {&#xA;&#x9;&#x9;&#x9;return printHistory.get(employee);&#xA;&#x9;&#x9;&#x9;//Trenger denne å sorteres?&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return null;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;//For testing&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457821844957" sizeMeasure="33">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.HashMap;&#xA;import java.util.List;&#xA;import java.util.Map;&#xA;&#xA;public class Printer {&#xA;&#xA;&#x9;private Map&lt;Employee, ArrayList&lt;String>> printHistory = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;void printDocument(String document, Employee employee) {&#xA;&#x9;&#x9;if (!printHistory.containsKey(employee)) {&#xA;&#x9;&#x9;&#x9;printHistory.put(employee, new ArrayList&lt;String>());&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;printHistory.get(employee).add(document);&#xA;&#x9;&#x9;System.out.println(document);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;List&lt;String> getPrintHistory(Employee employee) {&#xA;&#x9;&#x9;if (printHistory.containsKey(employee)) {&#xA;&#x9;&#x9;&#x9;return printHistory.get(employee);&#xA;&#x9;&#x9;&#x9;//Trenger denne å sorteres?&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return null;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;//For testing&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457821983108" sizeMeasure="33" warningCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.HashMap;&#xA;import java.util.List;&#xA;import java.util.Map;&#xA;&#xA;public class Printer {&#xA;&#xA;&#x9;private Map&lt;Employee, ArrayList&lt;String>> printHistory = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;void printDocument(String document, Employee employee) {&#xA;&#x9;&#x9;if (!printHistory.containsKey(employee)) {&#xA;&#x9;&#x9;&#x9;printHistory.put(employee, new ArrayList&lt;String>());&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;printHistory.get(employee).add(document);&#xA;&#x9;&#x9;System.out.println(document);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;List&lt;String> getPrintHistory(Employee employee) {&#xA;&#x9;&#x9;if (printHistory.containsKey(employee)) {&#xA;&#x9;&#x9;&#x9;return printHistory.get(employee);&#xA;&#x9;&#x9;&#x9;//Trenger denne å sorteres?&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return null;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;Printer printer = new Printer();&#xA;&#x9;&#x9;Clerk clerk = new Clerk(printer);&#x9;&#x9;&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457821990672" sizeMeasure="34" warningCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.HashMap;&#xA;import java.util.List;&#xA;import java.util.Map;&#xA;&#xA;public class Printer {&#xA;&#xA;&#x9;private Map&lt;Employee, ArrayList&lt;String>> printHistory = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;void printDocument(String document, Employee employee) {&#xA;&#x9;&#x9;if (!printHistory.containsKey(employee)) {&#xA;&#x9;&#x9;&#x9;printHistory.put(employee, new ArrayList&lt;String>());&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;printHistory.get(employee).add(document);&#xA;&#x9;&#x9;System.out.println(document);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;List&lt;String> getPrintHistory(Employee employee) {&#xA;&#x9;&#x9;if (printHistory.containsKey(employee)) {&#xA;&#x9;&#x9;&#x9;return printHistory.get(employee);&#xA;&#x9;&#x9;&#x9;//Trenger denne å sorteres?&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return null;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;Printer printer = new Printer();&#xA;&#x9;&#x9;Clerk clerk = new Clerk(printer);&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457822080691" sizeMeasure="34" errorCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.HashMap;&#xA;import java.util.List;&#xA;import java.util.Map;&#xA;&#xA;public class Printer {&#xA;&#xA;&#x9;private Map&lt;Employee, ArrayList&lt;String>> printHistory = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;void printDocument(String document, Employee employee) {&#xA;&#x9;&#x9;if (!printHistory.containsKey(employee)) {&#xA;&#x9;&#x9;&#x9;printHistory.put(employee, new ArrayList&lt;String>());&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;printHistory.get(employee).add(document);&#xA;&#x9;&#x9;System.out.println(document);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;List&lt;String> getPrintHistory(Employee employee) {&#xA;&#x9;&#x9;if (printHistory.containsKey(employee)) {&#xA;&#x9;&#x9;&#x9;return printHistory.get(employee);&#xA;&#x9;&#x9;&#x9;//Trenger denne å sorteres?&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return null;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;Printer printer = new Printer();&#xA;&#x9;&#x9;Clerk clerk = new Clerk(printer);&#xA;&#x9;&#x9;clerk.printDocument(document1);&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457822084253" sizeMeasure="34">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.HashMap;&#xA;import java.util.List;&#xA;import java.util.Map;&#xA;&#xA;public class Printer {&#xA;&#xA;&#x9;private Map&lt;Employee, ArrayList&lt;String>> printHistory = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;void printDocument(String document, Employee employee) {&#xA;&#x9;&#x9;if (!printHistory.containsKey(employee)) {&#xA;&#x9;&#x9;&#x9;printHistory.put(employee, new ArrayList&lt;String>());&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;printHistory.get(employee).add(document);&#xA;&#x9;&#x9;System.out.println(document);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;List&lt;String> getPrintHistory(Employee employee) {&#xA;&#x9;&#x9;if (printHistory.containsKey(employee)) {&#xA;&#x9;&#x9;&#x9;return printHistory.get(employee);&#xA;&#x9;&#x9;&#x9;//Trenger denne å sorteres?&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return null;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;Printer printer = new Printer();&#xA;&#x9;&#x9;Clerk clerk = new Clerk(printer);&#xA;&#x9;&#x9;clerk.printDocument(&quot;document1&quot;);&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457822152800" sizeMeasure="36" warningCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.HashMap;&#xA;import java.util.List;&#xA;import java.util.Map;&#xA;&#xA;public class Printer {&#xA;&#xA;&#x9;private Map&lt;Employee, ArrayList&lt;String>> printHistory = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;void printDocument(String document, Employee employee) {&#xA;&#x9;&#x9;if (!printHistory.containsKey(employee)) {&#xA;&#x9;&#x9;&#x9;printHistory.put(employee, new ArrayList&lt;String>());&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;printHistory.get(employee).add(document);&#xA;&#x9;&#x9;System.out.println(document);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;List&lt;String> getPrintHistory(Employee employee) {&#xA;&#x9;&#x9;if (printHistory.containsKey(employee)) {&#xA;&#x9;&#x9;&#x9;return printHistory.get(employee);&#xA;&#x9;&#x9;&#x9;//Trenger denne å sorteres?&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return null;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;Printer printer = new Printer();&#xA;&#x9;&#x9;Clerk clerk1 = new Clerk(printer);&#xA;&#x9;&#x9;clerk1.printDocument(&quot;document1&quot;);&#xA;&#x9;&#x9;Clerk clerk2 = new Clerk(printer);&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457822164321" sizeMeasure="36">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.HashMap;&#xA;import java.util.List;&#xA;import java.util.Map;&#xA;&#xA;public class Printer {&#xA;&#xA;&#x9;private Map&lt;Employee, ArrayList&lt;String>> printHistory = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;void printDocument(String document, Employee employee) {&#xA;&#x9;&#x9;if (!printHistory.containsKey(employee)) {&#xA;&#x9;&#x9;&#x9;printHistory.put(employee, new ArrayList&lt;String>());&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;printHistory.get(employee).add(document);&#xA;&#x9;&#x9;System.out.println(document);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;List&lt;String> getPrintHistory(Employee employee) {&#xA;&#x9;&#x9;if (printHistory.containsKey(employee)) {&#xA;&#x9;&#x9;&#x9;return printHistory.get(employee);&#xA;&#x9;&#x9;&#x9;//Trenger denne å sorteres?&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return null;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;Printer printer = new Printer();&#xA;&#x9;&#x9;Clerk clerk1 = new Clerk(printer);&#xA;&#x9;&#x9;clerk1.printDocument(&quot;document1&quot;);&#xA;&#x9;&#x9;Clerk clerk2 = new Clerk(printer);&#xA;&#x9;&#x9;clerk2.printDocument(&quot;document2&quot;);&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457822206028" sizeMeasure="37">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.HashMap;&#xA;import java.util.List;&#xA;import java.util.Map;&#xA;&#xA;public class Printer {&#xA;&#xA;&#x9;private Map&lt;Employee, ArrayList&lt;String>> printHistory = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;void printDocument(String document, Employee employee) {&#xA;&#x9;&#x9;if (!printHistory.containsKey(employee)) {&#xA;&#x9;&#x9;&#x9;printHistory.put(employee, new ArrayList&lt;String>());&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;printHistory.get(employee).add(document);&#xA;&#x9;&#x9;System.out.println(document);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;List&lt;String> getPrintHistory(Employee employee) {&#xA;&#x9;&#x9;if (printHistory.containsKey(employee)) {&#xA;&#x9;&#x9;&#x9;return printHistory.get(employee);&#xA;&#x9;&#x9;&#x9;//Trenger denne å sorteres?&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return null;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;Printer printer = new Printer();&#xA;&#x9;&#x9;Clerk clerk1 = new Clerk(printer);&#xA;&#x9;&#x9;clerk1.printDocument(&quot;document1&quot;);&#xA;&#x9;&#x9;Clerk clerk2 = new Clerk(printer);&#xA;&#x9;&#x9;clerk2.printDocument(&quot;document2&quot;);&#xA;&#x9;&#x9;printer.getPrintHistory(clerk1);&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457822222484" sizeMeasure="37">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.HashMap;&#xA;import java.util.List;&#xA;import java.util.Map;&#xA;&#xA;public class Printer {&#xA;&#xA;&#x9;private Map&lt;Employee, ArrayList&lt;String>> printHistory = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;void printDocument(String document, Employee employee) {&#xA;&#x9;&#x9;if (!printHistory.containsKey(employee)) {&#xA;&#x9;&#x9;&#x9;printHistory.put(employee, new ArrayList&lt;String>());&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;printHistory.get(employee).add(document);&#xA;&#x9;&#x9;System.out.println(document);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;List&lt;String> getPrintHistory(Employee employee) {&#xA;&#x9;&#x9;if (printHistory.containsKey(employee)) {&#xA;&#x9;&#x9;&#x9;return printHistory.get(employee);&#xA;&#x9;&#x9;&#x9;//Trenger denne å sorteres?&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return null;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;Printer printer = new Printer();&#xA;&#x9;&#x9;Clerk clerk1 = new Clerk(printer);&#xA;&#x9;&#x9;clerk1.printDocument(&quot;document1&quot;);&#xA;&#x9;&#x9;Clerk clerk2 = new Clerk(printer);&#xA;&#x9;&#x9;clerk2.printDocument(&quot;document2&quot;);&#xA;&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1));&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457822293023" sizeMeasure="39">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.HashMap;&#xA;import java.util.List;&#xA;import java.util.Map;&#xA;&#xA;public class Printer {&#xA;&#xA;&#x9;private Map&lt;Employee, ArrayList&lt;String>> printHistory = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;void printDocument(String document, Employee employee) {&#xA;&#x9;&#x9;if (!printHistory.containsKey(employee)) {&#xA;&#x9;&#x9;&#x9;printHistory.put(employee, new ArrayList&lt;String>());&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;printHistory.get(employee).add(document);&#xA;&#x9;&#x9;System.out.println(document);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;List&lt;String> getPrintHistory(Employee employee) {&#xA;&#x9;&#x9;if (printHistory.containsKey(employee)) {&#xA;&#x9;&#x9;&#x9;return printHistory.get(employee);&#xA;&#x9;&#x9;&#x9;//Trenger denne å sorteres?&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return null;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;Printer printer = new Printer();&#xA;&#x9;&#x9;Clerk clerk1 = new Clerk(printer);&#xA;&#x9;&#x9;clerk1.printDocument(&quot;document1&quot;);&#xA;&#x9;&#x9;Clerk clerk2 = new Clerk(printer);&#xA;&#x9;&#x9;clerk2.printDocument(&quot;document2&quot;);&#xA;&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1));&#xA;&#x9;&#x9;clerk1.printDocument(&quot;document3&quot;);&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457822298743" sizeMeasure="40">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.HashMap;&#xA;import java.util.List;&#xA;import java.util.Map;&#xA;&#xA;public class Printer {&#xA;&#xA;&#x9;private Map&lt;Employee, ArrayList&lt;String>> printHistory = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;void printDocument(String document, Employee employee) {&#xA;&#x9;&#x9;if (!printHistory.containsKey(employee)) {&#xA;&#x9;&#x9;&#x9;printHistory.put(employee, new ArrayList&lt;String>());&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;printHistory.get(employee).add(document);&#xA;&#x9;&#x9;System.out.println(document);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;List&lt;String> getPrintHistory(Employee employee) {&#xA;&#x9;&#x9;if (printHistory.containsKey(employee)) {&#xA;&#x9;&#x9;&#x9;return printHistory.get(employee);&#xA;&#x9;&#x9;&#x9;//Trenger denne å sorteres?&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return null;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;Printer printer = new Printer();&#xA;&#x9;&#x9;Clerk clerk1 = new Clerk(printer);&#xA;&#x9;&#x9;clerk1.printDocument(&quot;document1&quot;);&#xA;&#x9;&#x9;Clerk clerk2 = new Clerk(printer);&#xA;&#x9;&#x9;clerk2.printDocument(&quot;document2&quot;);&#xA;&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1));&#xA;&#x9;&#x9;clerk1.printDocument(&quot;document3&quot;);&#xA;&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1));&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457822867920" sizeMeasure="41" errorCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.HashMap;&#xA;import java.util.List;&#xA;import java.util.Map;&#xA;&#xA;public class Printer {&#xA;&#xA;&#x9;private Map&lt;Employee, ArrayList&lt;String>> printHistory = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;void printDocument(String document, Employee employee) {&#xA;&#x9;&#x9;if (!printHistory.containsKey(employee)) {&#xA;&#x9;&#x9;&#x9;printHistory.put(employee, new ArrayList&lt;String>());&#xA;&#x9;&#x9;&#x9;printHistory.&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;printHistory.get(employee).add(document);&#xA;&#x9;&#x9;System.out.println(document);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;List&lt;String> getPrintHistory(Employee employee) {&#xA;&#x9;&#x9;if (printHistory.containsKey(employee)) {&#xA;&#x9;&#x9;&#x9;return printHistory.get(employee);&#xA;&#x9;&#x9;&#x9;//Trenger denne å sorteres?&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return null;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;//&#x9;&#x9;Printer printer = new Printer();&#xA;//&#x9;&#x9;Clerk clerk1 = new Clerk(printer);&#xA;//&#x9;&#x9;clerk1.printDocument(&quot;document1&quot;);&#xA;//&#x9;&#x9;Clerk clerk2 = new Clerk(printer);&#xA;//&#x9;&#x9;clerk2.printDocument(&quot;document2&quot;);&#xA;//&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1));&#xA;//&#x9;&#x9;clerk1.printDocument(&quot;document3&quot;);&#xA;//&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1));&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457822891531" sizeMeasure="41" errorCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.HashMap;&#xA;import java.util.List;&#xA;import java.util.Map;&#xA;&#xA;public class Printer {&#xA;&#xA;&#x9;private Map&lt;Employee, ArrayList&lt;String>> printHistory = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;void printDocument(String document, Employee employee) {&#xA;&#x9;&#x9;if (!printHistory.containsKey(employee)) {&#xA;&#x9;&#x9;&#x9;printHistory.put(employee, new ArrayList&lt;String>());&#xA;&#x9;&#x9;&#x9;printHistory.&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;printHistory.get(employee).add(document);&#xA;&#x9;&#x9;System.out.println(document);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;List&lt;String> getPrintHistory(Employee employee) {&#xA;&#x9;&#x9;if (printHistory.containsKey(employee)) {&#xA;&#x9;&#x9;&#x9;return printHistory.get(employee);&#xA;&#x9;&#x9;&#x9;//Trenger denne å sorteres?&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return null;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;Printer printer = new Printer();&#xA;&#x9;&#x9;Clerk clerk1 = new Clerk(printer);&#xA;&#x9;&#x9;clerk1.printDocument(&quot;document1&quot;);&#xA;&#x9;&#x9;Clerk clerk2 = new Clerk(printer);&#xA;&#x9;&#x9;clerk2.printDocument(&quot;document2&quot;);&#xA;&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1));&#xA;&#x9;&#x9;clerk1.printDocument(&quot;document3&quot;);&#xA;&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1));&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457822935306" sizeMeasure="40">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.HashMap;&#xA;import java.util.List;&#xA;import java.util.Map;&#xA;&#xA;public class Printer {&#xA;&#xA;&#x9;private Map&lt;Employee, ArrayList&lt;String>> printHistory = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;void printDocument(String document, Employee employee) {&#xA;&#x9;&#x9;if (!printHistory.containsKey(employee)) {&#xA;&#x9;&#x9;&#x9;printHistory.put(employee, new ArrayList&lt;String>());&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;printHistory.get(employee).add(document);&#xA;&#x9;&#x9;System.out.println(document);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;List&lt;String> getPrintHistory(Employee employee) {&#xA;&#x9;&#x9;if (printHistory.containsKey(employee)) {&#xA;&#x9;&#x9;&#x9;return printHistory.get(employee);&#xA;&#x9;&#x9;&#x9;//Trenger denne å sorteres?&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return null;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;Printer printer = new Printer();&#xA;&#x9;&#x9;Clerk clerk1 = new Clerk(printer);&#xA;&#x9;&#x9;clerk1.printDocument(&quot;document1&quot;);&#xA;&#x9;&#x9;Clerk clerk2 = new Clerk(printer);&#xA;&#x9;&#x9;clerk2.printDocument(&quot;document2&quot;);&#xA;&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1));&#xA;&#x9;&#x9;clerk1.printDocument(&quot;document3&quot;);&#xA;&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1));&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457822976241" sizeMeasure="39">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.HashMap;&#xA;import java.util.List;&#xA;import java.util.Map;&#xA;&#xA;public class Printer {&#xA;&#xA;&#x9;private Map&lt;Employee, ArrayList&lt;String>> printHistory = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;void printDocument(String document, Employee employee) {&#xA;&#x9;&#x9;if (!printHistory.containsKey(employee)) {&#xA;&#x9;&#x9;&#x9;printHistory.put(employee, new ArrayList&lt;String>());&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;printHistory.get(employee).add(document);&#xA;&#x9;&#x9;System.out.println(document);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;List&lt;String> getPrintHistory(Employee employee) {&#xA;&#x9;&#x9;if (printHistory.containsKey(employee)) {&#xA;&#x9;&#x9;&#x9;return printHistory.get(employee);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return null;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;Printer printer = new Printer();&#xA;&#x9;&#x9;Clerk clerk1 = new Clerk(printer);&#xA;&#x9;&#x9;clerk1.printDocument(&quot;document1&quot;);&#xA;&#x9;&#x9;Clerk clerk2 = new Clerk(printer);&#xA;&#x9;&#x9;clerk2.printDocument(&quot;document2&quot;);&#xA;&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1));&#xA;&#x9;&#x9;clerk1.printDocument(&quot;document3&quot;);&#xA;&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1));&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457823194967" sizeMeasure="38">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.HashMap;&#xA;import java.util.List;&#xA;import java.util.Map;&#xA;&#xA;public class Printer {&#xA;&#xA;&#x9;private Map&lt;Employee, ArrayList&lt;String>> printHistory = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;void printDocument(String document, Employee employee) {&#xA;&#x9;&#x9;if (!printHistory.containsKey(employee)) {&#xA;&#x9;&#x9;&#x9;printHistory.put(employee, new ArrayList&lt;String>());&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;printHistory.get(employee).add(document);&#xA;&#x9;&#x9;System.out.println(document);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;List&lt;String> getPrintHistory(Employee employee) {&#xA;&#x9;&#x9;if (printHistory.containsKey(employee)) {&#xA;&#x9;&#x9;&#x9;return printHistory.get(employee);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return null;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;Printer printer = new Printer();&#xA;&#x9;&#x9;Clerk clerk1 = new Clerk(printer);&#xA;&#x9;&#x9;clerk1.printDocument(&quot;document1&quot;);&#xA;&#x9;&#x9;Clerk clerk2 = new Clerk(printer);&#xA;&#x9;&#x9;clerk2.printDocument(&quot;document2&quot;);&#xA;&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1));&#xA;&#x9;&#x9;clerk1.printDocument(&quot;document3&quot;);&#xA;&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1));&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457823233779" sizeMeasure="39">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.HashMap;&#xA;import java.util.List;&#xA;import java.util.Map;&#xA;&#xA;public class Printer {&#xA;&#xA;&#x9;private Map&lt;Employee, ArrayList&lt;String>> printHistory = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;void printDocument(String document, Employee employee) {&#xA;&#x9;&#x9;if (!printHistory.containsKey(employee)) {&#xA;&#x9;&#x9;&#x9;printHistory.put(employee, new ArrayList&lt;String>());&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;printHistory.get(employee).add(document);&#xA;&#x9;&#x9;System.out.println(document);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;List&lt;String> getPrintHistory(Employee employee) {&#xA;&#x9;&#x9;if (printHistory.containsKey(employee)) {&#xA;&#x9;&#x9;&#x9;return printHistory.get(employee);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return null;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;Printer printer = new Printer();&#xA;&#x9;&#x9;Clerk clerk1 = new Clerk(printer);&#xA;&#x9;&#x9;clerk1.printDocument(&quot;document1&quot;);&#xA;&#x9;&#x9;Clerk clerk2 = new Clerk(printer);&#xA;&#x9;&#x9;clerk2.printDocument(&quot;document2&quot;);&#xA;&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1));&#xA;&#x9;&#x9;clerk1.printDocument(&quot;document3&quot;);&#xA;&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1));&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457823259631" sizeMeasure="40">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.HashMap;&#xA;import java.util.List;&#xA;import java.util.Map;&#xA;&#xA;public class Printer {&#xA;&#xA;&#x9;private Map&lt;Employee, ArrayList&lt;String>> printHistory = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;void printDocument(String document, Employee employee) {&#xA;&#x9;&#x9;if (!printHistory.containsKey(employee)) {&#xA;&#x9;&#x9;&#x9;printHistory.put(employee, new ArrayList&lt;String>());&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;printHistory.get(employee).add(document);&#xA;&#x9;&#x9;System.out.println(document);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;List&lt;String> getPrintHistory(Employee employee) {&#xA;&#x9;&#x9;if (printHistory.containsKey(employee)) {&#xA;&#x9;&#x9;&#x9;return printHistory.get(employee);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return null;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;Printer printer = new Printer();&#xA;&#x9;&#x9;Clerk clerk1 = new Clerk(printer);&#xA;&#x9;&#x9;clerk1.printDocument(&quot;document1&quot;);&#xA;&#x9;&#x9;Clerk clerk2 = new Clerk(printer);&#xA;&#x9;&#x9;clerk2.printDocument(&quot;document2&quot;);&#xA;&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1));&#xA;&#x9;&#x9;clerk1.printDocument(&quot;document3&quot;);&#xA;&#x9;&#x9;clerk1.printDocument(&quot;document4&quot;);&#xA;&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1));&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457823328751" sizeMeasure="41" errorCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.HashMap;&#xA;import java.util.List;&#xA;import java.util.Map;&#xA;&#xA;public class Printer {&#xA;&#xA;&#x9;private Map&lt;Employee, ArrayList&lt;String>> printHistory = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;void printDocument(String document, Employee employee) {&#xA;&#x9;&#x9;if (!printHistory.containsKey(employee)) {&#xA;&#x9;&#x9;&#x9;printHistory.put(employee, new ArrayList&lt;String>());&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;printHistory.get(employee).add(document);&#xA;&#x9;&#x9;System.out.println(document);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;List&lt;String> getPrintHistory(Employee employee) {&#xA;&#x9;&#x9;if (printHistory.containsKey(employee)) {&#xA;&#x9;&#x9;&#x9;return printHistory.get(employee);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return null;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;Printer printer = new Printer();&#xA;&#x9;&#x9;Clerk clerk1 = new Clerk(printer);&#xA;//&#x9;&#x9;clerk1.printDocument(&quot;document1&quot;);&#xA;//&#x9;&#x9;Clerk clerk2 = new Clerk(printer);&#xA;//&#x9;&#x9;clerk2.printDocument(&quot;document2&quot;);&#xA;//&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1));&#xA;//&#x9;&#x9;clerk1.printDocument(&quot;document3&quot;);&#xA;//&#x9;&#x9;clerk1.printDocument(&quot;document4&quot;);&#xA;//&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1));&#xA;&#x9;&#x9;printer.printDocument(&quot;document5, clerk1);&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457823333716" sizeMeasure="41">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.HashMap;&#xA;import java.util.List;&#xA;import java.util.Map;&#xA;&#xA;public class Printer {&#xA;&#xA;&#x9;private Map&lt;Employee, ArrayList&lt;String>> printHistory = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;void printDocument(String document, Employee employee) {&#xA;&#x9;&#x9;if (!printHistory.containsKey(employee)) {&#xA;&#x9;&#x9;&#x9;printHistory.put(employee, new ArrayList&lt;String>());&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;printHistory.get(employee).add(document);&#xA;&#x9;&#x9;System.out.println(document);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;List&lt;String> getPrintHistory(Employee employee) {&#xA;&#x9;&#x9;if (printHistory.containsKey(employee)) {&#xA;&#x9;&#x9;&#x9;return printHistory.get(employee);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return null;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;Printer printer = new Printer();&#xA;&#x9;&#x9;Clerk clerk1 = new Clerk(printer);&#xA;//&#x9;&#x9;clerk1.printDocument(&quot;document1&quot;);&#xA;//&#x9;&#x9;Clerk clerk2 = new Clerk(printer);&#xA;//&#x9;&#x9;clerk2.printDocument(&quot;document2&quot;);&#xA;//&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1));&#xA;//&#x9;&#x9;clerk1.printDocument(&quot;document3&quot;);&#xA;//&#x9;&#x9;clerk1.printDocument(&quot;document4&quot;);&#xA;//&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1));&#xA;&#x9;&#x9;printer.printDocument(&quot;document5&quot;, clerk1);&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457823374342" sizeMeasure="43" errorCount="2">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.HashMap;&#xA;import java.util.List;&#xA;import java.util.Map;&#xA;&#xA;public class Printer {&#xA;&#xA;&#x9;private Map&lt;Employee, ArrayList&lt;String>> printHistory = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;void printDocument(String document, Employee employee) {&#xA;&#x9;&#x9;if (!printHistory.containsKey(employee)) {&#xA;&#x9;&#x9;&#x9;printHistory.put(employee, new ArrayList&lt;String>());&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;printHistory.get(employee).add(document);&#xA;&#x9;&#x9;System.out.println(document);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;List&lt;String> getPrintHistory(Employee employee) {&#xA;&#x9;&#x9;if (printHistory.containsKey(employee)) {&#xA;&#x9;&#x9;&#x9;return printHistory.get(employee);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return null;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;Printer printer = new Printer();&#xA;&#x9;&#x9;Clerk clerk1 = new Clerk(printer);&#xA;//&#x9;&#x9;clerk1.printDocument(&quot;document1&quot;);&#xA;//&#x9;&#x9;Clerk clerk2 = new Clerk(printer);&#xA;//&#x9;&#x9;clerk2.printDocument(&quot;document2&quot;);&#xA;//&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1));&#xA;//&#x9;&#x9;clerk1.printDocument(&quot;document3&quot;);&#xA;//&#x9;&#x9;clerk1.printDocument(&quot;document4&quot;);&#xA;//&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1));&#xA;&#x9;&#x9;printer.printDocument(&quot;document5&quot;, clerk1);&#xA;&#x9;&#x9;printer.printDocument(&quot;document6&quot;, clerk1);&#xA;&#x9;&#x9;printer.getPrintHistory(employee)&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457823377647" sizeMeasure="43" errorCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.HashMap;&#xA;import java.util.List;&#xA;import java.util.Map;&#xA;&#xA;public class Printer {&#xA;&#xA;&#x9;private Map&lt;Employee, ArrayList&lt;String>> printHistory = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;void printDocument(String document, Employee employee) {&#xA;&#x9;&#x9;if (!printHistory.containsKey(employee)) {&#xA;&#x9;&#x9;&#x9;printHistory.put(employee, new ArrayList&lt;String>());&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;printHistory.get(employee).add(document);&#xA;&#x9;&#x9;System.out.println(document);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;List&lt;String> getPrintHistory(Employee employee) {&#xA;&#x9;&#x9;if (printHistory.containsKey(employee)) {&#xA;&#x9;&#x9;&#x9;return printHistory.get(employee);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return null;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;Printer printer = new Printer();&#xA;&#x9;&#x9;Clerk clerk1 = new Clerk(printer);&#xA;//&#x9;&#x9;clerk1.printDocument(&quot;document1&quot;);&#xA;//&#x9;&#x9;Clerk clerk2 = new Clerk(printer);&#xA;//&#x9;&#x9;clerk2.printDocument(&quot;document2&quot;);&#xA;//&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1));&#xA;//&#x9;&#x9;clerk1.printDocument(&quot;document3&quot;);&#xA;//&#x9;&#x9;clerk1.printDocument(&quot;document4&quot;);&#xA;//&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1));&#xA;&#x9;&#x9;printer.printDocument(&quot;document5&quot;, clerk1);&#xA;&#x9;&#x9;printer.printDocument(&quot;document6&quot;, clerk1);&#xA;&#x9;&#x9;printer.getPrintHistory(clerk1)&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457823379185" sizeMeasure="43">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.HashMap;&#xA;import java.util.List;&#xA;import java.util.Map;&#xA;&#xA;public class Printer {&#xA;&#xA;&#x9;private Map&lt;Employee, ArrayList&lt;String>> printHistory = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;void printDocument(String document, Employee employee) {&#xA;&#x9;&#x9;if (!printHistory.containsKey(employee)) {&#xA;&#x9;&#x9;&#x9;printHistory.put(employee, new ArrayList&lt;String>());&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;printHistory.get(employee).add(document);&#xA;&#x9;&#x9;System.out.println(document);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;List&lt;String> getPrintHistory(Employee employee) {&#xA;&#x9;&#x9;if (printHistory.containsKey(employee)) {&#xA;&#x9;&#x9;&#x9;return printHistory.get(employee);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return null;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;Printer printer = new Printer();&#xA;&#x9;&#x9;Clerk clerk1 = new Clerk(printer);&#xA;//&#x9;&#x9;clerk1.printDocument(&quot;document1&quot;);&#xA;//&#x9;&#x9;Clerk clerk2 = new Clerk(printer);&#xA;//&#x9;&#x9;clerk2.printDocument(&quot;document2&quot;);&#xA;//&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1));&#xA;//&#x9;&#x9;clerk1.printDocument(&quot;document3&quot;);&#xA;//&#x9;&#x9;clerk1.printDocument(&quot;document4&quot;);&#xA;//&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1));&#xA;&#x9;&#x9;printer.printDocument(&quot;document5&quot;, clerk1);&#xA;&#x9;&#x9;printer.printDocument(&quot;document6&quot;, clerk1);&#xA;&#x9;&#x9;printer.getPrintHistory(clerk1);&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457823395607" sizeMeasure="43">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.HashMap;&#xA;import java.util.List;&#xA;import java.util.Map;&#xA;&#xA;public class Printer {&#xA;&#xA;&#x9;private Map&lt;Employee, ArrayList&lt;String>> printHistory = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;void printDocument(String document, Employee employee) {&#xA;&#x9;&#x9;if (!printHistory.containsKey(employee)) {&#xA;&#x9;&#x9;&#x9;printHistory.put(employee, new ArrayList&lt;String>());&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;printHistory.get(employee).add(document);&#xA;&#x9;&#x9;System.out.println(document);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;List&lt;String> getPrintHistory(Employee employee) {&#xA;&#x9;&#x9;if (printHistory.containsKey(employee)) {&#xA;&#x9;&#x9;&#x9;return printHistory.get(employee);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return null;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;Printer printer = new Printer();&#xA;&#x9;&#x9;Clerk clerk1 = new Clerk(printer);&#xA;//&#x9;&#x9;clerk1.printDocument(&quot;document1&quot;);&#xA;//&#x9;&#x9;Clerk clerk2 = new Clerk(printer);&#xA;//&#x9;&#x9;clerk2.printDocument(&quot;document2&quot;);&#xA;//&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1));&#xA;//&#x9;&#x9;clerk1.printDocument(&quot;document3&quot;);&#xA;//&#x9;&#x9;clerk1.printDocument(&quot;document4&quot;);&#xA;//&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1));&#xA;&#x9;&#x9;printer.printDocument(&quot;document5&quot;, clerk1);&#xA;&#x9;&#x9;printer.printDocument(&quot;document6&quot;, clerk1);&#xA;&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1));&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457887323471" sizeMeasure="43">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.HashMap;&#xA;import java.util.List;&#xA;import java.util.Map;&#xA;&#xA;public class Printer {&#xA;&#xA;&#x9;private Map&lt;Employee, ArrayList&lt;String>> printHistory = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;void printDocument(String document, Employee employee) {&#xA;&#x9;&#x9;if (!printHistory.containsKey(employee)) {&#xA;&#x9;&#x9;&#x9;printHistory.put(employee, new ArrayList&lt;String>());&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;printHistory.get(employee).add(document);&#xA;&#x9;&#x9;System.out.println(document);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;List&lt;String> getPrintHistory(Employee employee) {&#xA;&#x9;&#x9;if (printHistory.containsKey(employee)) {&#xA;&#x9;&#x9;&#x9;return printHistory.get(employee);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return null;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;Printer printer = new Printer();&#xA;&#x9;&#x9;Clerk clerk1 = new Clerk(printer);&#xA;&#x9;&#x9;clerk1.printDocument(&quot;document1&quot;);&#xA;&#x9;&#x9;Clerk clerk2 = new Clerk(printer);&#xA;&#x9;&#x9;clerk2.printDocument(&quot;document2&quot;);&#xA;&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1));&#xA;&#x9;&#x9;clerk1.printDocument(&quot;document3&quot;);&#xA;&#x9;&#x9;clerk1.printDocument(&quot;document4&quot;);&#xA;&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1));&#xA;&#x9;&#x9;printer.printDocument(&quot;document5&quot;, clerk1);&#xA;&#x9;&#x9;printer.printDocument(&quot;document6&quot;, clerk1);&#xA;&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1));&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457890031531" sizeMeasure="43">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.HashMap;&#xA;import java.util.List;&#xA;import java.util.Map;&#xA;&#xA;public class Printer {&#xA;&#xA;&#x9;private Map&lt;Employee, ArrayList&lt;String>> printHistory = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;void printDocument(String document, Employee employee) {&#xA;&#x9;&#x9;if (!printHistory.containsKey(employee)) {&#xA;&#x9;&#x9;&#x9;printHistory.put(employee, new ArrayList&lt;String>());&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;printHistory.get(employee).add(document);&#xA;&#x9;&#x9;System.out.print(document);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;List&lt;String> getPrintHistory(Employee employee) {&#xA;&#x9;&#x9;if (printHistory.containsKey(employee)) {&#xA;&#x9;&#x9;&#x9;return printHistory.get(employee);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return null;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;Printer printer = new Printer();&#xA;&#x9;&#x9;Clerk clerk1 = new Clerk(printer);&#xA;&#x9;&#x9;clerk1.printDocument(&quot;document1&quot;);&#xA;&#x9;&#x9;Clerk clerk2 = new Clerk(printer);&#xA;&#x9;&#x9;clerk2.printDocument(&quot;document2&quot;);&#xA;&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1));&#xA;&#x9;&#x9;clerk1.printDocument(&quot;document3&quot;);&#xA;&#x9;&#x9;clerk1.printDocument(&quot;document4&quot;);&#xA;&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1));&#xA;&#x9;&#x9;printer.printDocument(&quot;document5&quot;, clerk1);&#xA;&#x9;&#x9;printer.printDocument(&quot;document6&quot;, clerk1);&#xA;&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1));&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457890038719" sizeMeasure="43">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.HashMap;&#xA;import java.util.List;&#xA;import java.util.Map;&#xA;&#xA;public class Printer {&#xA;&#xA;&#x9;private Map&lt;Employee, ArrayList&lt;String>> printHistory = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;void printDocument(String document, Employee employee) {&#xA;&#x9;&#x9;if (!printHistory.containsKey(employee)) {&#xA;&#x9;&#x9;&#x9;printHistory.put(employee, new ArrayList&lt;String>());&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;printHistory.get(employee).add(document);&#xA;&#x9;&#x9;System.out.println(document);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;List&lt;String> getPrintHistory(Employee employee) {&#xA;&#x9;&#x9;if (printHistory.containsKey(employee)) {&#xA;&#x9;&#x9;&#x9;return printHistory.get(employee);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return null;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;Printer printer = new Printer();&#xA;&#x9;&#x9;Clerk clerk1 = new Clerk(printer);&#xA;&#x9;&#x9;clerk1.printDocument(&quot;document1&quot;);&#xA;&#x9;&#x9;Clerk clerk2 = new Clerk(printer);&#xA;&#x9;&#x9;clerk2.printDocument(&quot;document2&quot;);&#xA;&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1));&#xA;&#x9;&#x9;clerk1.printDocument(&quot;document3&quot;);&#xA;&#x9;&#x9;clerk1.printDocument(&quot;document4&quot;);&#xA;&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1));&#xA;&#x9;&#x9;printer.printDocument(&quot;document5&quot;, clerk1);&#xA;&#x9;&#x9;printer.printDocument(&quot;document6&quot;, clerk1);&#xA;&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1));&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457892328246" sizeMeasure="45">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.HashMap;&#xA;import java.util.List;&#xA;import java.util.Map;&#xA;&#xA;public class Printer {&#xA;&#xA;&#x9;private Map&lt;Employee, ArrayList&lt;String>> printHistory = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;void printDocument(String document, Employee employee) {&#xA;&#x9;&#x9;if (!printHistory.containsKey(employee)) {&#xA;&#x9;&#x9;&#x9;printHistory.put(employee, new ArrayList&lt;String>());&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;printHistory.get(employee).add(document);&#xA;&#x9;&#x9;System.out.println(document);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;List&lt;String> getPrintHistory(Employee employee) {&#xA;&#x9;&#x9;if (printHistory.containsKey(employee)) {&#xA;&#x9;&#x9;&#x9;return printHistory.get(employee);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else {&#xA;&#x9;&#x9;&#x9;return null;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;Printer printer = new Printer();&#xA;&#x9;&#x9;Clerk clerk1 = new Clerk(printer);&#xA;&#x9;&#x9;clerk1.printDocument(&quot;document1&quot;);&#xA;&#x9;&#x9;Clerk clerk2 = new Clerk(printer);&#xA;&#x9;&#x9;clerk2.printDocument(&quot;document2&quot;);&#xA;&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1));&#xA;&#x9;&#x9;clerk1.printDocument(&quot;document3&quot;);&#xA;&#x9;&#x9;clerk1.printDocument(&quot;document4&quot;);&#xA;&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1));&#xA;&#x9;&#x9;printer.printDocument(&quot;document5&quot;, clerk1);&#xA;&#x9;&#x9;printer.printDocument(&quot;document6&quot;, clerk1);&#xA;&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1));&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457892473873" sizeMeasure="45">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.HashMap;&#xA;import java.util.List;&#xA;import java.util.Map;&#xA;&#xA;public class Printer {&#xA;&#xA;&#x9;private Map&lt;Employee, ArrayList&lt;String>> printHistory = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;void printDocument(String document, Employee employee) {&#xA;&#x9;&#x9;if (!printHistory.containsKey(employee)) {&#xA;&#x9;&#x9;&#x9;printHistory.put(employee, new ArrayList&lt;String>());&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;printHistory.get(employee).add(document);&#xA;&#x9;&#x9;System.out.println(document);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;List&lt;String> getPrintHistory(Employee employee) {&#xA;&#x9;&#x9;if (printHistory.containsKey(employee)) {&#xA;&#x9;&#x9;&#x9;return printHistory.get(employee);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else {&#xA;&#x9;&#x9;&#x9;return null;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;Printer printer = new Printer();&#xA;&#x9;&#x9;Clerk clerk1 = new Clerk(printer);&#xA;&#x9;&#x9;clerk1.printDocument(&quot;document1&quot;);&#xA;&#x9;&#x9;Clerk clerk2 = new Clerk(printer);&#xA;&#x9;&#x9;clerk2.printDocument(&quot;document2&quot;);&#xA;&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1));&#xA;&#x9;&#x9;clerk1.printDocument(&quot;document3&quot;);&#xA;&#x9;&#x9;clerk1.printDocument(&quot;document4&quot;);&#xA;&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1));&#xA;&#x9;&#x9;printer.printDocument(&quot;document5&quot;, clerk1);&#xA;&#x9;&#x9;printer.printDocument(&quot;document6&quot;, clerk1);&#xA;&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1));&#xA;&#x9;&#x9;System.out.println(printer.printHistory.size());&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457892517283" sizeMeasure="45">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.HashMap;&#xA;import java.util.List;&#xA;import java.util.Map;&#xA;&#xA;public class Printer {&#xA;&#xA;&#x9;private Map&lt;Employee, ArrayList&lt;String>> printHistory = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;void printDocument(String document, Employee employee) {&#xA;&#x9;&#x9;if (!printHistory.containsKey(employee)) {&#xA;&#x9;&#x9;&#x9;printHistory.put(employee, new ArrayList&lt;String>());&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;printHistory.get(employee).add(document);&#xA;&#x9;&#x9;System.out.println(document);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;List&lt;String> getPrintHistory(Employee employee) {&#xA;&#x9;&#x9;if (printHistory.containsKey(employee)) {&#xA;&#x9;&#x9;&#x9;return printHistory.get(employee);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else {&#xA;&#x9;&#x9;&#x9;return null;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;Printer printer = new Printer();&#xA;&#x9;&#x9;Clerk clerk1 = new Clerk(printer);&#xA;&#x9;&#x9;clerk1.printDocument(&quot;document1&quot;);&#xA;&#x9;&#x9;Clerk clerk2 = new Clerk(printer);&#xA;&#x9;&#x9;clerk2.printDocument(&quot;document2&quot;);&#xA;&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1));&#xA;&#x9;&#x9;clerk1.printDocument(&quot;document3&quot;);&#xA;&#x9;&#x9;clerk1.printDocument(&quot;document4&quot;);&#xA;&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1));&#xA;&#x9;&#x9;printer.printDocument(&quot;document5&quot;, clerk1);&#xA;&#x9;&#x9;printer.printDocument(&quot;document6&quot;, clerk1);&#xA;&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1));&#xA;&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1).size());&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457892633138" sizeMeasure="46">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.HashMap;&#xA;import java.util.List;&#xA;import java.util.Map;&#xA;&#xA;public class Printer {&#xA;&#xA;&#x9;private Map&lt;Employee, ArrayList&lt;String>> printHistory = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;void printDocument(String document, Employee employee) {&#xA;&#x9;&#x9;if (!printHistory.containsKey(employee)) {&#xA;&#x9;&#x9;&#x9;printHistory.put(employee, new ArrayList&lt;String>());&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;printHistory.get(employee).add(document);&#xA;&#x9;&#x9;System.out.println(document);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;List&lt;String> getPrintHistory(Employee employee) {&#xA;&#x9;&#x9;if (printHistory.containsKey(employee)) {&#xA;&#x9;&#x9;&#x9;return printHistory.get(employee);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else {&#xA;&#x9;&#x9;&#x9;return null;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;Printer printer = new Printer();&#xA;&#x9;&#x9;Clerk clerk1 = new Clerk(printer);&#xA;&#x9;&#x9;clerk1.printDocument(&quot;document1&quot;);&#xA;&#x9;&#x9;Clerk clerk2 = new Clerk(printer);&#xA;&#x9;&#x9;clerk2.printDocument(&quot;document2&quot;);&#xA;&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1));&#xA;&#x9;&#x9;clerk1.printDocument(&quot;document3&quot;);&#xA;&#x9;&#x9;clerk1.printDocument(&quot;document4&quot;);&#xA;&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1));&#xA;&#x9;&#x9;printer.printDocument(&quot;document5&quot;, clerk1);&#xA;&#x9;&#x9;printer.printDocument(&quot;document6&quot;, clerk1);&#xA;&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1));&#xA;&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1).size());&#xA;&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1).get(0));&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457892765120" sizeMeasure="48">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.HashMap;&#xA;import java.util.List;&#xA;import java.util.Map;&#xA;&#xA;public class Printer {&#xA;&#xA;&#x9;private Map&lt;Employee, ArrayList&lt;String>> printHistory = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;void printDocument(String document, Employee employee) {&#xA;&#x9;&#x9;if (!printHistory.containsKey(employee)) {&#xA;&#x9;&#x9;&#x9;printHistory.put(employee, new ArrayList&lt;String>());&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;printHistory.get(employee).add(document);&#xA;&#x9;&#x9;System.out.println(document);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;List&lt;String> getPrintHistory(Employee employee) {&#xA;&#x9;&#x9;if (printHistory.containsKey(employee)) {&#xA;&#x9;&#x9;&#x9;return printHistory.get(employee);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else {&#xA;&#x9;&#x9;&#x9;return null;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;Printer printer = new Printer();&#xA;&#x9;&#x9;Clerk clerk1 = new Clerk(printer);&#xA;&#x9;&#x9;clerk1.printDocument(&quot;document1&quot;);&#xA;&#x9;&#x9;Clerk clerk2 = new Clerk(printer);&#xA;&#x9;&#x9;clerk2.printDocument(&quot;document2&quot;);&#xA;&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1));&#xA;&#x9;&#x9;clerk1.printDocument(&quot;document3&quot;);&#xA;&#x9;&#x9;clerk1.printDocument(&quot;document4&quot;);&#xA;&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1));&#xA;&#x9;&#x9;printer.printDocument(&quot;document5&quot;, clerk1);&#xA;&#x9;&#x9;printer.printDocument(&quot;document6&quot;, clerk1);&#xA;&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1));&#xA;&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1).size());&#xA;&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1).get(0));&#xA;&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk2).size());&#xA;&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk2).get(0));&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457892794885" sizeMeasure="48">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.HashMap;&#xA;import java.util.List;&#xA;import java.util.Map;&#xA;&#xA;public class Printer {&#xA;&#xA;&#x9;private Map&lt;Employee, ArrayList&lt;String>> printHistory = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;void printDocument(String document, Employee employee) {&#xA;&#x9;&#x9;if (!printHistory.containsKey(employee)) {&#xA;&#x9;&#x9;&#x9;printHistory.put(employee, new ArrayList&lt;String>());&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;printHistory.get(employee).add(document);&#xA;&#x9;&#x9;System.out.println(document);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;List&lt;String> getPrintHistory(Employee employee) {&#xA;&#x9;&#x9;if (printHistory.containsKey(employee)) {&#xA;&#x9;&#x9;&#x9;return printHistory.get(employee);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else {&#xA;&#x9;&#x9;&#x9;return null;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;//&#x9;&#x9;Printer printer = new Printer();&#xA;//&#x9;&#x9;Clerk clerk1 = new Clerk(printer);&#xA;//&#x9;&#x9;clerk1.printDocument(&quot;document1&quot;);&#xA;//&#x9;&#x9;Clerk clerk2 = new Clerk(printer);&#xA;//&#x9;&#x9;clerk2.printDocument(&quot;document2&quot;);&#xA;//&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1));&#xA;//&#x9;&#x9;clerk1.printDocument(&quot;document3&quot;);&#xA;//&#x9;&#x9;clerk1.printDocument(&quot;document4&quot;);&#xA;//&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1));&#xA;//&#x9;&#x9;printer.printDocument(&quot;document5&quot;, clerk1);&#xA;//&#x9;&#x9;printer.printDocument(&quot;document6&quot;, clerk1);&#xA;//&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1));&#xA;//&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1).size());&#xA;//&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1).get(0));&#xA;//&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk2).size());&#xA;//&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk2).get(0));&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457898991577" sizeMeasure="49">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.HashMap;&#xA;import java.util.List;&#xA;import java.util.Map;&#xA;&#xA;public class Printer {&#xA;&#xA;&#x9;private Map&lt;Employee, ArrayList&lt;String>> printHistory = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;void printDocument(String document, Employee employee) {&#xA;&#x9;&#x9;if (!printHistory.containsKey(employee)) {&#xA;&#x9;&#x9;&#x9;printHistory.put(employee, new ArrayList&lt;String>());&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;printHistory.get(employee).add(document);&#xA;&#x9;&#x9;System.out.println(document);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;List&lt;String> getPrintHistory(Employee employee) {&#xA;&#x9;&#x9;if (printHistory.containsKey(employee)) {&#xA;&#x9;&#x9;&#x9;return printHistory.get(employee);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else {&#xA;&#x9;&#x9;&#x9;return null;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;Printer printer = new Printer();&#xA;&#x9;&#x9;Clerk clerk1 = new Clerk(printer);&#xA;//&#x9;&#x9;clerk1.printDocument(&quot;document1&quot;);&#xA;//&#x9;&#x9;Clerk clerk2 = new Clerk(printer);&#xA;//&#x9;&#x9;clerk2.printDocument(&quot;document2&quot;);&#xA;//&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1));&#xA;//&#x9;&#x9;clerk1.printDocument(&quot;document3&quot;);&#xA;//&#x9;&#x9;clerk1.printDocument(&quot;document4&quot;);&#xA;//&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1));&#xA;//&#x9;&#x9;printer.printDocument(&quot;document5&quot;, clerk1);&#xA;//&#x9;&#x9;printer.printDocument(&quot;document6&quot;, clerk1);&#xA;//&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1));&#xA;//&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1).size());&#xA;//&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1).get(0));&#xA;//&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk2).size());&#xA;//&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk2).get(0));&#xA;&#x9;&#x9;printer.getPrintHistory(clerk1);&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457899015168" sizeMeasure="49">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.HashMap;&#xA;import java.util.List;&#xA;import java.util.Map;&#xA;&#xA;public class Printer {&#xA;&#xA;&#x9;private Map&lt;Employee, ArrayList&lt;String>> printHistory = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;void printDocument(String document, Employee employee) {&#xA;&#x9;&#x9;if (!printHistory.containsKey(employee)) {&#xA;&#x9;&#x9;&#x9;printHistory.put(employee, new ArrayList&lt;String>());&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;printHistory.get(employee).add(document);&#xA;&#x9;&#x9;System.out.println(document);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;List&lt;String> getPrintHistory(Employee employee) {&#xA;&#x9;&#x9;if (printHistory.containsKey(employee)) {&#xA;&#x9;&#x9;&#x9;return printHistory.get(employee);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else {&#xA;&#x9;&#x9;&#x9;return null;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;Printer printer = new Printer();&#xA;&#x9;&#x9;Clerk clerk1 = new Clerk(printer);&#xA;//&#x9;&#x9;clerk1.printDocument(&quot;document1&quot;);&#xA;//&#x9;&#x9;Clerk clerk2 = new Clerk(printer);&#xA;//&#x9;&#x9;clerk2.printDocument(&quot;document2&quot;);&#xA;//&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1));&#xA;//&#x9;&#x9;clerk1.printDocument(&quot;document3&quot;);&#xA;//&#x9;&#x9;clerk1.printDocument(&quot;document4&quot;);&#xA;//&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1));&#xA;//&#x9;&#x9;printer.printDocument(&quot;document5&quot;, clerk1);&#xA;//&#x9;&#x9;printer.printDocument(&quot;document6&quot;, clerk1);&#xA;//&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1));&#xA;//&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1).size());&#xA;//&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1).get(0));&#xA;//&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk2).size());&#xA;//&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk2).get(0));&#xA;&#x9;&#x9;printer.getPrintHistory(clerk1);&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457899169888" sizeMeasure="50">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.HashMap;&#xA;import java.util.List;&#xA;import java.util.Map;&#xA;&#xA;public class Printer {&#xA;&#xA;&#x9;private Map&lt;Employee, ArrayList&lt;String>> printHistory = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;void printDocument(String document, Employee employee) {&#xA;&#x9;&#x9;if (!printHistory.containsKey(employee)) {&#xA;&#x9;&#x9;&#x9;printHistory.put(employee, new ArrayList&lt;String>());&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;printHistory.get(employee).add(document);&#xA;&#x9;&#x9;System.out.println(document);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;List&lt;String> getPrintHistory(Employee employee) {&#xA;&#x9;&#x9;if (printHistory.containsKey(employee)) {&#xA;&#x9;&#x9;&#x9;return printHistory.get(employee);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else {&#xA;&#x9;&#x9;&#x9;return null;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;//For testing&#xA;&#x9;&#x9;Printer printer = new Printer();&#xA;&#x9;&#x9;Clerk clerk1 = new Clerk(printer);&#xA;//&#x9;&#x9;clerk1.printDocument(&quot;document1&quot;);&#xA;//&#x9;&#x9;Clerk clerk2 = new Clerk(printer);&#xA;//&#x9;&#x9;clerk2.printDocument(&quot;document2&quot;);&#xA;//&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1));&#xA;//&#x9;&#x9;clerk1.printDocument(&quot;document3&quot;);&#xA;//&#x9;&#x9;clerk1.printDocument(&quot;document4&quot;);&#xA;//&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1));&#xA;//&#x9;&#x9;printer.printDocument(&quot;document5&quot;, clerk1);&#xA;//&#x9;&#x9;printer.printDocument(&quot;document6&quot;, clerk1);&#xA;//&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1));&#xA;//&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1).size());&#xA;//&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1).get(0));&#xA;//&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk2).size());&#xA;//&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk2).get(0));&#xA;&#x9;&#x9;printer.getPrintHistory(clerk1);&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457899207587" sizeMeasure="54" errorCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.HashMap;&#xA;import java.util.List;&#xA;import java.util.Map;&#xA;&#xA;public class Printer {&#xA;&#xA;&#x9;private Map&lt;Employee, ArrayList&lt;String>> printHistory = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;void printDocument(String document, Employee employee) {&#xA;&#x9;&#x9;if (!printHistory.containsKey(employee)) {&#xA;&#x9;&#x9;&#x9;printHistory.put(employee, new ArrayList&lt;String>());&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;printHistory.get(employee).add(document);&#xA;&#x9;&#x9;System.out.println(document);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void addEmployee(Empolyee employee) {&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;List&lt;String> getPrintHistory(Employee employee) {&#xA;&#x9;&#x9;if (printHistory.containsKey(employee)) {&#xA;&#x9;&#x9;&#x9;return printHistory.get(employee);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else {&#xA;&#x9;&#x9;&#x9;return null;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;//For testing&#xA;&#x9;&#x9;Printer printer = new Printer();&#xA;&#x9;&#x9;Clerk clerk1 = new Clerk(printer);&#xA;//&#x9;&#x9;clerk1.printDocument(&quot;document1&quot;);&#xA;//&#x9;&#x9;Clerk clerk2 = new Clerk(printer);&#xA;//&#x9;&#x9;clerk2.printDocument(&quot;document2&quot;);&#xA;//&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1));&#xA;//&#x9;&#x9;clerk1.printDocument(&quot;document3&quot;);&#xA;//&#x9;&#x9;clerk1.printDocument(&quot;document4&quot;);&#xA;//&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1));&#xA;//&#x9;&#x9;printer.printDocument(&quot;document5&quot;, clerk1);&#xA;//&#x9;&#x9;printer.printDocument(&quot;document6&quot;, clerk1);&#xA;//&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1));&#xA;//&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1).size());&#xA;//&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1).get(0));&#xA;//&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk2).size());&#xA;//&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk2).get(0));&#xA;&#x9;&#x9;printer.getPrintHistory(clerk1);&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457899214541" sizeMeasure="54" errorCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.HashMap;&#xA;import java.util.List;&#xA;import java.util.Map;&#xA;&#xA;public class Printer {&#xA;&#xA;&#x9;private Map&lt;Employee, ArrayList&lt;String>> printHistory = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;void printDocument(String document, Employee employee) {&#xA;&#x9;&#x9;if (!printHistory.containsKey(employee)) {&#xA;&#x9;&#x9;&#x9;printHistory.put(employee, new ArrayList&lt;String>());&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;printHistory.get(employee).add(document);&#xA;&#x9;&#x9;System.out.println(document);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void addEmployee(Empolyee employee) {&#xA;&#x9;&#x9;printHistory.put(employee, new ArrayList&lt;String>());&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;List&lt;String> getPrintHistory(Employee employee) {&#xA;&#x9;&#x9;if (printHistory.containsKey(employee)) {&#xA;&#x9;&#x9;&#x9;return printHistory.get(employee);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else {&#xA;&#x9;&#x9;&#x9;return null;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;//For testing&#xA;&#x9;&#x9;Printer printer = new Printer();&#xA;&#x9;&#x9;Clerk clerk1 = new Clerk(printer);&#xA;//&#x9;&#x9;clerk1.printDocument(&quot;document1&quot;);&#xA;//&#x9;&#x9;Clerk clerk2 = new Clerk(printer);&#xA;//&#x9;&#x9;clerk2.printDocument(&quot;document2&quot;);&#xA;//&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1));&#xA;//&#x9;&#x9;clerk1.printDocument(&quot;document3&quot;);&#xA;//&#x9;&#x9;clerk1.printDocument(&quot;document4&quot;);&#xA;//&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1));&#xA;//&#x9;&#x9;printer.printDocument(&quot;document5&quot;, clerk1);&#xA;//&#x9;&#x9;printer.printDocument(&quot;document6&quot;, clerk1);&#xA;//&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1));&#xA;//&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1).size());&#xA;//&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1).get(0));&#xA;//&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk2).size());&#xA;//&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk2).get(0));&#xA;&#x9;&#x9;printer.getPrintHistory(clerk1);&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457899217678" sizeMeasure="54" errorCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.HashMap;&#xA;import java.util.List;&#xA;import java.util.Map;&#xA;&#xA;public class Printer {&#xA;&#xA;&#x9;private Map&lt;Employee, ArrayList&lt;String>> printHistory = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;void printDocument(String document, Employee employee) {&#xA;//&#x9;&#x9;if (!printHistory.containsKey(employee)) {&#xA;//&#x9;&#x9;&#x9;printHistory.put(employee, new ArrayList&lt;String>());&#xA;//&#x9;&#x9;}&#xA;&#x9;&#x9;printHistory.get(employee).add(document);&#xA;&#x9;&#x9;System.out.println(document);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void addEmployee(Empolyee employee) {&#xA;&#x9;&#x9;printHistory.put(employee, new ArrayList&lt;String>());&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;List&lt;String> getPrintHistory(Employee employee) {&#xA;&#x9;&#x9;if (printHistory.containsKey(employee)) {&#xA;&#x9;&#x9;&#x9;return printHistory.get(employee);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else {&#xA;&#x9;&#x9;&#x9;return null;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;//For testing&#xA;&#x9;&#x9;Printer printer = new Printer();&#xA;&#x9;&#x9;Clerk clerk1 = new Clerk(printer);&#xA;//&#x9;&#x9;clerk1.printDocument(&quot;document1&quot;);&#xA;//&#x9;&#x9;Clerk clerk2 = new Clerk(printer);&#xA;//&#x9;&#x9;clerk2.printDocument(&quot;document2&quot;);&#xA;//&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1));&#xA;//&#x9;&#x9;clerk1.printDocument(&quot;document3&quot;);&#xA;//&#x9;&#x9;clerk1.printDocument(&quot;document4&quot;);&#xA;//&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1));&#xA;//&#x9;&#x9;printer.printDocument(&quot;document5&quot;, clerk1);&#xA;//&#x9;&#x9;printer.printDocument(&quot;document6&quot;, clerk1);&#xA;//&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1));&#xA;//&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1).size());&#xA;//&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1).get(0));&#xA;//&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk2).size());&#xA;//&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk2).get(0));&#xA;&#x9;&#x9;printer.getPrintHistory(clerk1);&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457899253055" sizeMeasure="54">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.HashMap;&#xA;import java.util.List;&#xA;import java.util.Map;&#xA;&#xA;public class Printer {&#xA;&#xA;&#x9;private Map&lt;Employee, ArrayList&lt;String>> printHistory = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;void printDocument(String document, Employee employee) {&#xA;//&#x9;&#x9;if (!printHistory.containsKey(employee)) {&#xA;//&#x9;&#x9;&#x9;printHistory.put(employee, new ArrayList&lt;String>());&#xA;//&#x9;&#x9;}&#xA;&#x9;&#x9;printHistory.get(employee).add(document);&#xA;&#x9;&#x9;System.out.println(document);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void addEmployee(Employee employee) {&#xA;&#x9;&#x9;printHistory.put(employee, new ArrayList&lt;String>());&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;List&lt;String> getPrintHistory(Employee employee) {&#xA;&#x9;&#x9;if (printHistory.containsKey(employee)) {&#xA;&#x9;&#x9;&#x9;return printHistory.get(employee);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else {&#xA;&#x9;&#x9;&#x9;return null;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;//For testing&#xA;&#x9;&#x9;Printer printer = new Printer();&#xA;&#x9;&#x9;Clerk clerk1 = new Clerk(printer);&#xA;//&#x9;&#x9;clerk1.printDocument(&quot;document1&quot;);&#xA;//&#x9;&#x9;Clerk clerk2 = new Clerk(printer);&#xA;//&#x9;&#x9;clerk2.printDocument(&quot;document2&quot;);&#xA;//&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1));&#xA;//&#x9;&#x9;clerk1.printDocument(&quot;document3&quot;);&#xA;//&#x9;&#x9;clerk1.printDocument(&quot;document4&quot;);&#xA;//&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1));&#xA;//&#x9;&#x9;printer.printDocument(&quot;document5&quot;, clerk1);&#xA;//&#x9;&#x9;printer.printDocument(&quot;document6&quot;, clerk1);&#xA;//&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1));&#xA;//&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1).size());&#xA;//&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1).get(0));&#xA;//&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk2).size());&#xA;//&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk2).get(0));&#xA;&#x9;&#x9;printer.getPrintHistory(clerk1);&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457899601238" sizeMeasure="54">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.HashMap;&#xA;import java.util.List;&#xA;import java.util.Map;&#xA;&#xA;public class Printer {&#xA;&#xA;&#x9;private Map&lt;Employee, ArrayList&lt;String>> printHistory = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;void printDocument(String document, Employee employee) {&#xA;//&#x9;&#x9;if (!printHistory.containsKey(employee)) {&#xA;//&#x9;&#x9;&#x9;printHistory.put(employee, new ArrayList&lt;String>());&#xA;//&#x9;&#x9;}&#xA;&#x9;&#x9;printHistory.get(employee).add(document);&#xA;&#x9;&#x9;System.out.println(document);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void addEmployee(Employee employee) {&#xA;&#x9;&#x9;printHistory.put(employee, new ArrayList&lt;String>());&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;List&lt;String> getPrintHistory(Employee employee) {&#xA;&#x9;&#x9;if (printHistory.containsKey(employee)) {&#xA;&#x9;&#x9;&#x9;return printHistory.get(employee);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else {&#xA;&#x9;&#x9;&#x9;return null;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;//For testing&#xA;&#x9;&#x9;Printer printer = new Printer();&#xA;&#x9;&#x9;Clerk clerk1 = new Clerk(printer);&#xA;&#x9;&#x9;clerk1.printDocument(&quot;document1&quot;);&#xA;&#x9;&#x9;Clerk clerk2 = new Clerk(printer);&#xA;&#x9;&#x9;clerk2.printDocument(&quot;document2&quot;);&#xA;&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1));&#xA;&#x9;&#x9;clerk1.printDocument(&quot;document3&quot;);&#xA;&#x9;&#x9;clerk1.printDocument(&quot;document4&quot;);&#xA;&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1));&#xA;&#x9;&#x9;printer.printDocument(&quot;document5&quot;, clerk1);&#xA;&#x9;&#x9;printer.printDocument(&quot;document6&quot;, clerk1);&#xA;&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1));&#xA;&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1).size());&#xA;&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1).get(0));&#xA;&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk2).size());&#xA;&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk2).get(0));&#xA;&#x9;&#x9;printer.getPrintHistory(clerk1);&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457899614308" sizeMeasure="54">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.HashMap;&#xA;import java.util.List;&#xA;import java.util.Map;&#xA;&#xA;public class Printer {&#xA;&#xA;&#x9;private Map&lt;Employee, ArrayList&lt;String>> printHistory = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;void printDocument(String document, Employee employee) {&#xA;//&#x9;&#x9;if (!printHistory.containsKey(employee)) {&#xA;//&#x9;&#x9;&#x9;printHistory.put(employee, new ArrayList&lt;String>());&#xA;//&#x9;&#x9;}&#xA;&#x9;&#x9;printHistory.get(employee).add(document);&#xA;&#x9;&#x9;System.out.println(document);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void addEmployee(Employee employee) {&#xA;&#x9;&#x9;printHistory.put(employee, new ArrayList&lt;String>());&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;List&lt;String> getPrintHistory(Employee employee) {&#xA;&#x9;&#x9;if (printHistory.containsKey(employee)) {&#xA;&#x9;&#x9;&#x9;return printHistory.get(employee);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else {&#xA;&#x9;&#x9;&#x9;return null;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;//For testing&#xA;&#x9;&#x9;Printer printer = new Printer();&#xA;&#x9;&#x9;Clerk clerk1 = new Clerk(printer);&#xA;&#x9;&#x9;printer.getPrintHistory(clerk1);&#xA;&#x9;&#x9;clerk1.printDocument(&quot;document1&quot;);&#xA;&#x9;&#x9;Clerk clerk2 = new Clerk(printer);&#xA;&#x9;&#x9;clerk2.printDocument(&quot;document2&quot;);&#xA;&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1));&#xA;&#x9;&#x9;clerk1.printDocument(&quot;document3&quot;);&#xA;&#x9;&#x9;clerk1.printDocument(&quot;document4&quot;);&#xA;&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1));&#xA;&#x9;&#x9;printer.printDocument(&quot;document5&quot;, clerk1);&#xA;&#x9;&#x9;printer.printDocument(&quot;document6&quot;, clerk1);&#xA;&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1));&#xA;&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1).size());&#xA;&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1).get(0));&#xA;&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk2).size());&#xA;&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk2).get(0));&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457899622059" sizeMeasure="51">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.HashMap;&#xA;import java.util.List;&#xA;import java.util.Map;&#xA;&#xA;public class Printer {&#xA;&#xA;&#x9;private Map&lt;Employee, ArrayList&lt;String>> printHistory = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;void printDocument(String document, Employee employee) {&#xA;&#x9;&#x9;printHistory.get(employee).add(document);&#xA;&#x9;&#x9;System.out.println(document);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void addEmployee(Employee employee) {&#xA;&#x9;&#x9;printHistory.put(employee, new ArrayList&lt;String>());&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;List&lt;String> getPrintHistory(Employee employee) {&#xA;&#x9;&#x9;if (printHistory.containsKey(employee)) {&#xA;&#x9;&#x9;&#x9;return printHistory.get(employee);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else {&#xA;&#x9;&#x9;&#x9;return null;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;//For testing&#xA;&#x9;&#x9;Printer printer = new Printer();&#xA;&#x9;&#x9;Clerk clerk1 = new Clerk(printer);&#xA;&#x9;&#x9;printer.getPrintHistory(clerk1);&#xA;&#x9;&#x9;clerk1.printDocument(&quot;document1&quot;);&#xA;&#x9;&#x9;Clerk clerk2 = new Clerk(printer);&#xA;&#x9;&#x9;clerk2.printDocument(&quot;document2&quot;);&#xA;&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1));&#xA;&#x9;&#x9;clerk1.printDocument(&quot;document3&quot;);&#xA;&#x9;&#x9;clerk1.printDocument(&quot;document4&quot;);&#xA;&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1));&#xA;&#x9;&#x9;printer.printDocument(&quot;document5&quot;, clerk1);&#xA;&#x9;&#x9;printer.printDocument(&quot;document6&quot;, clerk1);&#xA;&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1));&#xA;&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1).size());&#xA;&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1).get(0));&#xA;&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk2).size());&#xA;&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk2).get(0));&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457955780362" sizeMeasure="51">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.HashMap;&#xA;import java.util.List;&#xA;import java.util.Map;&#xA;&#xA;public class Printer {&#xA;&#xA;&#x9;private Map&lt;Employee, ArrayList&lt;String>> printHistory = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;void printDocument(String document, Employee employee) {&#xA;&#x9;&#x9;printHistory.get(employee).add(document);&#xA;&#x9;&#x9;System.out.println(document);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void addEmployee(Employee employee) {&#xA;&#x9;&#x9;printHistory.put(employee, new ArrayList&lt;String>());&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;List&lt;String> getPrintHistory(Employee employee) {&#xA;&#x9;&#x9;if (printHistory.containsKey(employee)) {&#xA;&#x9;&#x9;&#x9;return printHistory.get(employee);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else {&#xA;&#x9;&#x9;&#x9;return null;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;//For testing&#xA;&#x9;&#x9;Printer printer = new Printer();&#xA;&#x9;&#x9;Clerk clerk1 = new Clerk(printer);&#xA;&#x9;&#x9;printer.getPrintHistory(clerk1);&#xA;&#x9;&#x9;clerk1.printDocument(&quot;document1&quot;);&#xA;&#x9;&#x9;Clerk clerk2 = new Clerk(printer);&#xA;&#x9;&#x9;clerk2.printDocument(&quot;document2&quot;);&#xA;&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1));&#xA;&#x9;&#x9;clerk1.printDocument(&quot;document3&quot;);&#xA;&#x9;&#x9;clerk1.printDocument(&quot;document4&quot;);&#xA;&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1));&#xA;&#x9;&#x9;printer.printDocument(&quot;document5&quot;, clerk1);&#xA;&#x9;&#x9;printer.printDocument(&quot;document6&quot;, clerk1);&#xA;&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1));&#xA;&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1).size());&#xA;&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1).get(0));&#xA;&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk2).size());&#xA;&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk2).get(0));&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457959392398" sizeMeasure="52">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.HashMap;&#xA;import java.util.List;&#xA;import java.util.Map;&#xA;&#xA;public class Printer {&#xA;&#xA;&#x9;private Map&lt;Employee, ArrayList&lt;String>> printHistory = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;void printDocument(String document, Employee employee) {&#xA;&#x9;&#x9;printHistory.get(employee).add(document);&#xA;&#x9;&#x9;System.out.println(document);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void addEmployee(Employee employee) {&#xA;&#x9;&#x9;//Adds the employee as a key in printHistory (happens in the constructor of Clerk)&#xA;&#x9;&#x9;printHistory.put(employee, new ArrayList&lt;String>());&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;List&lt;String> getPrintHistory(Employee employee) {&#xA;&#x9;&#x9;if (printHistory.containsKey(employee)) {&#xA;&#x9;&#x9;&#x9;return printHistory.get(employee);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else {&#xA;&#x9;&#x9;&#x9;return null;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;//For testing&#xA;&#x9;&#x9;Printer printer = new Printer();&#xA;&#x9;&#x9;Clerk clerk1 = new Clerk(printer);&#xA;&#x9;&#x9;printer.getPrintHistory(clerk1);&#xA;&#x9;&#x9;clerk1.printDocument(&quot;document1&quot;);&#xA;&#x9;&#x9;Clerk clerk2 = new Clerk(printer);&#xA;&#x9;&#x9;clerk2.printDocument(&quot;document2&quot;);&#xA;&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1));&#xA;&#x9;&#x9;clerk1.printDocument(&quot;document3&quot;);&#xA;&#x9;&#x9;clerk1.printDocument(&quot;document4&quot;);&#xA;&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1));&#xA;&#x9;&#x9;printer.printDocument(&quot;document5&quot;, clerk1);&#xA;&#x9;&#x9;printer.printDocument(&quot;document6&quot;, clerk1);&#xA;&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1));&#xA;&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1).size());&#xA;&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1).get(0));&#xA;&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk2).size());&#xA;&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk2).get(0));&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
      </proposals>
      <proposals xsi:type="junit:JunitTestProposal" question="/0/@parts.0/@tasks.4/@q" answer="/0/@parts.0/@tasks.4/@a" completion="1.0">
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457821497502" completion="0.0" errorCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457821501509" completion="0.0" errorCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457821504015" completion="0.0" errorCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457821871564" completion="0.0" errorCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457821873354" completion="0.0" errorCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457821874666" completion="1.0" successCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457821905564" completion="0.0" errorCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457821995550" completion="0.0" errorCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457822357785" completion="0.0" errorCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457822870655" completion="0.0" errorCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457822872136" completion="0.0" errorCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457884832439" completion="0.0" errorCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457884833256" completion="0.0" errorCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457884833942" completion="1.0" successCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457887376531" completion="0.0" errorCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457887377265" completion="0.0" errorCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457887378182" completion="1.0" successCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457887387476" completion="0.0" errorCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457889969897" completion="0.0" errorCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457890034242" completion="0.0" errorCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457890034991" completion="0.0" errorCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457892340692" completion="0.0" errorCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457892341542" completion="0.0" errorCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457892733539" completion="0.0" errorCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457892830147" completion="0.0" errorCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457892830788" completion="0.0" errorCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457892831344" completion="1.0" successCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457899290895" completion="1.0" successCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457899293106" completion="1.0" successCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457899294982" completion="1.0" successCount="1"/>
      </proposals>
      <proposals xsi:type="jdt:JdtSourceEditProposal" question="/0/@parts.0/@tasks.5/@q" answer="/0/@parts.0/@tasks.5/@a">
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457821000606" sizeMeasure="5">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;public class Manager {&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457821013976" sizeMeasure="31">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.function.BinaryOperator;&#xA;&#xA;public class Manager implements Employee{&#xA;&#xA;&#x9;@Override&#xA;&#x9;public double doCalculations(BinaryOperator&lt;Double> operation, double value1, double value2) {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;return 0;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void printDocument(String document) {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getTaskCount() {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;return 0;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getResourceCount() {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;return 0;&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457823536995" sizeMeasure="35" errorCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.function.BinaryOperator;&#xA;&#xA;public class Manager implements Employee{&#xA;&#xA;&#x9;Manager (Collection&lt;Employee> employees) {&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public double doCalculations(BinaryOperator&lt;Double> operation, double value1, double value2) {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;return 0;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void printDocument(String document) {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getTaskCount() {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;return 0;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getResourceCount() {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;return 0;&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457823541668" sizeMeasure="36">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.Collection;&#xA;import java.util.function.BinaryOperator;&#xA;&#xA;public class Manager implements Employee{&#xA;&#xA;&#x9;Manager (Collection&lt;Employee> employees) {&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public double doCalculations(BinaryOperator&lt;Double> operation, double value1, double value2) {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;return 0;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void printDocument(String document) {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getTaskCount() {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;return 0;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getResourceCount() {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;return 0;&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457823587958" sizeMeasure="38">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.Collection;&#xA;import java.util.function.BinaryOperator;&#xA;&#xA;public class Manager implements Employee{&#xA;&#xA;&#x9;Manager (Collection&lt;Employee> employees) {&#xA;&#x9;&#x9;if (employees == null) {&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public double doCalculations(BinaryOperator&lt;Double> operation, double value1, double value2) {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;return 0;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void printDocument(String document) {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getTaskCount() {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;return 0;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getResourceCount() {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;return 0;&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457823627909" sizeMeasure="38">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.Collection;&#xA;import java.util.function.BinaryOperator;&#xA;&#xA;public class Manager implements Employee{&#xA;&#xA;&#x9;Manager (Collection&lt;Employee> employees) {&#xA;&#x9;&#x9;if (employees == null) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;Employees can't be null.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public double doCalculations(BinaryOperator&lt;Double> operation, double value1, double value2) {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;return 0;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void printDocument(String document) {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getTaskCount() {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;return 0;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getResourceCount() {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;return 0;&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457823746224" sizeMeasure="41" errorCount="2">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.Collection;&#xA;import java.util.function.BinaryOperator;&#xA;&#xA;public class Manager implements Employee{&#xA;&#xA;&#x9;List&lt;Employee> empyees = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;Manager (Collection&lt;Employee> employees) {&#xA;&#x9;&#x9;if (employees == null) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;Employees can't be null.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public double doCalculations(BinaryOperator&lt;Double> operation, double value1, double value2) {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;return 0;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void printDocument(String document) {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getTaskCount() {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;return 0;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getResourceCount() {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;return 0;&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457823752246" sizeMeasure="43">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collection;&#xA;import java.util.List;&#xA;import java.util.function.BinaryOperator;&#xA;&#xA;public class Manager implements Employee{&#xA;&#xA;&#x9;List&lt;Employee> empyees = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;Manager (Collection&lt;Employee> employees) {&#xA;&#x9;&#x9;if (employees == null) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;Employees can't be null.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public double doCalculations(BinaryOperator&lt;Double> operation, double value1, double value2) {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;return 0;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void printDocument(String document) {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getTaskCount() {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;return 0;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getResourceCount() {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;return 0;&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457823778350" sizeMeasure="43">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collection;&#xA;import java.util.List;&#xA;import java.util.function.BinaryOperator;&#xA;&#xA;public class Manager implements Employee{&#xA;&#xA;&#x9;List&lt;Employee> empyees = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;Manager (Collection&lt;Employee> employees) {&#xA;&#x9;&#x9;if (employees == null) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;Employees can't be null.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;this.empyees.addAll(employees)&#x9;&#x9;;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public double doCalculations(BinaryOperator&lt;Double> operation, double value1, double value2) {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;return 0;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void printDocument(String document) {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getTaskCount() {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;return 0;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getResourceCount() {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;return 0;&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457823780319" sizeMeasure="43">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collection;&#xA;import java.util.List;&#xA;import java.util.function.BinaryOperator;&#xA;&#xA;public class Manager implements Employee{&#xA;&#xA;&#x9;List&lt;Employee> empyees = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;Manager (Collection&lt;Employee> employees) {&#xA;&#x9;&#x9;if (employees == null) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;Employees can't be null.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;this.empyees.addAll(employees);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public double doCalculations(BinaryOperator&lt;Double> operation, double value1, double value2) {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;return 0;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void printDocument(String document) {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getTaskCount() {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;return 0;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getResourceCount() {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;return 0;&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457823822274" sizeMeasure="43">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collection;&#xA;import java.util.List;&#xA;import java.util.function.BinaryOperator;&#xA;&#xA;public class Manager implements Employee{&#xA;&#xA;&#x9;List&lt;Employee> empyees = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;Manager (Collection&lt;Employee> employees) {&#xA;&#x9;&#x9;if (employees.contains(null)) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;Employees can't be null.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;this.empyees.addAll(employees);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public double doCalculations(BinaryOperator&lt;Double> operation, double value1, double value2) {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;return 0;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void printDocument(String document) {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getTaskCount() {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;return 0;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getResourceCount() {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;return 0;&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457823887566" sizeMeasure="43" errorCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collection;&#xA;import java.util.List;&#xA;import java.util.function.BinaryOperator;&#xA;&#xA;public class Manager implements Employee{&#xA;&#xA;&#x9;List&lt;Employee> employees = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;Manager (Collection&lt;Employee> employees) {&#xA;&#x9;&#x9;if (employees.contains(null)) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;Employees can't be null.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;this.empyees.addAll(employees);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public double doCalculations(BinaryOperator&lt;Double> operation, double value1, double value2) {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;return 0;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void printDocument(String document) {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getTaskCount() {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;return 0;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getResourceCount() {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;return 0;&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457823891252" sizeMeasure="43">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collection;&#xA;import java.util.List;&#xA;import java.util.function.BinaryOperator;&#xA;&#xA;public class Manager implements Employee{&#xA;&#xA;&#x9;List&lt;Employee> employees = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;Manager (Collection&lt;Employee> employees) {&#xA;&#x9;&#x9;if (employees.contains(null)) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;Employees can't be null.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;this.employees.addAll(employees);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public double doCalculations(BinaryOperator&lt;Double> operation, double value1, double value2) {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;return 0;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void printDocument(String document) {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getTaskCount() {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;return 0;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getResourceCount() {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;return 0;&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457824072975" sizeMeasure="46" errorCount="2">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collection;&#xA;import java.util.List;&#xA;import java.util.function.BinaryOperator;&#xA;&#xA;public class Manager implements Employee{&#xA;&#xA;&#x9;List&lt;Employee> employees = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;Manager (Collection&lt;Employee> employees) {&#xA;&#x9;&#x9;if (employees.contains(null)) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;Employees can't be null.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;this.employees.addAll(employees);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public double doCalculations(BinaryOperator&lt;Double> operation, double value1, double value2) {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;return 0;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void printDocument(String document) {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getTaskCount() {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;return 0;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getResourceCount() {&#xA;&#x9;&#x9;int resources;&#xA;&#x9;&#x9;for (Employee employee : employees) {&#xA;&#x9;&#x9;&#x9;resources += employee.getResourceCount();&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return resources;&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457824084354" sizeMeasure="46" errorCount="2">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collection;&#xA;import java.util.List;&#xA;import java.util.function.BinaryOperator;&#xA;&#xA;public class Manager implements Employee{&#xA;&#xA;&#x9;List&lt;Employee> employees = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;Manager (Collection&lt;Employee> employees) {&#xA;&#x9;&#x9;if (employees.contains(null)) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;Employees can't be null.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;this.employees.addAll(employees);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public double doCalculations(BinaryOperator&lt;Double> operation, double value1, double value2) {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;return 0;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void printDocument(String document) {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getTaskCount() {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;return 0;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getResourceCount() {&#xA;&#x9;&#x9;int resources;&#xA;&#x9;&#x9;for (Employee employee : employees) {&#xA;&#x9;&#x9;&#x9;resources += employee.getResourceCount();&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return resources;&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457824099178" sizeMeasure="46">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collection;&#xA;import java.util.List;&#xA;import java.util.function.BinaryOperator;&#xA;&#xA;public class Manager implements Employee{&#xA;&#xA;&#x9;List&lt;Employee> employees = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;Manager (Collection&lt;Employee> employees) {&#xA;&#x9;&#x9;if (employees.contains(null)) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;Employees can't be null.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;this.employees.addAll(employees);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public double doCalculations(BinaryOperator&lt;Double> operation, double value1, double value2) {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;return 0;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void printDocument(String document) {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getTaskCount() {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;return 0;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getResourceCount() {&#xA;&#x9;&#x9;int resources = 0;&#xA;&#x9;&#x9;for (Employee employee : employees) {&#xA;&#x9;&#x9;&#x9;resources += employee.getResourceCount();&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return resources;&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457881814859" sizeMeasure="46" errorCount="2" warningCount="3">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collection;&#xA;import java.util.List;&#xA;import java.util.function.BinaryOperator;&#xA;&#xA;public class Manager implements Employee{&#xA;&#xA;&#x9;private Collection&lt;Employee> employees = new ArrayList&lt;>();&#xA;&#x9;private int &#xA;&#x9;&#xA;&#x9;Manager (Collection&lt;Employee> employees) {&#xA;&#x9;&#x9;if (employees.contains(null)) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;Employees can't be null.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;this.employees.addAll(employees);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public double doCalculations(BinaryOperator&lt;Double> operation, double value1, double value2) {&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void printDocument(String document) {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getTaskCount() {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;return 0;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getResourceCount() {&#xA;&#x9;&#x9;int resources = 0;&#xA;&#x9;&#x9;for (Employee employee : employees) {&#xA;&#x9;&#x9;&#x9;resources += employee.getResourceCount();&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return resources;&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457881827585" sizeMeasure="45" errorCount="2" warningCount="3">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collection;&#xA;import java.util.List;&#xA;import java.util.function.BinaryOperator;&#xA;&#xA;public class Manager implements Employee{&#xA;&#xA;&#x9;private Collection&lt;Employee> employees = new ArrayList&lt;>();&#xA;&#x9;private int &#xA;&#x9;&#xA;&#x9;Manager (Collection&lt;Employee> employees) {&#xA;&#x9;&#x9;if (employees.contains(null)) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;Employees can't be null.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;this.employees.addAll(employees);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public double doCalculations(BinaryOperator&lt;Double> operation, double value1, double value2) {&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void printDocument(String document) {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getTaskCount() {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;return 0;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getResourceCount() {&#xA;&#x9;&#x9;int resources = 0;&#xA;&#x9;&#x9;for (Employee employee : employees) {&#xA;&#x9;&#x9;&#x9;resources += employee.getResourceCount();&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return resources;&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457881896031" sizeMeasure="45" errorCount="2" warningCount="3">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collection;&#xA;import java.util.List;&#xA;import java.util.function.BinaryOperator;&#xA;&#xA;public class Manager implements Employee{&#xA;&#xA;&#x9;private Collection&lt;Employee> employees = new ArrayList&lt;>();&#xA;&#x9;private int &#xA;&#x9;&#xA;&#x9;Manager (Collection&lt;Employee> employees) {&#xA;&#x9;&#x9;if (employees.isEmpty()) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;Employees can't be null.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;this.employees.addAll(employees);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public double doCalculations(BinaryOperator&lt;Double> operation, double value1, double value2) {&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void printDocument(String document) {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getTaskCount() {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;return 0;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getResourceCount() {&#xA;&#x9;&#x9;int resources = 0;&#xA;&#x9;&#x9;for (Employee employee : employees) {&#xA;&#x9;&#x9;&#x9;resources += employee.getResourceCount();&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return resources;&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457881918758" sizeMeasure="45" errorCount="2" warningCount="3">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collection;&#xA;import java.util.List;&#xA;import java.util.function.BinaryOperator;&#xA;&#xA;public class Manager implements Employee{&#xA;&#xA;&#x9;private Collection&lt;Employee> employees = new ArrayList&lt;>();&#xA;&#x9;private int &#xA;&#x9;&#xA;&#x9;Manager (Collection&lt;Employee> employees) {&#xA;&#x9;&#x9;if (employees.isEmpty()) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;The manager must have at least one employee.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;this.employees.addAll(employees);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public double doCalculations(BinaryOperator&lt;Double> operation, double value1, double value2) {&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void printDocument(String document) {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getTaskCount() {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;return 0;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getResourceCount() {&#xA;&#x9;&#x9;int resources = 0;&#xA;&#x9;&#x9;for (Employee employee : employees) {&#xA;&#x9;&#x9;&#x9;resources += employee.getResourceCount();&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return resources;&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457881968694" sizeMeasure="49" errorCount="2" warningCount="3">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collection;&#xA;import java.util.List;&#xA;import java.util.function.BinaryOperator;&#xA;&#xA;public class Manager implements Employee{&#xA;&#xA;&#x9;private Collection&lt;Employee> employees = new ArrayList&lt;>();&#xA;&#x9;private int &#xA;&#x9;&#xA;&#x9;Manager (Collection&lt;Employee> employees) {&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;Manager(Collection&lt;Employee> employees) {&#xA;&#x9;&#x9;if (employees.isEmpty()) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;The manager must have at least one employee.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;this.employees.addAll(employees);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public double doCalculations(BinaryOperator&lt;Double> operation, double value1, double value2) {&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void printDocument(String document) {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getTaskCount() {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;return 0;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getResourceCount() {&#xA;&#x9;&#x9;int resources = 0;&#xA;&#x9;&#x9;for (Employee employee : employees) {&#xA;&#x9;&#x9;&#x9;resources += employee.getResourceCount();&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return resources;&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457881978207" sizeMeasure="45" errorCount="2" warningCount="3">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collection;&#xA;import java.util.List;&#xA;import java.util.function.BinaryOperator;&#xA;&#xA;public class Manager implements Employee{&#xA;&#xA;&#x9;private Collection&lt;Employee> employees = new ArrayList&lt;>();&#xA;&#x9;private int &#xA;&#x9;&#xA;&#x9;Manager(Collection&lt;Employee> employees) {&#xA;&#x9;&#x9;if (employees.isEmpty()) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;The manager must have at least one employee.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;this.employees.addAll(employees);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public double doCalculations(BinaryOperator&lt;Double> operation, double value1, double value2) {&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void printDocument(String document) {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getTaskCount() {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;return 0;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getResourceCount() {&#xA;&#x9;&#x9;int resources = 0;&#xA;&#x9;&#x9;for (Employee employee : employees) {&#xA;&#x9;&#x9;&#x9;resources += employee.getResourceCount();&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return resources;&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457881983758" sizeMeasure="45" errorCount="1" warningCount="2">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collection;&#xA;import java.util.List;&#xA;import java.util.function.BinaryOperator;&#xA;&#xA;public class Manager implements Employee{&#xA;&#xA;&#x9;private Collection&lt;Employee> employees = new ArrayList&lt;>();&#xA;&#x9;private int ha;&#xA;&#x9;&#xA;&#x9;Manager(Collection&lt;Employee> employees) {&#xA;&#x9;&#x9;if (employees.isEmpty()) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;The manager must have at least one employee.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;this.employees.addAll(employees);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public double doCalculations(BinaryOperator&lt;Double> operation, double value1, double value2) {&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void printDocument(String document) {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getTaskCount() {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;return 0;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getResourceCount() {&#xA;&#x9;&#x9;int resources = 0;&#xA;&#x9;&#x9;for (Employee employee : employees) {&#xA;&#x9;&#x9;&#x9;resources += employee.getResourceCount();&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return resources;&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457882047593" sizeMeasure="45" errorCount="1" warningCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collection;&#xA;import java.util.List;&#xA;import java.util.function.BinaryOperator;&#xA;&#xA;public class Manager implements Employee{&#xA;&#xA;&#x9;private Collection&lt;Employee> employees = new ArrayList&lt;>();&#xA;&#x9;private int ha;&#xA;&#x9;&#xA;&#x9;Manager(Collection&lt;Employee> employees) {&#xA;&#x9;&#x9;if (employees.isEmpty()) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;The manager must have at least one employee.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;this.employees.addAll(employees);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public double doCalculations(BinaryOperator&lt;Double> operation, double value1, double value2) {&#xA;&#x9;&#x9;String chosenEmployee = employees.get((int)Math.random()*employees.size());&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void printDocument(String document) {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getTaskCount() {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;return 0;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getResourceCount() {&#xA;&#x9;&#x9;int resources = 0;&#xA;&#x9;&#x9;for (Employee employee : employees) {&#xA;&#x9;&#x9;&#x9;resources += employee.getResourceCount();&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return resources;&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457882159060" sizeMeasure="48" errorCount="1" warningCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collection;&#xA;import java.util.List;&#xA;import java.util.function.BinaryOperator;&#xA;&#xA;public class Manager implements Employee{&#xA;&#xA;&#x9;private Collection&lt;Employee> employees = new ArrayList&lt;>();&#xA;&#x9;private int ha;&#xA;&#x9;&#xA;&#x9;Manager(Collection&lt;Employee> employees) {&#xA;&#x9;&#x9;if (employees.isEmpty()) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;The manager must have at least one employee.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;this.employees.addAll(employees);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public double doCalculations(BinaryOperator&lt;Double> operation, double value1, double value2) {&#xA;&#x9;&#x9;String chosenEmployee = employees.get((int)Math.random()*employees.size());&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void printDocument(String document) {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getTaskCount() {&#xA;&#x9;&#x9;int resources = 0;&#xA;&#x9;&#x9;for (Employee employee : employees) {&#xA;&#x9;&#x9;&#x9;resources += employee.getResourceCount();&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return resources;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getResourceCount() {&#xA;&#x9;&#x9;int resources = 0;&#xA;&#x9;&#x9;for (Employee employee : employees) {&#xA;&#x9;&#x9;&#x9;resources += employee.getResourceCount();&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return resources;&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457882180851" sizeMeasure="48" errorCount="1" warningCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collection;&#xA;import java.util.List;&#xA;import java.util.function.BinaryOperator;&#xA;&#xA;public class Manager implements Employee{&#xA;&#xA;&#x9;private Collection&lt;Employee> employees = new ArrayList&lt;>();&#xA;&#x9;private int ha;&#xA;&#x9;&#xA;&#x9;Manager(Collection&lt;Employee> employees) {&#xA;&#x9;&#x9;if (employees.isEmpty()) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;The manager must have at least one employee.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;this.employees.addAll(employees);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public double doCalculations(BinaryOperator&lt;Double> operation, double value1, double value2) {&#xA;&#x9;&#x9;String chosenEmployee = employees.get((int)Math.random()*employees.size());&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void printDocument(String document) {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getTaskCount() {&#xA;&#x9;&#x9;int tasks = 0;&#xA;&#x9;&#x9;for (Employee employee : employees) {&#xA;&#x9;&#x9;&#x9;tasks += employee.getTaskCount();&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return tasks;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getResourceCount() {&#xA;&#x9;&#x9;int resources = 0;&#xA;&#x9;&#x9;for (Employee employee : employees) {&#xA;&#x9;&#x9;&#x9;resources += employee.getResourceCount();&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return resources;&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457882238796" sizeMeasure="49" errorCount="1" warningCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collection;&#xA;import java.util.List;&#xA;import java.util.function.BinaryOperator;&#xA;&#xA;public class Manager implements Employee{&#xA;&#xA;&#x9;private Collection&lt;Employee> employees = new ArrayList&lt;>();&#xA;&#x9;private int ha;&#xA;&#x9;&#xA;&#x9;Manager(Collection&lt;Employee> employees) {&#xA;&#x9;&#x9;if (employees.isEmpty()) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;The manager must have at least one employee.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;this.employees.addAll(employees);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public double doCalculations(BinaryOperator&lt;Double> operation, double value1, double value2) {&#xA;&#x9;&#x9;int chosenEmployee = (int)Math.random()*employees.size();&#xA;&#x9;&#x9;String c3hosenEmployee = employees.get((int)Math.random()*employees.size());&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void printDocument(String document) {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getTaskCount() {&#xA;&#x9;&#x9;int tasks = 0;&#xA;&#x9;&#x9;for (Employee employee : employees) {&#xA;&#x9;&#x9;&#x9;tasks += employee.getTaskCount();&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return tasks;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getResourceCount() {&#xA;&#x9;&#x9;int resources = 0;&#xA;&#x9;&#x9;for (Employee employee : employees) {&#xA;&#x9;&#x9;&#x9;resources += employee.getResourceCount();&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return resources;&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457882247260" sizeMeasure="49" errorCount="1" warningCount="2">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collection;&#xA;import java.util.List;&#xA;import java.util.function.BinaryOperator;&#xA;&#xA;public class Manager implements Employee{&#xA;&#xA;&#x9;private Collection&lt;Employee> employees = new ArrayList&lt;>();&#xA;&#x9;private int ha;&#xA;&#x9;&#xA;&#x9;Manager(Collection&lt;Employee> employees) {&#xA;&#x9;&#x9;if (employees.isEmpty()) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;The manager must have at least one employee.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;this.employees.addAll(employees);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public double doCalculations(BinaryOperator&lt;Double> operation, double value1, double value2) {&#xA;&#x9;&#x9;int chosenEmployee = (int)Math.random()*employees.size();&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void printDocument(String document) {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getTaskCount() {&#xA;&#x9;&#x9;int tasks = 0;&#xA;&#x9;&#x9;for (Employee employee : employees) {&#xA;&#x9;&#x9;&#x9;tasks += employee.getTaskCount();&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return tasks;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getResourceCount() {&#xA;&#x9;&#x9;int resources = 0;&#xA;&#x9;&#x9;for (Employee employee : employees) {&#xA;&#x9;&#x9;&#x9;resources += employee.getResourceCount();&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return resources;&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457882254767" sizeMeasure="48" errorCount="1" warningCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collection;&#xA;import java.util.List;&#xA;import java.util.function.BinaryOperator;&#xA;&#xA;public class Manager implements Employee{&#xA;&#xA;&#x9;private Collection&lt;Employee> employees = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;Manager(Collection&lt;Employee> employees) {&#xA;&#x9;&#x9;if (employees.isEmpty()) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;The manager must have at least one employee.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;this.employees.addAll(employees);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public double doCalculations(BinaryOperator&lt;Double> operation, double value1, double value2) {&#xA;&#x9;&#x9;int chosenEmployee = (int)Math.random()*employees.size();&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void printDocument(String document) {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getTaskCount() {&#xA;&#x9;&#x9;int tasks = 0;&#xA;&#x9;&#x9;for (Employee employee : employees) {&#xA;&#x9;&#x9;&#x9;tasks += employee.getTaskCount();&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return tasks;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getResourceCount() {&#xA;&#x9;&#x9;int resources = 0;&#xA;&#x9;&#x9;for (Employee employee : employees) {&#xA;&#x9;&#x9;&#x9;resources += employee.getResourceCount();&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return resources;&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457882614565" sizeMeasure="48" errorCount="2">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collection;&#xA;import java.util.List;&#xA;import java.util.function.BinaryOperator;&#xA;&#xA;public class Manager implements Employee{&#xA;&#xA;&#x9;private List&lt;Employee> employees = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;Manager(Collection&lt;Employee> employees) {&#xA;&#x9;&#x9;if (employees.isEmpty()) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;The manager must have at least one employee.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;this.employees.addAll(employees);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public double doCalculations(BinaryOperator&lt;Double> operation, double value1, double value2) {&#xA;&#x9;&#x9;int chosenEmployee = (int)Math.random()*employees.size();&#xA;&#x9;&#x9;return &#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void printDocument(String document) {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getTaskCount() {&#xA;&#x9;&#x9;int tasks = 0;&#xA;&#x9;&#x9;for (Employee employee : employees) {&#xA;&#x9;&#x9;&#x9;tasks += employee.getTaskCount();&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return tasks;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getResourceCount() {&#xA;&#x9;&#x9;int resources = 0;&#xA;&#x9;&#x9;for (Employee employee : employees) {&#xA;&#x9;&#x9;&#x9;resources += employee.getResourceCount();&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return resources;&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457882639630" sizeMeasure="48">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collection;&#xA;import java.util.List;&#xA;import java.util.function.BinaryOperator;&#xA;&#xA;public class Manager implements Employee{&#xA;&#xA;&#x9;private List&lt;Employee> employees = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;Manager(Collection&lt;Employee> employees) {&#xA;&#x9;&#x9;if (employees.isEmpty()) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;The manager must have at least one employee.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;this.employees.addAll(employees);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public double doCalculations(BinaryOperator&lt;Double> operation, double value1, double value2) {&#xA;&#x9;&#x9;int chosenEmployee = (int)Math.random()*employees.size();&#xA;&#x9;&#x9;return employees.get(chosenEmployee).doCalculations(operation, value1, value2);&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void printDocument(String document) {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getTaskCount() {&#xA;&#x9;&#x9;int tasks = 0;&#xA;&#x9;&#x9;for (Employee employee : employees) {&#xA;&#x9;&#x9;&#x9;tasks += employee.getTaskCount();&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return tasks;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getResourceCount() {&#xA;&#x9;&#x9;int resources = 0;&#xA;&#x9;&#x9;for (Employee employee : employees) {&#xA;&#x9;&#x9;&#x9;resources += employee.getResourceCount();&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return resources;&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457882769360" sizeMeasure="48" errorCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collection;&#xA;import java.util.List;&#xA;import java.util.function.BinaryOperator;&#xA;&#xA;public class Manager implements Employee{&#xA;&#xA;&#x9;private List&lt;Employee> employees = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;Manager(Collection&lt;Employee> employees) {&#xA;&#x9;&#x9;if (employees.isEmpty()) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;The manager must have at least one employee.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;this.employees.addAll(employees);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public double doCalculations(BinaryOperator&lt;Double> operation, double value1, double value2) {&#xA;&#x9;&#x9;int chosenEmployee = (int)Math.random()*employees.size();&#xA;&#x9;&#x9;return employees.get(chosenEmployee).doCalculations(operation, value1, value2);&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void printDocument(String document) {&#xA;&#x9;&#x9;int chosenEmployee = (int)Math.random()*employees.size();&#xA;&#x9;&#x9;return employees.get(chosenEmployee).printDocument(document);&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getTaskCount() {&#xA;&#x9;&#x9;int tasks = 0;&#xA;&#x9;&#x9;for (Employee employee : employees) {&#xA;&#x9;&#x9;&#x9;tasks += employee.getTaskCount();&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return tasks;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getResourceCount() {&#xA;&#x9;&#x9;int resources = 0;&#xA;&#x9;&#x9;for (Employee employee : employees) {&#xA;&#x9;&#x9;&#x9;resources += employee.getResourceCount();&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return resources;&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457882801504" sizeMeasure="48">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collection;&#xA;import java.util.List;&#xA;import java.util.function.BinaryOperator;&#xA;&#xA;public class Manager implements Employee{&#xA;&#xA;&#x9;private List&lt;Employee> employees = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;Manager(Collection&lt;Employee> employees) {&#xA;&#x9;&#x9;if (employees.isEmpty()) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;The manager must have at least one employee.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;this.employees.addAll(employees);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public double doCalculations(BinaryOperator&lt;Double> operation, double value1, double value2) {&#xA;&#x9;&#x9;int chosenEmployee = (int)Math.random()*employees.size();&#xA;&#x9;&#x9;return employees.get(chosenEmployee).doCalculations(operation, value1, value2);&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void printDocument(String document) {&#xA;&#x9;&#x9;int chosenEmployee = (int)Math.random()*employees.size();&#xA;&#x9;&#x9;employees.get(chosenEmployee).printDocument(document);&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getTaskCount() {&#xA;&#x9;&#x9;int tasks = 0;&#xA;&#x9;&#x9;for (Employee employee : employees) {&#xA;&#x9;&#x9;&#x9;tasks += employee.getTaskCount();&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return tasks;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getResourceCount() {&#xA;&#x9;&#x9;int resources = 0;&#xA;&#x9;&#x9;for (Employee employee : employees) {&#xA;&#x9;&#x9;&#x9;resources += employee.getResourceCount();&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return resources;&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457884360528" sizeMeasure="48">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collection;&#xA;import java.util.List;&#xA;import java.util.function.BinaryOperator;&#xA;&#xA;public class Manager implements Employee{&#xA;&#xA;&#x9;private List&lt;Employee> employees = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;Manager(Collection&lt;Employee> employees) {&#xA;&#x9;&#x9;if (employees.isEmpty()) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;The manager must have at least one employee.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;this.employees.addAll(employees);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public double doCalculations(BinaryOperator&lt;Double> operation, double value1, double value2) {&#xA;&#x9;&#x9;int chosenEmployee = (int)Math.random()*employees.size();&#xA;&#x9;&#x9;return employees.get(chosenEmployee).doCalculations(operation, value1, value2);&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void printDocument(String document) {&#xA;&#x9;&#x9;int chosenEmployee = (int)Math.random()*employees.size();&#xA;&#x9;&#x9;employees.get(chosenEmployee).printDocument(document);&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getTaskCount() {&#xA;&#x9;&#x9;int tasks = 0;&#xA;&#x9;&#x9;for (Employee employee : employees) {&#xA;&#x9;&#x9;&#x9;tasks += employee.getTaskCount();&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return tasks;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getResourceCount() {&#xA;&#x9;&#x9;int resources = 0;&#xA;&#x9;&#x9;for (Employee employee : employees) {&#xA;&#x9;&#x9;&#x9;resources += employee.getResourceCount();&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return resources + 1;&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457884731136" sizeMeasure="48" errorCount="9">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collection;&#xA;import java.util.List;&#xA;import java.util.function.BinaryOperator;&#xA;&#xA;public class Manager implements Employee{&#xA;&#xA;&#x9;private COllection&lt;Employee> employees = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;Manager(Collection&lt;Employee> employees) {&#xA;&#x9;&#x9;if (employees.isEmpty()) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;The manager must have at least one employee.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;this.employees.addAll(employees);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public double doCalculations(BinaryOperator&lt;Double> operation, double value1, double value2) {&#xA;&#x9;&#x9;int chosenEmployee = (int)Math.random()*employees.size();&#xA;&#x9;&#x9;return employees.get(chosenEmployee).doCalculations(operation, value1, value2);&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void printDocument(String document) {&#xA;&#x9;&#x9;int chosenEmployee = (int)Math.random()*employees.size();&#xA;&#x9;&#x9;employees.get(chosenEmployee).printDocument(document);&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getTaskCount() {&#xA;&#x9;&#x9;int tasks = 0;&#xA;&#x9;&#x9;for (Employee employee : employees) {&#xA;&#x9;&#x9;&#x9;tasks += employee.getTaskCount();&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return tasks;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getResourceCount() {&#xA;&#x9;&#x9;int resources = 0;&#xA;&#x9;&#x9;for (Employee employee : employees) {&#xA;&#x9;&#x9;&#x9;resources += employee.getResourceCount();&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return resources + 1;&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457884743780" sizeMeasure="48" errorCount="2">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collection;&#xA;import java.util.List;&#xA;import java.util.function.BinaryOperator;&#xA;&#xA;public class Manager implements Employee{&#xA;&#xA;&#x9;private Collection&lt;Employee> employees = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;Manager(Collection&lt;Employee> employees) {&#xA;&#x9;&#x9;if (employees.isEmpty()) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;The manager must have at least one employee.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;this.employees.addAll(employees);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public double doCalculations(BinaryOperator&lt;Double> operation, double value1, double value2) {&#xA;&#x9;&#x9;int chosenEmployee = (int)Math.random()*employees.size();&#xA;&#x9;&#x9;return employees.get(chosenEmployee).doCalculations(operation, value1, value2);&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void printDocument(String document) {&#xA;&#x9;&#x9;int chosenEmployee = (int)Math.random()*employees.size();&#xA;&#x9;&#x9;employees.get(chosenEmployee).printDocument(document);&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getTaskCount() {&#xA;&#x9;&#x9;int tasks = 0;&#xA;&#x9;&#x9;for (Employee employee : employees) {&#xA;&#x9;&#x9;&#x9;tasks += employee.getTaskCount();&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return tasks;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getResourceCount() {&#xA;&#x9;&#x9;int resources = 0;&#xA;&#x9;&#x9;for (Employee employee : employees) {&#xA;&#x9;&#x9;&#x9;resources += employee.getResourceCount();&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return resources + 1;&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457884757262" sizeMeasure="48">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collection;&#xA;import java.util.List;&#xA;import java.util.function.BinaryOperator;&#xA;&#xA;public class Manager implements Employee{&#xA;&#xA;&#x9;private List&lt;Employee> employees = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;Manager(Collection&lt;Employee> employees) {&#xA;&#x9;&#x9;if (employees.isEmpty()) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;The manager must have at least one employee.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;this.employees.addAll(employees);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public double doCalculations(BinaryOperator&lt;Double> operation, double value1, double value2) {&#xA;&#x9;&#x9;int chosenEmployee = (int)Math.random()*employees.size();&#xA;&#x9;&#x9;return employees.get(chosenEmployee).doCalculations(operation, value1, value2);&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void printDocument(String document) {&#xA;&#x9;&#x9;int chosenEmployee = (int)Math.random()*employees.size();&#xA;&#x9;&#x9;employees.get(chosenEmployee).printDocument(document);&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getTaskCount() {&#xA;&#x9;&#x9;int tasks = 0;&#xA;&#x9;&#x9;for (Employee employee : employees) {&#xA;&#x9;&#x9;&#x9;tasks += employee.getTaskCount();&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return tasks;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getResourceCount() {&#xA;&#x9;&#x9;int resources = 0;&#xA;&#x9;&#x9;for (Employee employee : employees) {&#xA;&#x9;&#x9;&#x9;resources += employee.getResourceCount();&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return resources + 1;&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457955780389" sizeMeasure="48">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collection;&#xA;import java.util.List;&#xA;import java.util.function.BinaryOperator;&#xA;&#xA;public class Manager implements Employee{&#xA;&#xA;&#x9;private List&lt;Employee> employees = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;Manager(Collection&lt;Employee> employees) {&#xA;&#x9;&#x9;if (employees.isEmpty()) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;The manager must have at least one employee.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;this.employees.addAll(employees);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public double doCalculations(BinaryOperator&lt;Double> operation, double value1, double value2) {&#xA;&#x9;&#x9;int chosenEmployee = (int)Math.random()*employees.size();&#xA;&#x9;&#x9;return employees.get(chosenEmployee).doCalculations(operation, value1, value2);&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void printDocument(String document) {&#xA;&#x9;&#x9;int chosenEmployee = (int)Math.random()*employees.size();&#xA;&#x9;&#x9;employees.get(chosenEmployee).printDocument(document);&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getTaskCount() {&#xA;&#x9;&#x9;int tasks = 0;&#xA;&#x9;&#x9;for (Employee employee : employees) {&#xA;&#x9;&#x9;&#x9;tasks += employee.getTaskCount();&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return tasks;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getResourceCount() {&#xA;&#x9;&#x9;int resources = 0;&#xA;&#x9;&#x9;for (Employee employee : employees) {&#xA;&#x9;&#x9;&#x9;resources += employee.getResourceCount();&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return resources + 1;&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457959446866" sizeMeasure="49">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collection;&#xA;import java.util.List;&#xA;import java.util.function.BinaryOperator;&#xA;&#xA;public class Manager implements Employee{&#xA;&#xA;&#x9;private List&lt;Employee> employees = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;Manager(Collection&lt;Employee> employees) {&#xA;&#x9;&#x9;if (employees.isEmpty()) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;The manager must have at least one employee.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;this.employees.addAll(employees);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public double doCalculations(BinaryOperator&lt;Double> operation, double value1, double value2) {&#xA;&#x9;&#x9;//Gives the task to a random employee&#xA;&#x9;&#x9;int chosenEmployee = (int)Math.random()*employees.size();&#xA;&#x9;&#x9;return employees.get(chosenEmployee).doCalculations(operation, value1, value2);&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void printDocument(String document) {&#xA;&#x9;&#x9;int chosenEmployee = (int)Math.random()*employees.size();&#xA;&#x9;&#x9;employees.get(chosenEmployee).printDocument(document);&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getTaskCount() {&#xA;&#x9;&#x9;int tasks = 0;&#xA;&#x9;&#x9;for (Employee employee : employees) {&#xA;&#x9;&#x9;&#x9;tasks += employee.getTaskCount();&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return tasks;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getResourceCount() {&#xA;&#x9;&#x9;int resources = 0;&#xA;&#x9;&#x9;for (Employee employee : employees) {&#xA;&#x9;&#x9;&#x9;resources += employee.getResourceCount();&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return resources + 1;&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457959452551" sizeMeasure="50">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collection;&#xA;import java.util.List;&#xA;import java.util.function.BinaryOperator;&#xA;&#xA;public class Manager implements Employee{&#xA;&#xA;&#x9;private List&lt;Employee> employees = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;Manager(Collection&lt;Employee> employees) {&#xA;&#x9;&#x9;if (employees.isEmpty()) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;The manager must have at least one employee.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;this.employees.addAll(employees);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public double doCalculations(BinaryOperator&lt;Double> operation, double value1, double value2) {&#xA;&#x9;&#x9;//Gives the task to a random employee&#xA;&#x9;&#x9;int chosenEmployee = (int)Math.random()*employees.size();&#xA;&#x9;&#x9;return employees.get(chosenEmployee).doCalculations(operation, value1, value2);&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void printDocument(String document) {&#xA;&#x9;&#x9;//Gives the task to a random employee&#xA;&#x9;&#x9;int chosenEmployee = (int)Math.random()*employees.size();&#xA;&#x9;&#x9;employees.get(chosenEmployee).printDocument(document);&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getTaskCount() {&#xA;&#x9;&#x9;int tasks = 0;&#xA;&#x9;&#x9;for (Employee employee : employees) {&#xA;&#x9;&#x9;&#x9;tasks += employee.getTaskCount();&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return tasks;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getResourceCount() {&#xA;&#x9;&#x9;int resources = 0;&#xA;&#x9;&#x9;for (Employee employee : employees) {&#xA;&#x9;&#x9;&#x9;resources += employee.getResourceCount();&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return resources + 1;&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457959590350" sizeMeasure="51">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collection;&#xA;import java.util.List;&#xA;import java.util.function.BinaryOperator;&#xA;&#xA;public class Manager implements Employee{&#xA;&#xA;&#x9;private List&lt;Employee> employees = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;Manager(Collection&lt;Employee> employees) {&#xA;&#x9;&#x9;if (employees.isEmpty()) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;The manager must have at &quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;+ &quot;least one employee.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;this.employees.addAll(employees);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public double doCalculations(BinaryOperator&lt;Double> operation, double value1, double value2) {&#xA;&#x9;&#x9;//Gives the task to a random employee&#xA;&#x9;&#x9;int chosenEmployee = (int)Math.random()*employees.size();&#xA;&#x9;&#x9;return employees.get(chosenEmployee).doCalculations(operation, value1, value2);&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void printDocument(String document) {&#xA;&#x9;&#x9;//Gives the task to a random employee&#xA;&#x9;&#x9;int chosenEmployee = (int)Math.random()*employees.size();&#xA;&#x9;&#x9;employees.get(chosenEmployee).printDocument(document);&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getTaskCount() {&#xA;&#x9;&#x9;int tasks = 0;&#xA;&#x9;&#x9;for (Employee employee : employees) {&#xA;&#x9;&#x9;&#x9;tasks += employee.getTaskCount();&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return tasks;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getResourceCount() {&#xA;&#x9;&#x9;int resources = 0;&#xA;&#x9;&#x9;for (Employee employee : employees) {&#xA;&#x9;&#x9;&#x9;resources += employee.getResourceCount();&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return resources + 1;&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457959593130" sizeMeasure="52">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collection;&#xA;import java.util.List;&#xA;import java.util.function.BinaryOperator;&#xA;&#xA;public class Manager implements Employee{&#xA;&#xA;&#x9;private List&lt;Employee> employees = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;Manager(Collection&lt;Employee> employees) {&#xA;&#x9;&#x9;if (employees.isEmpty()) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;The manager must have at &quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;+ &quot;least one employee.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;this.employees.addAll(employees);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public double doCalculations(BinaryOperator&lt;Double> operation, &#xA;&#x9;&#x9;&#x9;double value1, double value2) {&#xA;&#x9;&#x9;//Gives the task to a random employee&#xA;&#x9;&#x9;int chosenEmployee = (int)Math.random()*employees.size();&#xA;&#x9;&#x9;return employees.get(chosenEmployee).doCalculations(operation, value1, value2);&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void printDocument(String document) {&#xA;&#x9;&#x9;//Gives the task to a random employee&#xA;&#x9;&#x9;int chosenEmployee = (int)Math.random()*employees.size();&#xA;&#x9;&#x9;employees.get(chosenEmployee).printDocument(document);&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getTaskCount() {&#xA;&#x9;&#x9;int tasks = 0;&#xA;&#x9;&#x9;for (Employee employee : employees) {&#xA;&#x9;&#x9;&#x9;tasks += employee.getTaskCount();&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return tasks;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getResourceCount() {&#xA;&#x9;&#x9;int resources = 0;&#xA;&#x9;&#x9;for (Employee employee : employees) {&#xA;&#x9;&#x9;&#x9;resources += employee.getResourceCount();&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return resources + 1;&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
      </proposals>
      <proposals xsi:type="junit:JunitTestProposal" question="/0/@parts.0/@tasks.6/@q" answer="/0/@parts.0/@tasks.6/@a" completion="1.0">
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457882813833" completion="1.0" successCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457882815072" completion="0.0" failureCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457882816285" completion="0.0" failureCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457882817171" completion="1.0" successCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457882818013" completion="1.0" successCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457882821047" completion="1.0" successCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457882823666" completion="0.0" failureCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457884361926" completion="1.0" successCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457884362795" completion="1.0" successCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457884374189" completion="1.0" successCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457884379310" completion="1.0" successCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457884380102" completion="1.0" successCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457884380833" completion="1.0" successCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457884381633" completion="1.0" successCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457884382734" completion="1.0" successCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457884385149" completion="1.0" successCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457884387954" completion="1.0" successCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457884737286" completion="0.0" errorCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457884747001" completion="1.0" successCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457884748572" completion="1.0" successCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457884749535" completion="1.0" successCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457884750404" completion="0.0" errorCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457884751790" completion="0.0" errorCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457884753592" completion="0.0" errorCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457884770221" completion="1.0" successCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457884770785" completion="1.0" successCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457884773459" completion="1.0" successCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457892812414" completion="1.0" successCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457892813096" completion="1.0" successCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457892813892" completion="1.0" successCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457892815267" completion="1.0" successCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457892815891" completion="1.0" successCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457892818138" completion="1.0" successCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457892820464" completion="1.0" successCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457958977235" completion="1.0" successCount="7"/>
      </proposals>
    </proposals>
    <proposals exercisePart="/0/@parts.1">
      <proposals xsi:type="workbench:DebugEventProposal" question="/0/@parts.1/@tasks.0/@q" answer="/0/@parts.1/@tasks.0/@a" performedCount="8">
        <attempts timestamp="1457900431409"/>
        <attempts timestamp="1457900517390"/>
        <attempts timestamp="1457903090376"/>
        <attempts timestamp="1457903149007"/>
        <attempts timestamp="1457903447793"/>
        <attempts timestamp="1457903526999"/>
        <attempts timestamp="1457904128125"/>
        <attempts timestamp="1457904139796"/>
      </proposals>
      <proposals xsi:type="workbench:CommandExecutionProposal" question="/0/@parts.1/@tasks.1/@q" answer="/0/@parts.1/@tasks.1/@a"/>
      <proposals xsi:type="workbench:CommandExecutionProposal" question="/0/@parts.1/@tasks.2/@q" answer="/0/@parts.1/@tasks.2/@a" performedCount="42">
        <attempts timestamp="1457900436029"/>
        <attempts timestamp="1457900438655"/>
        <attempts timestamp="1457900441126"/>
        <attempts timestamp="1457900442461"/>
        <attempts timestamp="1457900443754"/>
        <attempts timestamp="1457900445955"/>
        <attempts timestamp="1457900448016"/>
        <attempts timestamp="1457900477438"/>
        <attempts timestamp="1457900509777"/>
        <attempts timestamp="1457900511552"/>
        <attempts timestamp="1457900517386"/>
        <attempts timestamp="1457903093226"/>
        <attempts timestamp="1457903093855"/>
        <attempts timestamp="1457903096004"/>
        <attempts timestamp="1457903096439"/>
        <attempts timestamp="1457903096940"/>
        <attempts timestamp="1457903097467"/>
        <attempts timestamp="1457903098926"/>
        <attempts timestamp="1457903118843"/>
        <attempts timestamp="1457903135372"/>
        <attempts timestamp="1457903146072"/>
        <attempts timestamp="1457903149007"/>
        <attempts timestamp="1457903449897"/>
        <attempts timestamp="1457903450182"/>
        <attempts timestamp="1457903450453"/>
        <attempts timestamp="1457903450666"/>
        <attempts timestamp="1457903450902"/>
        <attempts timestamp="1457903451260"/>
        <attempts timestamp="1457903452137"/>
        <attempts timestamp="1457903453208"/>
        <attempts timestamp="1457903456367"/>
        <attempts timestamp="1457903460273"/>
        <attempts timestamp="1457903470373"/>
        <attempts timestamp="1457903470868"/>
        <attempts timestamp="1457903474863"/>
        <attempts timestamp="1457903480290"/>
        <attempts timestamp="1457903481969"/>
        <attempts timestamp="1457903523739"/>
        <attempts timestamp="1457903526983"/>
        <attempts timestamp="1457904131100"/>
        <attempts timestamp="1457904131563"/>
        <attempts timestamp="1457904154382"/>
      </proposals>
      <proposals xsi:type="workbench:PartTaskProposal" question="/0/@parts.1/@tasks.3/@q" answer="/0/@parts.1/@tasks.3/@a" performedCount="4">
        <attempts timestamp="1457900448790"/>
        <attempts timestamp="1457903099986"/>
        <attempts timestamp="1457903485347"/>
        <attempts timestamp="1457904142477"/>
      </proposals>
      <proposals xsi:type="jdt:JdtLaunchProposal" question="/0/@parts.1/@tasks.4/@q" answer="/0/@parts.1/@tasks.4/@a">
        <attempts xsi:type="jdt:JdtLaunchEvent" timestamp="1457822088841" mode="run"/>
        <attempts xsi:type="jdt:JdtLaunchEvent" timestamp="1457822167060" mode="run"/>
        <attempts xsi:type="jdt:JdtLaunchEvent" timestamp="1457822209504" mode="run"/>
        <attempts xsi:type="jdt:JdtLaunchEvent" timestamp="1457822231901" mode="run"/>
        <attempts xsi:type="jdt:JdtLaunchEvent" timestamp="1457822310758" mode="run"/>
        <attempts xsi:type="jdt:JdtLaunchEvent" timestamp="1457823263393" mode="run"/>
        <attempts xsi:type="jdt:JdtLaunchEvent" timestamp="1457823335874" mode="run"/>
        <attempts xsi:type="jdt:JdtLaunchEvent" timestamp="1457823381559" mode="run"/>
        <attempts xsi:type="jdt:JdtLaunchEvent" timestamp="1457823387603" mode="run"/>
        <attempts xsi:type="jdt:JdtLaunchEvent" timestamp="1457823397181" mode="run"/>
        <attempts xsi:type="jdt:JdtLaunchEvent" timestamp="1457887326928" mode="run"/>
        <attempts xsi:type="jdt:JdtLaunchEvent" timestamp="1457892285329" mode="run"/>
        <attempts xsi:type="jdt:JdtLaunchEvent" timestamp="1457892331492" mode="run"/>
        <attempts xsi:type="jdt:JdtLaunchEvent" timestamp="1457892476768" mode="run"/>
        <attempts xsi:type="jdt:JdtLaunchEvent" timestamp="1457892520983" mode="run"/>
        <attempts xsi:type="jdt:JdtLaunchEvent" timestamp="1457892636044" mode="run"/>
        <attempts xsi:type="jdt:JdtLaunchEvent" timestamp="1457892767901" mode="run"/>
        <attempts xsi:type="jdt:JdtLaunchEvent" timestamp="1457898993239" mode="run"/>
        <attempts xsi:type="jdt:JdtLaunchEvent" timestamp="1457899004071" mode="run"/>
      </proposals>
      <proposals xsi:type="jdt:JdtLaunchProposal" question="/0/@parts.1/@tasks.5/@q" answer="/0/@parts.1/@tasks.5/@a"/>
      <proposals xsi:type="jdt:JdtLaunchProposal" question="/0/@parts.1/@tasks.6/@q" answer="/0/@parts.1/@tasks.6/@a"/>
    </proposals>
  </exercise:ExerciseProposals>
</xmi:XMI>
