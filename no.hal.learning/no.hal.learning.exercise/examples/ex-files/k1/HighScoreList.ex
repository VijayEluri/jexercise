<?xml version="1.0" encoding="UTF-8"?>
<xmi:XMI xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:exercise="platform:/plugin/no.hal.learning.exercise.model/model/exercise.ecore" xmlns:jdt="platform:/plugin/no.hal.learning.exercise.jdt/model/jdt-exercise.ecore" xmlns:junit="platform:/plugin/no.hal.learning.exercise.junit/model/junit-exercise.ecore" xmlns:workbench="platform:/plugin/no.hal.learning.exercise.workbench/model/workbench-exercise.ecore">
  <exercise:Exercise>
    <parts xsi:type="exercise:ExercisePart" title="Highscore List">
      <tasks xsi:type="exercise:Task">
        <q xsi:type="exercise:StringQuestion" question="Write source code for the HighscoreListListener interface."/>
        <a xsi:type="jdt:JdtSourceEditAnswer" className="patterns.observable.HighscoreListListener"/>
      </tasks>
    </parts>
    <parts xsi:type="exercise:ExercisePart" title="HighScoreList">
      <tasks xsi:type="exercise:Task">
        <q xsi:type="exercise:StringQuestion" question="Write source code for the HighScoreList class."/>
        <a xsi:type="jdt:JdtSourceEditAnswer" className="patterns.observable.HighscoreList"/>
      </tasks>
      <tasks xsi:type="exercise:Task">
        <q xsi:type="exercise:StringQuestion" question="Run the HighScoreList JUnit test."/>
        <a xsi:type="junit:JunitTestAnswer" testRunName="patterns.observable.HighscoreListTest"/>
      </tasks>
    </parts>
    <parts xsi:type="exercise:ExercisePart" title="Observable Highscore List">
      <tasks xsi:type="exercise:Task">
        <q xsi:type="exercise:StringQuestion" question="Write source code for the ObservableList class."/>
        <a xsi:type="jdt:JdtSourceEditAnswer" className="patterns.observable.ObservableList"/>
      </tasks>
      <tasks xsi:type="exercise:Task">
        <q xsi:type="exercise:StringQuestion" question="Run the ObservableList JUnit test."/>
        <a xsi:type="junit:JunitTestAnswer" testRunName="patterns.observable.ObservableListTest"/>
      </tasks>
      <tasks xsi:type="exercise:Task">
        <q xsi:type="exercise:StringQuestion" question="Write source code for the ObservableHighscorelist class."/>
        <a xsi:type="jdt:JdtSourceEditAnswer" className="patterns.observable.ObservableHighscoreList"/>
      </tasks>
      <tasks xsi:type="exercise:Task">
        <q xsi:type="exercise:StringQuestion" question="Run the ObservableHighscoreList JUnit test."/>
        <a xsi:type="junit:JunitTestAnswer" testRunName="patterns.observable.ObservableHighscoreListTest"/>
      </tasks>
    </parts>
    <parts xsi:type="exercise:ExercisePart" title="Tool usage">
      <tasks xsi:type="exercise:Task">
        <q xsi:type="exercise:StringQuestion" question="Use breakpoints to debug code."/>
        <a xsi:type="workbench:DebugEventAnswer" action="suspend.breakpoint"/>
      </tasks>
      <tasks xsi:type="exercise:Task">
        <q xsi:type="exercise:StringQuestion" question="Use the debug command Step Over"/>
        <a xsi:type="workbench:CommandExecutionAnswer" elementId="org.eclipse.debug.ui.commands.StepOver" action="executeSuccess"/>
      </tasks>
      <tasks xsi:type="exercise:Task">
        <q xsi:type="exercise:StringQuestion" question="Use the debug command Step Into"/>
        <a xsi:type="workbench:CommandExecutionAnswer" elementId="org.eclipse.debug.ui.commands.StepInto" action="executeSuccess"/>
      </tasks>
      <tasks xsi:type="exercise:Task">
        <q xsi:type="exercise:StringQuestion" question="Use the Variables view"/>
        <a xsi:type="workbench:PartTaskAnswer" elementId="org.eclipse.debug.ui.VariableView" action="activated"/>
      </tasks>
      <tasks xsi:type="exercise:Task">
        <q xsi:type="exercise:StringQuestion" question="Run the HighscoreList class."/>
        <a xsi:type="jdt:JdtLaunchAnswer" className="patterns.observable.HighscoreList"/>
      </tasks>
    </parts>
  </exercise:Exercise>
  <exercise:ExerciseProposals exercise="/0">
    <proposals exercisePart="/0/@parts.0">
      <proposals xsi:type="jdt:JdtSourceEditProposal" question="/0/@parts.0/@tasks.0/@q" answer="/0/@parts.0/@tasks.0/@a">
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457897328086" sizeMeasure="5">
          <edit xsi:type="exercise:StringEdit" storedString="package patterns.observable;&#xA;&#xA;public interface HighscoreListListener {&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457897341699" sizeMeasure="7" errorCount="3">
          <edit xsi:type="exercise:StringEdit" storedString="package patterns.observable;&#xA;&#xA;public interface HighscoreListListener {&#xA;&#x9;&#xA;&#x9;listChanged(HighscoreList, int);&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457897377788" sizeMeasure="7" errorCount="2">
          <edit xsi:type="exercise:StringEdit" storedString="package patterns.observable;&#xA;&#xA;public interface HighscoreListListener {&#xA;&#x9;&#xA;&#x9;void listChanged(HighscoreList, int);&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457897412578" sizeMeasure="7">
          <edit xsi:type="exercise:StringEdit" storedString="package patterns.observable;&#xA;&#xA;public interface HighscoreListListener {&#xA;&#x9;&#xA;&#x9;void listChanged(HighscoreList list, int position);&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457955787678" sizeMeasure="7">
          <edit xsi:type="exercise:StringEdit" storedString="package patterns.observable;&#xA;&#xA;public interface HighscoreListListener {&#xA;&#x9;&#xA;&#x9;void listChanged(HighscoreList list, int position);&#xA;&#xA;}&#xA;"/>
        </attempts>
      </proposals>
    </proposals>
    <proposals exercisePart="/0/@parts.1">
      <proposals xsi:type="jdt:JdtSourceEditProposal" question="/0/@parts.1/@tasks.0/@q" answer="/0/@parts.1/@tasks.0/@a">
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457897438390" sizeMeasure="9">
          <edit xsi:type="exercise:StringEdit" storedString="package patterns.observable;&#xA;&#xA;public class HighscoreList {&#xA;&#x9;&#xA;&#x9;HighscoreList(int maxSize) {&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457897451806" sizeMeasure="11">
          <edit xsi:type="exercise:StringEdit" storedString="package patterns.observable;&#xA;&#xA;public class HighscoreList {&#xA;&#x9;&#xA;&#x9;private &#xA;&#x9;&#xA;&#x9;HighscoreList(int maxSize) {&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457897474598" sizeMeasure="11" warningCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package patterns.observable;&#xA;&#xA;public class HighscoreList {&#xA;&#x9;&#xA;&#x9;private int maxSize;&#xA;&#x9;&#xA;&#x9;HighscoreList(int maxSize) {&#xA;&#x9;&#x9;this.maxSize = maxSize;&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457897520019" sizeMeasure="15" errorCount="1" warningCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package patterns.observable;&#xA;&#xA;public class HighscoreList {&#xA;&#x9;&#xA;&#x9;private int maxSize;&#xA;&#x9;&#xA;&#x9;HighscoreList(int maxSize) {&#xA;&#x9;&#x9;this.maxSize = maxSize;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addHighScoreListListener (HighscoreListListner listener) {&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457897554096" sizeMeasure="15" warningCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package patterns.observable;&#xA;&#xA;public class HighscoreList {&#xA;&#x9;&#xA;&#x9;private int maxSize;&#xA;&#x9;&#xA;&#x9;HighscoreList(int maxSize) {&#xA;&#x9;&#x9;this.maxSize = maxSize;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addHighScoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457897586408" sizeMeasure="18" errorCount="1" warningCount="3">
          <edit xsi:type="exercise:StringEdit" storedString="package patterns.observable;&#xA;&#xA;import java.util.List;&#xA;&#xA;public class HighscoreList {&#xA;&#x9;&#xA;&#x9;private int maxSize;&#xA;&#x9;private List&lt;HighscoreListListener>&#xA;&#x9;&#xA;&#x9;HighscoreList(int maxSize) {&#xA;&#x9;&#x9;this.maxSize = maxSize;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addHighScoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457897607161" sizeMeasure="18" errorCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package patterns.observable;&#xA;&#xA;import java.util.List;&#xA;&#xA;public class HighscoreList {&#xA;&#x9;&#xA;&#x9;private int maxSize;&#xA;&#x9;private List&lt;HighscoreListListener> listeners = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;HighscoreList(int maxSize) {&#xA;&#x9;&#x9;this.maxSize = maxSize;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addHighScoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457897612946" sizeMeasure="19" warningCount="2">
          <edit xsi:type="exercise:StringEdit" storedString="package patterns.observable;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.List;&#xA;&#xA;public class HighscoreList {&#xA;&#x9;&#xA;&#x9;private int maxSize;&#xA;&#x9;private List&lt;HighscoreListListener> listeners = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;HighscoreList(int maxSize) {&#xA;&#x9;&#x9;this.maxSize = maxSize;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addHighScoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457897629816" sizeMeasure="19" warningCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package patterns.observable;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.List;&#xA;&#xA;public class HighscoreList {&#xA;&#x9;&#xA;&#x9;private int maxSize;&#xA;&#x9;private List&lt;HighscoreListListener> listeners = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;HighscoreList(int maxSize) {&#xA;&#x9;&#x9;this.maxSize = maxSize;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addHighScoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;this.listeners.add(listener);&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457897660421" sizeMeasure="21" warningCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package patterns.observable;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.List;&#xA;&#xA;public class HighscoreList {&#xA;&#x9;&#xA;&#x9;private int maxSize;&#xA;&#x9;private List&lt;HighscoreListListener> listeners = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;HighscoreList(int maxSize) {&#xA;&#x9;&#x9;this.maxSize = maxSize;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addHighScoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (!listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.add(listener);&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457897723874" sizeMeasure="25" warningCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package patterns.observable;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.List;&#xA;&#xA;public class HighscoreList {&#xA;&#x9;&#xA;&#x9;private int maxSize;&#xA;&#x9;private List&lt;HighscoreListListener> listeners = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;HighscoreList(int maxSize) {&#xA;&#x9;&#x9;this.maxSize = maxSize;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addHighScoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (!listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.add(listener);&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void removeHighScoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457897737684" sizeMeasure="27" warningCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package patterns.observable;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.List;&#xA;&#xA;public class HighscoreList {&#xA;&#x9;&#xA;&#x9;private int maxSize;&#xA;&#x9;private List&lt;HighscoreListListener> listeners = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;HighscoreList(int maxSize) {&#xA;&#x9;&#x9;this.maxSize = maxSize;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addHighScoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (!listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.add(listener);&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void removeHighScoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457897754627" sizeMeasure="27" warningCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package patterns.observable;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.List;&#xA;&#xA;public class HighscoreList {&#xA;&#x9;&#xA;&#x9;private int maxSize;&#xA;&#x9;private List&lt;HighscoreListListener> listeners = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;HighscoreList(int maxSize) {&#xA;&#x9;&#x9;this.maxSize = maxSize;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addHighScoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (!listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.add(listener);&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void removeHighScoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.remove(listener);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457897760701" sizeMeasure="29" warningCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package patterns.observable;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.List;&#xA;&#xA;public class HighscoreList {&#xA;&#x9;&#xA;&#x9;private int maxSize;&#xA;&#x9;private List&lt;HighscoreListListener> listeners = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;HighscoreList(int maxSize) {&#xA;&#x9;&#x9;this.maxSize = maxSize;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addHighScoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (!listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.add(listener);&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void removeHighScoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.remove(listener);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457897787647" sizeMeasure="31" errorCount="1" warningCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package patterns.observable;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.List;&#xA;&#xA;public class HighscoreList {&#xA;&#x9;&#xA;&#x9;private int maxSize;&#xA;&#x9;private List&lt;HighscoreListListener> listeners = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;HighscoreList(int maxSize) {&#xA;&#x9;&#x9;this.maxSize = maxSize;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addHighScoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (!listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.add(listener);&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void removeHighScoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.remove(listener);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int size() {&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457897795517" sizeMeasure="31" warningCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package patterns.observable;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.List;&#xA;&#xA;public class HighscoreList {&#xA;&#x9;&#xA;&#x9;private int maxSize;&#xA;&#x9;private List&lt;HighscoreListListener> listeners = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;HighscoreList(int maxSize) {&#xA;&#x9;&#x9;this.maxSize = maxSize;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addHighScoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (!listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.add(listener);&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void removeHighScoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.remove(listener);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int size() {&#xA;&#x9;&#x9;return listeners.size();&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457897810302" sizeMeasure="35" errorCount="1" warningCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package patterns.observable;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.List;&#xA;&#xA;public class HighscoreList {&#xA;&#x9;&#xA;&#x9;private int maxSize;&#xA;&#x9;private List&lt;HighscoreListListener> listeners = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;HighscoreList(int maxSize) {&#xA;&#x9;&#x9;this.maxSize = maxSize;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addHighScoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (!listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.add(listener);&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void removeHighScoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.remove(listener);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int size() {&#xA;&#x9;&#x9;return listeners.size();&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int getElement(int element) {&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457897828593" sizeMeasure="35" errorCount="1" warningCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package patterns.observable;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.List;&#xA;&#xA;public class HighscoreList {&#xA;&#x9;&#xA;&#x9;private int maxSize;&#xA;&#x9;private List&lt;HighscoreListListener> listeners = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;HighscoreList(int maxSize) {&#xA;&#x9;&#x9;this.maxSize = maxSize;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addHighScoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (!listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.add(listener);&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void removeHighScoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.remove(listener);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int size() {&#xA;&#x9;&#x9;return listeners.size();&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int getElement(int element) {&#xA;&#x9;&#x9;return listeners.get(element);&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457897912184" sizeMeasure="36" errorCount="2">
          <edit xsi:type="exercise:StringEdit" storedString="package patterns.observable;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.List;&#xA;&#xA;public class HighscoreList {&#xA;&#x9;&#xA;&#x9;private int maxSize;&#xA;&#x9;private List&lt;HighscoreListListener> listeners = new ArrayList&lt;>();&#xA;&#x9;private List&lt;int> highscoreList = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;HighscoreList(int maxSize) {&#xA;&#x9;&#x9;this.maxSize = maxSize;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addHighScoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (!listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.add(listener);&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void removeHighScoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.remove(listener);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int size() {&#xA;&#x9;&#x9;return listeners.size();&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int getElement(int element) {&#xA;&#x9;&#x9;return listeners.get(element);&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457897925909" sizeMeasure="36" errorCount="1" warningCount="2">
          <edit xsi:type="exercise:StringEdit" storedString="package patterns.observable;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.List;&#xA;&#xA;public class HighscoreList {&#xA;&#x9;&#xA;&#x9;private int maxSize;&#xA;&#x9;private List&lt;HighscoreListListener> listeners = new ArrayList&lt;>();&#xA;&#x9;private List&lt;Integer> highscoreList = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;HighscoreList(int maxSize) {&#xA;&#x9;&#x9;this.maxSize = maxSize;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addHighScoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (!listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.add(listener);&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void removeHighScoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.remove(listener);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int size() {&#xA;&#x9;&#x9;return listeners.size();&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int getElement(int element) {&#xA;&#x9;&#x9;return listeners.get(element);&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457897941311" sizeMeasure="36" warningCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package patterns.observable;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.List;&#xA;&#xA;public class HighscoreList {&#xA;&#x9;&#xA;&#x9;private int maxSize;&#xA;&#x9;private List&lt;HighscoreListListener> listeners = new ArrayList&lt;>();&#xA;&#x9;private List&lt;Integer> highscoreList = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;HighscoreList(int maxSize) {&#xA;&#x9;&#x9;this.maxSize = maxSize;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addHighScoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (!listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.add(listener);&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void removeHighScoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.remove(listener);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int size() {&#xA;&#x9;&#x9;return highscoreList.size();&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int getElement(int element) {&#xA;&#x9;&#x9;return highscoreList.get(element);&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457897964364" sizeMeasure="40" warningCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package patterns.observable;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.List;&#xA;&#xA;public class HighscoreList {&#xA;&#x9;&#xA;&#x9;private int maxSize;&#xA;&#x9;private List&lt;HighscoreListListener> listeners = new ArrayList&lt;>();&#xA;&#x9;private List&lt;Integer> highscoreList = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;HighscoreList(int maxSize) {&#xA;&#x9;&#x9;this.maxSize = maxSize;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addHighScoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (!listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.add(listener);&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void removeHighScoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.remove(listener);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int size() {&#xA;&#x9;&#x9;return highscoreList.size();&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int getElement(int element) {&#xA;&#x9;&#x9;return highscoreList.get(element);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addResult(int result) {&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457898057215" sizeMeasure="40" errorCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package patterns.observable;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.List;&#xA;&#xA;public class HighscoreList {&#xA;&#x9;&#xA;&#x9;private int maxSize;&#xA;&#x9;private List&lt;HighscoreListListener> listeners = new ArrayList&lt;>();&#xA;&#x9;private List&lt;Integer> highscoreList = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;HighscoreList(int maxSize) {&#xA;&#x9;&#x9;this.maxSize = maxSize;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addHighScoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (!listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.add(listener);&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void removeHighScoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.remove(listener);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int size() {&#xA;&#x9;&#x9;return highscoreList.size();&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int getElement(int element) {&#xA;&#x9;&#x9;return highscoreList.get(element);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addResult(int result) {&#xA;&#x9;&#x9;if (result &lt; highscoreList.get(highscoreList.size()-1))&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457898065374" sizeMeasure="42" warningCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package patterns.observable;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.List;&#xA;&#xA;public class HighscoreList {&#xA;&#x9;&#xA;&#x9;private int maxSize;&#xA;&#x9;private List&lt;HighscoreListListener> listeners = new ArrayList&lt;>();&#xA;&#x9;private List&lt;Integer> highscoreList = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;HighscoreList(int maxSize) {&#xA;&#x9;&#x9;this.maxSize = maxSize;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addHighScoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (!listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.add(listener);&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void removeHighScoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.remove(listener);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int size() {&#xA;&#x9;&#x9;return highscoreList.size();&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int getElement(int element) {&#xA;&#x9;&#x9;return highscoreList.get(element);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addResult(int result) {&#xA;&#x9;&#x9;if (result &lt; highscoreList.get(highscoreList.size()-1)) {&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457898083608" sizeMeasure="42" warningCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package patterns.observable;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.List;&#xA;&#xA;public class HighscoreList {&#xA;&#x9;&#xA;&#x9;private int maxSize;&#xA;&#x9;private List&lt;HighscoreListListener> listeners = new ArrayList&lt;>();&#xA;&#x9;private List&lt;Integer> highscoreList = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;HighscoreList(int maxSize) {&#xA;&#x9;&#x9;this.maxSize = maxSize;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addHighScoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (!listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.add(listener);&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void removeHighScoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.remove(listener);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int size() {&#xA;&#x9;&#x9;return highscoreList.size();&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int getElement(int element) {&#xA;&#x9;&#x9;return highscoreList.get(element);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addResult(int result) {&#xA;&#x9;&#x9;if (result >= highscoreList.get(highscoreList.size()-1)) {&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457898094699" sizeMeasure="43" warningCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package patterns.observable;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.List;&#xA;&#xA;public class HighscoreList {&#xA;&#x9;&#xA;&#x9;private int maxSize;&#xA;&#x9;private List&lt;HighscoreListListener> listeners = new ArrayList&lt;>();&#xA;&#x9;private List&lt;Integer> highscoreList = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;HighscoreList(int maxSize) {&#xA;&#x9;&#x9;this.maxSize = maxSize;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addHighScoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (!listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.add(listener);&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void removeHighScoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.remove(listener);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int size() {&#xA;&#x9;&#x9;return highscoreList.size();&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int getElement(int element) {&#xA;&#x9;&#x9;return highscoreList.get(element);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addResult(int result) {&#xA;&#x9;&#x9;if (result >= highscoreList.get(highscoreList.size()-1)) {&#xA;&#x9;&#x9;&#x9;return;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457898117291" sizeMeasure="43" errorCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package patterns.observable;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.List;&#xA;&#xA;public class HighscoreList {&#xA;&#x9;&#xA;&#x9;private int maxSize;&#xA;&#x9;private List&lt;HighscoreListListener> listeners = new ArrayList&lt;>();&#xA;&#x9;private List&lt;Integer> highscoreList = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;HighscoreList(int maxSize) {&#xA;&#x9;&#x9;this.maxSize = maxSize;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addHighScoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (!listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.add(listener);&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void removeHighScoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.remove(listener);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int size() {&#xA;&#x9;&#x9;return highscoreList.size();&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int getElement(int element) {&#xA;&#x9;&#x9;return highscoreList.get(element);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addResult(int result) {&#xA;&#x9;&#x9;if (result >= highscoreList.get(highscoreList.size()-1)) {&#xA;&#x9;&#x9;&#x9;return;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if ()&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457898137383" sizeMeasure="45">
          <edit xsi:type="exercise:StringEdit" storedString="package patterns.observable;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.List;&#xA;&#xA;public class HighscoreList {&#xA;&#x9;&#xA;&#x9;private int maxSize;&#xA;&#x9;private List&lt;HighscoreListListener> listeners = new ArrayList&lt;>();&#xA;&#x9;private List&lt;Integer> highscoreList = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;HighscoreList(int maxSize) {&#xA;&#x9;&#x9;this.maxSize = maxSize;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addHighScoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (!listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.add(listener);&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void removeHighScoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.remove(listener);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int size() {&#xA;&#x9;&#x9;return highscoreList.size();&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int getElement(int element) {&#xA;&#x9;&#x9;return highscoreList.get(element);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addResult(int result) {&#xA;&#x9;&#x9;if (result >= highscoreList.get(highscoreList.size()-1)) {&#xA;&#x9;&#x9;&#x9;return;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (highscoreList.size() >= maxSize) {&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457898182113" sizeMeasure="46">
          <edit xsi:type="exercise:StringEdit" storedString="package patterns.observable;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.List;&#xA;&#xA;public class HighscoreList {&#xA;&#x9;&#xA;&#x9;private int maxSize;&#xA;&#x9;private List&lt;HighscoreListListener> listeners = new ArrayList&lt;>();&#xA;&#x9;private List&lt;Integer> highscoreList = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;HighscoreList(int maxSize) {&#xA;&#x9;&#x9;this.maxSize = maxSize;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addHighScoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (!listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.add(listener);&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void removeHighScoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.remove(listener);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int size() {&#xA;&#x9;&#x9;return highscoreList.size();&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int getElement(int element) {&#xA;&#x9;&#x9;return highscoreList.get(element);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addResult(int result) {&#xA;&#x9;&#x9;//Returns if the result isn't good enough to be on the list&#xA;&#x9;&#x9;if (result >= highscoreList.get(highscoreList.size()-1)) {&#xA;&#x9;&#x9;&#x9;return;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (highscoreList.size() >= maxSize) {&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457898218392" sizeMeasure="46">
          <edit xsi:type="exercise:StringEdit" storedString="package patterns.observable;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.List;&#xA;&#xA;public class HighscoreList {&#xA;&#x9;&#xA;&#x9;private int maxSize;&#xA;&#x9;private List&lt;HighscoreListListener> listeners = new ArrayList&lt;>();&#xA;&#x9;private List&lt;Integer> highscoreList = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;HighscoreList(int maxSize) {&#xA;&#x9;&#x9;this.maxSize = maxSize;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addHighScoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (!listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.add(listener);&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void removeHighScoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.remove(listener);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int size() {&#xA;&#x9;&#x9;return highscoreList.size();&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int getElement(int element) {&#xA;&#x9;&#x9;return highscoreList.get(element);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addResult(int result) {&#xA;&#x9;&#x9;//Returns if the result isn't good enough to be on the list&#xA;&#x9;&#x9;if (result >= highscoreList.get(highscoreList.size()-1)) {&#xA;&#x9;&#x9;&#x9;return;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (highscoreList.size() >= maxSize) {&#xA;&#x9;&#x9;&#x9;highscoreList.remove(highscoreList.size()-1);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457898260379" sizeMeasure="47">
          <edit xsi:type="exercise:StringEdit" storedString="package patterns.observable;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.List;&#xA;&#xA;public class HighscoreList {&#xA;&#x9;&#xA;&#x9;private int maxSize;&#xA;&#x9;private List&lt;HighscoreListListener> listeners = new ArrayList&lt;>();&#xA;&#x9;private List&lt;Integer> highscoreList = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;HighscoreList(int maxSize) {&#xA;&#x9;&#x9;this.maxSize = maxSize;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addHighScoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (!listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.add(listener);&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void removeHighScoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.remove(listener);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int size() {&#xA;&#x9;&#x9;return highscoreList.size();&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int getElement(int element) {&#xA;&#x9;&#x9;return highscoreList.get(element);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addResult(int result) {&#xA;&#x9;&#x9;//Returns if the result isn't good enough to be on the list&#xA;&#x9;&#x9;if (result >= highscoreList.get(highscoreList.size()-1)) {&#xA;&#x9;&#x9;&#x9;return;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (highscoreList.size() >= maxSize) {&#xA;&#x9;&#x9;&#x9;highscoreList.remove(highscoreList.size()-1);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;highscoreList.add(result);&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457898307119" sizeMeasure="48" errorCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package patterns.observable;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.List;&#xA;&#xA;public class HighscoreList {&#xA;&#x9;&#xA;&#x9;private int maxSize;&#xA;&#x9;private List&lt;HighscoreListListener> listeners = new ArrayList&lt;>();&#xA;&#x9;private List&lt;Integer> highscoreList = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;HighscoreList(int maxSize) {&#xA;&#x9;&#x9;this.maxSize = maxSize;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addHighScoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (!listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.add(listener);&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void removeHighScoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.remove(listener);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int size() {&#xA;&#x9;&#x9;return highscoreList.size();&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int getElement(int element) {&#xA;&#x9;&#x9;return highscoreList.get(element);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addResult(int result) {&#xA;&#x9;&#x9;//Returns if the result isn't good enough to be on the list&#xA;&#x9;&#x9;if (result >= highscoreList.get(highscoreList.size()-1)) {&#xA;&#x9;&#x9;&#x9;return;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (highscoreList.size() >= maxSize) {&#xA;&#x9;&#x9;&#x9;highscoreList.remove(highscoreList.size()-1);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;highscoreList.add(result);&#xA;&#x9;&#x9;highscoreList = highscoreList.sort(null);&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457898319382" sizeMeasure="48" errorCount="2">
          <edit xsi:type="exercise:StringEdit" storedString="package patterns.observable;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.List;&#xA;&#xA;public class HighscoreList {&#xA;&#x9;&#xA;&#x9;private int maxSize;&#xA;&#x9;private List&lt;HighscoreListListener> listeners = new ArrayList&lt;>();&#xA;&#x9;private List&lt;Integer> highscoreList = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;HighscoreList(int maxSize) {&#xA;&#x9;&#x9;this.maxSize = maxSize;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addHighScoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (!listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.add(listener);&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void removeHighScoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.remove(listener);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int size() {&#xA;&#x9;&#x9;return highscoreList.size();&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int getElement(int element) {&#xA;&#x9;&#x9;return highscoreList.get(element);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addResult(int result) {&#xA;&#x9;&#x9;//Returns if the result isn't good enough to be on the list&#xA;&#x9;&#x9;if (result >= highscoreList.get(highscoreList.size()-1)) {&#xA;&#x9;&#x9;&#x9;return;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (highscoreList.size() >= maxSize) {&#xA;&#x9;&#x9;&#x9;highscoreList.remove(highscoreList.size()-1);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;highscoreList.add(result);&#xA;&#x9;&#x9;highscoreList = highscoreList.sort());&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457898331909" sizeMeasure="50" errorCount="2">
          <edit xsi:type="exercise:StringEdit" storedString="package patterns.observable;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.List;&#xA;&#xA;public class HighscoreList {&#xA;&#x9;&#xA;&#x9;private int maxSize;&#xA;&#x9;private List&lt;HighscoreListListener> listeners = new ArrayList&lt;>();&#xA;&#x9;private List&lt;Integer> highscoreList = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;HighscoreList(int maxSize) {&#xA;&#x9;&#x9;this.maxSize = maxSize;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addHighScoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (!listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.add(listener);&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void removeHighScoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.remove(listener);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int size() {&#xA;&#x9;&#x9;return highscoreList.size();&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int getElement(int element) {&#xA;&#x9;&#x9;return highscoreList.get(element);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addResult(int result) {&#xA;&#x9;&#x9;//Returns if the result isn't good enough to be on the list&#xA;&#x9;&#x9;if (result >= highscoreList.get(highscoreList.size()-1)) {&#xA;&#x9;&#x9;&#x9;return;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (highscoreList.size() >= maxSize) {&#xA;&#x9;&#x9;&#x9;highscoreList.remove(highscoreList.size()-1);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;highscoreList.add(result);&#xA;&#x9;&#x9;highscoreList = highscoreList.sort());&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457898351514" sizeMeasure="50" errorCount="2">
          <edit xsi:type="exercise:StringEdit" storedString="package patterns.observable;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.List;&#xA;&#xA;public class HighscoreList {&#xA;&#x9;&#xA;&#x9;private int maxSize;&#xA;&#x9;private List&lt;HighscoreListListener> listeners = new ArrayList&lt;>();&#xA;&#x9;private List&lt;Integer> highscoreList = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;HighscoreList(int maxSize) {&#xA;&#x9;&#x9;this.maxSize = maxSize;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addHighScoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (!listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.add(listener);&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void removeHighScoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.remove(listener);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int size() {&#xA;&#x9;&#x9;return highscoreList.size();&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int getElement(int element) {&#xA;&#x9;&#x9;return highscoreList.get(element);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addResult(int result) {&#xA;&#x9;&#x9;//Returns if the result isn't good enough to be on the list&#xA;&#x9;&#x9;if (result >= highscoreList.get(highscoreList.size()-1)) {&#xA;&#x9;&#x9;&#x9;return;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (highscoreList.size() >= maxSize) {&#xA;&#x9;&#x9;&#x9;highscoreList.remove(highscoreList.size()-1);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;highscoreList.add(result);&#xA;&#x9;&#x9;highscoreList = highscoreList.sort());&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457898410049" sizeMeasure="51" errorCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package patterns.observable;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collections;&#xA;import java.util.List;&#xA;&#xA;public class HighscoreList {&#xA;&#x9;&#xA;&#x9;private int maxSize;&#xA;&#x9;private List&lt;HighscoreListListener> listeners = new ArrayList&lt;>();&#xA;&#x9;private List&lt;Integer> highscoreList = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;HighscoreList(int maxSize) {&#xA;&#x9;&#x9;this.maxSize = maxSize;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addHighScoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (!listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.add(listener);&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void removeHighScoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.remove(listener);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int size() {&#xA;&#x9;&#x9;return highscoreList.size();&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int getElement(int element) {&#xA;&#x9;&#x9;return highscoreList.get(element);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addResult(int result) {&#xA;&#x9;&#x9;//Returns if the result isn't good enough to be on the list&#xA;&#x9;&#x9;if (result >= highscoreList.get(highscoreList.size()-1)) {&#xA;&#x9;&#x9;&#x9;return;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (highscoreList.size() >= maxSize) {&#xA;&#x9;&#x9;&#x9;highscoreList.remove(highscoreList.size()-1);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;highscoreList.add(result);&#xA;&#x9;&#x9;highscoreList = Collections.sort(highscoreList);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457898427353" sizeMeasure="51">
          <edit xsi:type="exercise:StringEdit" storedString="package patterns.observable;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collections;&#xA;import java.util.List;&#xA;&#xA;public class HighscoreList {&#xA;&#x9;&#xA;&#x9;private int maxSize;&#xA;&#x9;private List&lt;HighscoreListListener> listeners = new ArrayList&lt;>();&#xA;&#x9;private List&lt;Integer> highscoreList = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;HighscoreList(int maxSize) {&#xA;&#x9;&#x9;this.maxSize = maxSize;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addHighScoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (!listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.add(listener);&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void removeHighScoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.remove(listener);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int size() {&#xA;&#x9;&#x9;return highscoreList.size();&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int getElement(int element) {&#xA;&#x9;&#x9;return highscoreList.get(element);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addResult(int result) {&#xA;&#x9;&#x9;//Returns if the result isn't good enough to be on the list&#xA;&#x9;&#x9;if (result >= highscoreList.get(highscoreList.size()-1)) {&#xA;&#x9;&#x9;&#x9;return;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (highscoreList.size() >= maxSize) {&#xA;&#x9;&#x9;&#x9;highscoreList.remove(highscoreList.size()-1);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;highscoreList.add(result);&#xA;&#x9;&#x9;Collections.sort(highscoreList);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457898485613" sizeMeasure="55" warningCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package patterns.observable;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collections;&#xA;import java.util.List;&#xA;&#xA;public class HighscoreList {&#xA;&#x9;&#xA;&#x9;private int maxSize;&#xA;&#x9;private List&lt;HighscoreListListener> listeners = new ArrayList&lt;>();&#xA;&#x9;private List&lt;Integer> highscoreList = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;HighscoreList(int maxSize) {&#xA;&#x9;&#x9;this.maxSize = maxSize;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addHighScoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (!listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.add(listener);&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void removeHighScoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.remove(listener);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int size() {&#xA;&#x9;&#x9;return highscoreList.size();&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int getElement(int element) {&#xA;&#x9;&#x9;return highscoreList.get(element);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addResult(int result) {&#xA;&#x9;&#x9;//Returns if the result isn't good enough to be on the list&#xA;&#x9;&#x9;if (result >= highscoreList.get(highscoreList.size()-1)) {&#xA;&#x9;&#x9;&#x9;return;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (highscoreList.size() >= maxSize) {&#xA;&#x9;&#x9;&#x9;highscoreList.remove(highscoreList.size()-1);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;highscoreList.add(result);&#xA;&#x9;&#x9;Collections.sort(highscoreList);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;private void fireChangeEvent() {&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457898497028" sizeMeasure="56">
          <edit xsi:type="exercise:StringEdit" storedString="package patterns.observable;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collections;&#xA;import java.util.List;&#xA;&#xA;public class HighscoreList {&#xA;&#x9;&#xA;&#x9;private int maxSize;&#xA;&#x9;private List&lt;HighscoreListListener> listeners = new ArrayList&lt;>();&#xA;&#x9;private List&lt;Integer> highscoreList = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;HighscoreList(int maxSize) {&#xA;&#x9;&#x9;this.maxSize = maxSize;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addHighScoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (!listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.add(listener);&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void removeHighScoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.remove(listener);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int size() {&#xA;&#x9;&#x9;return highscoreList.size();&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int getElement(int element) {&#xA;&#x9;&#x9;return highscoreList.get(element);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addResult(int result) {&#xA;&#x9;&#x9;//Returns if the result isn't good enough to be on the list&#xA;&#x9;&#x9;if (result >= highscoreList.get(highscoreList.size()-1)) {&#xA;&#x9;&#x9;&#x9;return;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (highscoreList.size() >= maxSize) {&#xA;&#x9;&#x9;&#x9;highscoreList.remove(highscoreList.size()-1);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;highscoreList.add(result);&#xA;&#x9;&#x9;Collections.sort(highscoreList);&#xA;&#x9;&#x9;fireChangeEvent();&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;private void fireChangeEvent() {&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457898547745" sizeMeasure="58" errorCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package patterns.observable;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collections;&#xA;import java.util.List;&#xA;&#xA;public class HighscoreList {&#xA;&#x9;&#xA;&#x9;private int maxSize;&#xA;&#x9;private List&lt;HighscoreListListener> listeners = new ArrayList&lt;>();&#xA;&#x9;private List&lt;Integer> highscoreList = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;HighscoreList(int maxSize) {&#xA;&#x9;&#x9;this.maxSize = maxSize;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addHighScoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (!listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.add(listener);&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void removeHighScoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.remove(listener);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int size() {&#xA;&#x9;&#x9;return highscoreList.size();&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int getElement(int element) {&#xA;&#x9;&#x9;return highscoreList.get(element);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addResult(int result) {&#xA;&#x9;&#x9;//Returns if the result isn't good enough to be on the list&#xA;&#x9;&#x9;if (result >= highscoreList.get(highscoreList.size()-1)) {&#xA;&#x9;&#x9;&#x9;return;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (highscoreList.size() >= maxSize) {&#xA;&#x9;&#x9;&#x9;highscoreList.remove(highscoreList.size()-1);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;highscoreList.add(result);&#xA;&#x9;&#x9;Collections.sort(highscoreList);&#xA;&#x9;&#x9;fireChangeEvent();&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;private void fireChangeEvent() {&#xA;&#x9;&#x9;for (HighscoreListListener listener : listeners) {&#xA;&#x9;&#x9;&#x9;listener.listChanged(this, position);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457898555967" sizeMeasure="58" errorCount="3">
          <edit xsi:type="exercise:StringEdit" storedString="package patterns.observable;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collections;&#xA;import java.util.List;&#xA;&#xA;public class HighscoreList {&#xA;&#x9;&#xA;&#x9;private int maxSize;&#xA;&#x9;private List&lt;HighscoreListListener> listeners = new ArrayList&lt;>();&#xA;&#x9;private List&lt;Integer> highscoreList = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;HighscoreList(int maxSize) {&#xA;&#x9;&#x9;this.maxSize = maxSize;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addHighScoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (!listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.add(listener);&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void removeHighScoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.remove(listener);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int size() {&#xA;&#x9;&#x9;return highscoreList.size();&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int getElement(int element) {&#xA;&#x9;&#x9;return highscoreList.get(element);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addResult(int result) {&#xA;&#x9;&#x9;//Returns if the result isn't good enough to be on the list&#xA;&#x9;&#x9;if (result >= highscoreList.get(highscoreList.size()-1)) {&#xA;&#x9;&#x9;&#x9;return;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (highscoreList.size() >= maxSize) {&#xA;&#x9;&#x9;&#x9;highscoreList.remove(highscoreList.size()-1);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;highscoreList.add(result);&#xA;&#x9;&#x9;Collections.sort(highscoreList);&#xA;&#x9;&#x9;fireChangeEvent();&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;private void fireChangeEvent(int ) {&#xA;&#x9;&#x9;for (HighscoreListListener listener : listeners) {&#xA;&#x9;&#x9;&#x9;listener.listChanged(this, position);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457899652944" sizeMeasure="58" errorCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package patterns.observable;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collections;&#xA;import java.util.List;&#xA;&#xA;public class HighscoreList {&#xA;&#x9;&#xA;&#x9;private int maxSize;&#xA;&#x9;private List&lt;HighscoreListListener> listeners = new ArrayList&lt;>();&#xA;&#x9;private List&lt;Integer> highscoreList = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;HighscoreList(int maxSize) {&#xA;&#x9;&#x9;this.maxSize = maxSize;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addHighScoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (!listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.add(listener);&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void removeHighScoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.remove(listener);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int size() {&#xA;&#x9;&#x9;return highscoreList.size();&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int getElement(int element) {&#xA;&#x9;&#x9;return highscoreList.get(element);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addResult(int result) {&#xA;&#x9;&#x9;//Returns if the result isn't good enough to be on the list&#xA;&#x9;&#x9;if (result >= highscoreList.get(highscoreList.size()-1)) {&#xA;&#x9;&#x9;&#x9;return;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (highscoreList.size() >= maxSize) {&#xA;&#x9;&#x9;&#x9;highscoreList.remove(highscoreList.size()-1);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;highscoreList.add(result);&#xA;&#x9;&#x9;Collections.sort(highscoreList);&#xA;&#x9;&#x9;fireChangeEvent();&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;private void fireChangeEvent(int position) {&#xA;&#x9;&#x9;for (HighscoreListListener listener : listeners) {&#xA;&#x9;&#x9;&#x9;listener.listChanged(this, position);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457899671673" sizeMeasure="58">
          <edit xsi:type="exercise:StringEdit" storedString="package patterns.observable;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collections;&#xA;import java.util.List;&#xA;&#xA;public class HighscoreList {&#xA;&#x9;&#xA;&#x9;private int maxSize;&#xA;&#x9;private List&lt;HighscoreListListener> listeners = new ArrayList&lt;>();&#xA;&#x9;private List&lt;Integer> highscoreList = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;HighscoreList(int maxSize) {&#xA;&#x9;&#x9;this.maxSize = maxSize;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addHighScoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (!listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.add(listener);&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void removeHighScoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.remove(listener);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int size() {&#xA;&#x9;&#x9;return highscoreList.size();&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int getElement(int element) {&#xA;&#x9;&#x9;return highscoreList.get(element);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addResult(int result) {&#xA;&#x9;&#x9;//Returns if the result isn't good enough to be on the list&#xA;&#x9;&#x9;if (result >= highscoreList.get(highscoreList.size()-1)) {&#xA;&#x9;&#x9;&#x9;return;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (highscoreList.size() >= maxSize) {&#xA;&#x9;&#x9;&#x9;highscoreList.remove(highscoreList.size()-1);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;highscoreList.add(result);&#xA;&#x9;&#x9;Collections.sort(highscoreList);&#xA;&#x9;&#x9;fireChangeEvent(highscoreList.get(result));&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;private void fireChangeEvent(int position) {&#xA;&#x9;&#x9;for (HighscoreListListener listener : listeners) {&#xA;&#x9;&#x9;&#x9;listener.listChanged(this, position);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457899760896" sizeMeasure="58">
          <edit xsi:type="exercise:StringEdit" storedString="package patterns.observable;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collections;&#xA;import java.util.List;&#xA;&#xA;public class HighscoreList {&#xA;&#x9;&#xA;&#x9;private int maxSize;&#xA;&#x9;private List&lt;HighscoreListListener> listeners = new ArrayList&lt;>();&#xA;&#x9;private List&lt;Integer> highscoreList = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;HighscoreList(int maxSize) {&#xA;&#x9;&#x9;this.maxSize = maxSize;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addHighscoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (!listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.add(listener);&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void removeHighscoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.remove(listener);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int size() {&#xA;&#x9;&#x9;return highscoreList.size();&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int getElement(int element) {&#xA;&#x9;&#x9;return highscoreList.get(element);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addResult(int result) {&#xA;&#x9;&#x9;//Returns if the result isn't good enough to be on the list&#xA;&#x9;&#x9;if (result >= highscoreList.get(highscoreList.size()-1)) {&#xA;&#x9;&#x9;&#x9;return;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (highscoreList.size() >= maxSize) {&#xA;&#x9;&#x9;&#x9;highscoreList.remove(highscoreList.size()-1);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;highscoreList.add(result);&#xA;&#x9;&#x9;Collections.sort(highscoreList);&#xA;&#x9;&#x9;fireChangeEvent(highscoreList.get(result));&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;private void fireChangeEvent(int position) {&#xA;&#x9;&#x9;for (HighscoreListListener listener : listeners) {&#xA;&#x9;&#x9;&#x9;listener.listChanged(this, position);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457899789509" sizeMeasure="58">
          <edit xsi:type="exercise:StringEdit" storedString="package patterns.observable;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collections;&#xA;import java.util.List;&#xA;&#xA;public class HighscoreList {&#xA;&#x9;&#xA;&#x9;private int maxSize;&#xA;&#x9;private List&lt;HighscoreListListener> listeners = new ArrayList&lt;>();&#xA;&#x9;private List&lt;Integer> highscoreList = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;HighscoreList(int maxSize) {&#xA;&#x9;&#x9;this.maxSize = maxSize;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addHighscoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (!listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.add(listener);&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void removeHighscoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.remove(listener);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int size() {&#xA;&#x9;&#x9;return highscoreList.size();&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int getElement(int element) {&#xA;&#x9;&#x9;return highscoreList.get(element);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addResult(Integer result) {&#xA;&#x9;&#x9;//Returns if the result isn't good enough to be on the list&#xA;&#x9;&#x9;if (result >= highscoreList.get(highscoreList.size()-1)) {&#xA;&#x9;&#x9;&#x9;return;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (highscoreList.size() >= maxSize) {&#xA;&#x9;&#x9;&#x9;highscoreList.remove(highscoreList.size()-1);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;highscoreList.add(result);&#xA;&#x9;&#x9;Collections.sort(highscoreList);&#xA;&#x9;&#x9;fireChangeEvent(highscoreList.get(result));&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;private void fireChangeEvent(int position) {&#xA;&#x9;&#x9;for (HighscoreListListener listener : listeners) {&#xA;&#x9;&#x9;&#x9;listener.listChanged(this, position);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457899823315" sizeMeasure="60">
          <edit xsi:type="exercise:StringEdit" storedString="package patterns.observable;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collections;&#xA;import java.util.List;&#xA;&#xA;public class HighscoreList {&#xA;&#x9;&#xA;&#x9;private int maxSize;&#xA;&#x9;private List&lt;HighscoreListListener> listeners = new ArrayList&lt;>();&#xA;&#x9;private List&lt;Integer> highscoreList = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;HighscoreList(int maxSize) {&#xA;&#x9;&#x9;this.maxSize = maxSize;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addHighscoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (!listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.add(listener);&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void removeHighscoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.remove(listener);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int size() {&#xA;&#x9;&#x9;return highscoreList.size();&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int getElement(int element) {&#xA;&#x9;&#x9;return highscoreList.get(element);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addResult(Integer result) {&#xA;&#x9;&#x9;//Returns if the result isn't good enough to be on the list&#xA;&#x9;&#x9;if (result >= highscoreList.get(highscoreList.size()-1)) {&#xA;&#x9;&#x9;&#x9;return;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (highscoreList.size() >= maxSize) {&#xA;&#x9;&#x9;&#x9;highscoreList.remove(highscoreList.size()-1);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;highscoreList.add(result);&#xA;&#x9;&#x9;Collections.sort(highscoreList);&#xA;&#x9;&#x9;fireChangeEvent(highscoreList.get(result));&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;private void fireChangeEvent(int position) {&#xA;&#x9;&#x9;for (HighscoreListListener listener : listeners) {&#xA;&#x9;&#x9;&#x9;listener.listChanged(this, position);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457900056959" sizeMeasure="60">
          <edit xsi:type="exercise:StringEdit" storedString="package patterns.observable;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collections;&#xA;import java.util.List;&#xA;&#xA;public class HighscoreList {&#xA;&#x9;&#xA;&#x9;private int maxSize;&#xA;&#x9;private List&lt;HighscoreListListener> listeners = new ArrayList&lt;>();&#xA;&#x9;private List&lt;Integer> highscoreList = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;HighscoreList(int maxSize) {&#xA;&#x9;&#x9;this.maxSize = maxSize;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addHighscoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (!listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.add(listener);&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void removeHighscoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.remove(listener);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int size() {&#xA;&#x9;&#x9;return highscoreList.size();&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int getElement(int element) {&#xA;&#x9;&#x9;return highscoreList.get(element);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addResult(Integer result) {&#xA;&#x9;&#x9;//Returns if the result isn't good enough to be on the list&#xA;&#x9;&#x9;if (result >= highscoreList.get(highscoreList.size()-1) &amp;&amp; !highscoreList.isEmpty()) {&#xA;&#x9;&#x9;&#x9;return;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (highscoreList.size() >= maxSize) {&#xA;&#x9;&#x9;&#x9;highscoreList.remove(highscoreList.size()-1);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;highscoreList.add(result);&#xA;&#x9;&#x9;Collections.sort(highscoreList);&#xA;&#x9;&#x9;fireChangeEvent(highscoreList.get(result));&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;private void fireChangeEvent(int position) {&#xA;&#x9;&#x9;for (HighscoreListListener listener : listeners) {&#xA;&#x9;&#x9;&#x9;listener.listChanged(this, position);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457900075080" sizeMeasure="60">
          <edit xsi:type="exercise:StringEdit" storedString="package patterns.observable;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collections;&#xA;import java.util.List;&#xA;&#xA;public class HighscoreList {&#xA;&#x9;&#xA;&#x9;private int maxSize;&#xA;&#x9;private List&lt;HighscoreListListener> listeners = new ArrayList&lt;>();&#xA;&#x9;private List&lt;Integer> highscoreList = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;HighscoreList(int maxSize) {&#xA;&#x9;&#x9;this.maxSize = maxSize;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addHighscoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (!listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.add(listener);&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void removeHighscoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.remove(listener);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int size() {&#xA;&#x9;&#x9;return highscoreList.size();&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int getElement(int element) {&#xA;&#x9;&#x9;return highscoreList.get(element);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addResult(Integer result) {&#xA;&#x9;&#x9;//Returns if the result isn't good enough to be on the list&#xA;&#x9;&#x9;if (result >= highscoreList.get(highscoreList.size()-1) &amp;&amp; !(highscoreList.isEmpty())) {&#xA;&#x9;&#x9;&#x9;return;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (highscoreList.size() >= maxSize) {&#xA;&#x9;&#x9;&#x9;highscoreList.remove(highscoreList.size()-1);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;highscoreList.add(result);&#xA;&#x9;&#x9;Collections.sort(highscoreList);&#xA;&#x9;&#x9;fireChangeEvent(highscoreList.get(result));&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;private void fireChangeEvent(int position) {&#xA;&#x9;&#x9;for (HighscoreListListener listener : listeners) {&#xA;&#x9;&#x9;&#x9;listener.listChanged(this, position);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457900080946" sizeMeasure="60">
          <edit xsi:type="exercise:StringEdit" storedString="package patterns.observable;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collections;&#xA;import java.util.List;&#xA;&#xA;public class HighscoreList {&#xA;&#x9;&#xA;&#x9;private int maxSize;&#xA;&#x9;private List&lt;HighscoreListListener> listeners = new ArrayList&lt;>();&#xA;&#x9;private List&lt;Integer> highscoreList = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;HighscoreList(int maxSize) {&#xA;&#x9;&#x9;this.maxSize = maxSize;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addHighscoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (!listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.add(listener);&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void removeHighscoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.remove(listener);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int size() {&#xA;&#x9;&#x9;return highscoreList.size();&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int getElement(int element) {&#xA;&#x9;&#x9;return highscoreList.get(element);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addResult(Integer result) {&#xA;&#x9;&#x9;//Returns if the result isn't good enough to be on the list&#xA;&#x9;&#x9;if (result >= highscoreList.get(highscoreList.size()-1) &amp;&amp; !highscoreList.isEmpty()) {&#xA;&#x9;&#x9;&#x9;return;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (highscoreList.size() >= maxSize) {&#xA;&#x9;&#x9;&#x9;highscoreList.remove(highscoreList.size()-1);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;highscoreList.add(result);&#xA;&#x9;&#x9;Collections.sort(highscoreList);&#xA;&#x9;&#x9;fireChangeEvent(highscoreList.get(result));&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;private void fireChangeEvent(int position) {&#xA;&#x9;&#x9;for (HighscoreListListener listener : listeners) {&#xA;&#x9;&#x9;&#x9;listener.listChanged(this, position);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457900167618" sizeMeasure="60" warningCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package patterns.observable;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collections;&#xA;import java.util.List;&#xA;&#xA;public class HighscoreList {&#xA;&#x9;&#xA;&#x9;private int maxSize;&#xA;&#x9;private List&lt;HighscoreListListener> listeners = new ArrayList&lt;>();&#xA;&#x9;private List&lt;Integer> highscoreList = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;HighscoreList(int maxSize) {&#xA;&#x9;&#x9;this.maxSize = maxSize;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addHighscoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (!listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.add(listener);&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void removeHighscoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.remove(listener);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int size() {&#xA;&#x9;&#x9;return highscoreList.size();&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int getElement(int element) {&#xA;&#x9;&#x9;return highscoreList.get(element);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addResult(Integer result) {&#xA;&#x9;&#x9;//Returns if the result isn't good enough to be on the list&#xA;&#x9;&#x9;if (result >= highscoreList.get(highscoreList.size()-1) &amp;&amp; !highscoreList.isEmpty()) {&#xA;&#x9;&#x9;&#x9;return;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (highscoreList.size() >= maxSize) {&#xA;&#x9;&#x9;&#x9;highscoreList.remove(highscoreList.size()-1);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;highscoreList.add(result);&#xA;&#x9;&#x9;Collections.sort(highscoreList);&#xA;&#x9;&#x9;fireChangeEvent(highscoreList.get(result));&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;private void fireChangeEvent(int position) {&#xA;&#x9;&#x9;for (HighscoreListListener listener : listeners) {&#xA;&#x9;&#x9;&#x9;listener.listChanged(this, position);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;HighscoreList list = new HighscoreList(3);&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457900173470" sizeMeasure="60" warningCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package patterns.observable;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collections;&#xA;import java.util.List;&#xA;&#xA;public class HighscoreList {&#xA;&#x9;&#xA;&#x9;private int maxSize;&#xA;&#x9;private List&lt;HighscoreListListener> listeners = new ArrayList&lt;>();&#xA;&#x9;private List&lt;Integer> highscoreList = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;HighscoreList(int maxSize) {&#xA;&#x9;&#x9;this.maxSize = maxSize;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addHighscoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (!listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.add(listener);&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void removeHighscoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.remove(listener);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int size() {&#xA;&#x9;&#x9;return highscoreList.size();&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int getElement(int element) {&#xA;&#x9;&#x9;return highscoreList.get(element);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addResult(Integer result) {&#xA;&#x9;&#x9;//Returns if the result isn't good enough to be on the list&#xA;&#x9;&#x9;if (result >= highscoreList.get(highscoreList.size()-1) &amp;&amp; !highscoreList.isEmpty()) {&#xA;&#x9;&#x9;&#x9;return;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (highscoreList.size() >= maxSize) {&#xA;&#x9;&#x9;&#x9;highscoreList.remove(highscoreList.size()-1);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;highscoreList.add(result);&#xA;&#x9;&#x9;Collections.sort(highscoreList);&#xA;&#x9;&#x9;fireChangeEvent(highscoreList.get(result));&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;private void fireChangeEvent(int position) {&#xA;&#x9;&#x9;for (HighscoreListListener listener : listeners) {&#xA;&#x9;&#x9;&#x9;listener.listChanged(this, position);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;HighscoreList list = new HighscoreList(2);&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457900195455" sizeMeasure="62">
          <edit xsi:type="exercise:StringEdit" storedString="package patterns.observable;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collections;&#xA;import java.util.List;&#xA;&#xA;public class HighscoreList {&#xA;&#x9;&#xA;&#x9;private int maxSize;&#xA;&#x9;private List&lt;HighscoreListListener> listeners = new ArrayList&lt;>();&#xA;&#x9;private List&lt;Integer> highscoreList = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;HighscoreList(int maxSize) {&#xA;&#x9;&#x9;this.maxSize = maxSize;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addHighscoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (!listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.add(listener);&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void removeHighscoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.remove(listener);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int size() {&#xA;&#x9;&#x9;return highscoreList.size();&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int getElement(int element) {&#xA;&#x9;&#x9;return highscoreList.get(element);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addResult(Integer result) {&#xA;&#x9;&#x9;//Returns if the result isn't good enough to be on the list&#xA;&#x9;&#x9;if (result >= highscoreList.get(highscoreList.size()-1) &amp;&amp; !highscoreList.isEmpty()) {&#xA;&#x9;&#x9;&#x9;return;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (highscoreList.size() >= maxSize) {&#xA;&#x9;&#x9;&#x9;highscoreList.remove(highscoreList.size()-1);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;highscoreList.add(result);&#xA;&#x9;&#x9;Collections.sort(highscoreList);&#xA;&#x9;&#x9;fireChangeEvent(highscoreList.get(result));&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;private void fireChangeEvent(int position) {&#xA;&#x9;&#x9;for (HighscoreListListener listener : listeners) {&#xA;&#x9;&#x9;&#x9;listener.listChanged(this, position);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;HighscoreList list = new HighscoreList(2);&#xA;&#x9;&#x9;list.addResult(2);&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457900212635" sizeMeasure="62" errorCount="2">
          <edit xsi:type="exercise:StringEdit" storedString="package patterns.observable;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collections;&#xA;import java.util.List;&#xA;&#xA;public class HighscoreList {&#xA;&#x9;&#xA;&#x9;private int maxSize;&#xA;&#x9;private List&lt;HighscoreListListener> listeners = new ArrayList&lt;>();&#xA;&#x9;private List&lt;Integer> highscoreList = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;HighscoreList(int maxSize) {&#xA;&#x9;&#x9;this.maxSize = maxSize;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addHighscoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (!listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.add(listener);&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void removeHighscoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.remove(listener);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int size() {&#xA;&#x9;&#x9;return highscoreList.size();&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int getElement(int element) {&#xA;&#x9;&#x9;return highscoreList.get(element);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addResult(Integer result) {&#xA;&#x9;&#x9;//Returns if the result isn't good enough to be on the list&#xA;&#x9;&#x9;if (result >= highscoreList.get(highscoreList.size()-1) &amp;&amp; !highscoreList.isEmpty()) {&#xA;&#x9;&#x9;&#x9;return;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (highscoreList.size() >= maxSize) {&#xA;&#x9;&#x9;&#x9;highscoreList.remove(highscoreList.size()-1);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;highscoreList.add(result);&#xA;&#x9;&#x9;Collections.sort(highscoreList);&#xA;&#x9;&#x9;fireChangeEvent(highscoreList.get(result));&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;private void fireChangeEvent(int position) {&#xA;&#x9;&#x9;for (HighscoreListListener listener : listeners) {&#xA;&#x9;&#x9;&#x9;listener.listChanged(this, position);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;HighscoreList list = new HighscoreList(2);&#xA;&#x9;&#x9;list.addResult(2);&#xA;&#x9;&#x9;list.&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457900242293" sizeMeasure="62">
          <edit xsi:type="exercise:StringEdit" storedString="package patterns.observable;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collections;&#xA;import java.util.List;&#xA;&#xA;public class HighscoreList {&#xA;&#x9;&#xA;&#x9;private int maxSize;&#xA;&#x9;private List&lt;HighscoreListListener> listeners = new ArrayList&lt;>();&#xA;&#x9;private List&lt;Integer> highscoreList = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;HighscoreList(int maxSize) {&#xA;&#x9;&#x9;this.maxSize = maxSize;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addHighscoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (!listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.add(listener);&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void removeHighscoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.remove(listener);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int size() {&#xA;&#x9;&#x9;return highscoreList.size();&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int getElement(int element) {&#xA;&#x9;&#x9;return highscoreList.get(element);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addResult(Integer result) {&#xA;&#x9;&#x9;//Returns if the result isn't good enough to be on the list&#xA;&#x9;&#x9;if (result >= highscoreList.get(highscoreList.size()-1) &amp;&amp; !highscoreList.isEmpty()) {&#xA;&#x9;&#x9;&#x9;return;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (highscoreList.size() >= maxSize) {&#xA;&#x9;&#x9;&#x9;highscoreList.remove(highscoreList.size()-1);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;highscoreList.add(result);&#xA;&#x9;&#x9;Collections.sort(highscoreList);&#xA;&#x9;&#x9;fireChangeEvent(highscoreList.get(result));&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;private void fireChangeEvent(int position) {&#xA;&#x9;&#x9;for (HighscoreListListener listener : listeners) {&#xA;&#x9;&#x9;&#x9;listener.listChanged(this, position);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;HighscoreList list = new HighscoreList(2);&#xA;&#x9;&#x9;list.addResult(2);&#xA;&#x9;&#x9;list.getElement(0);&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457900284908" sizeMeasure="65">
          <edit xsi:type="exercise:StringEdit" storedString="package patterns.observable;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collections;&#xA;import java.util.List;&#xA;&#xA;public class HighscoreList {&#xA;&#x9;&#xA;&#x9;private int maxSize;&#xA;&#x9;private List&lt;HighscoreListListener> listeners = new ArrayList&lt;>();&#xA;&#x9;private List&lt;Integer> highscoreList = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;HighscoreList(int maxSize) {&#xA;&#x9;&#x9;this.maxSize = maxSize;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addHighscoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (!listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.add(listener);&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void removeHighscoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.remove(listener);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int size() {&#xA;&#x9;&#x9;return highscoreList.size();&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int getElement(int element) {&#xA;&#x9;&#x9;if (element > highscoreList.size()-1) {&#xA;&#x9;&#x9;&#x9;return -1;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return highscoreList.get(element);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addResult(Integer result) {&#xA;&#x9;&#x9;//Returns if the result isn't good enough to be on the list&#xA;&#x9;&#x9;if (result >= highscoreList.get(highscoreList.size()-1) &amp;&amp; !highscoreList.isEmpty()) {&#xA;&#x9;&#x9;&#x9;return;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (highscoreList.size() >= maxSize) {&#xA;&#x9;&#x9;&#x9;highscoreList.remove(highscoreList.size()-1);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;highscoreList.add(result);&#xA;&#x9;&#x9;Collections.sort(highscoreList);&#xA;&#x9;&#x9;fireChangeEvent(highscoreList.get(result));&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;private void fireChangeEvent(int position) {&#xA;&#x9;&#x9;for (HighscoreListListener listener : listeners) {&#xA;&#x9;&#x9;&#x9;listener.listChanged(this, position);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;HighscoreList list = new HighscoreList(2);&#xA;&#x9;&#x9;list.addResult(2);&#xA;&#x9;&#x9;list.getElement(0);&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457900335392" sizeMeasure="65" errorCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package patterns.observable;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collections;&#xA;import java.util.List;&#xA;&#xA;public class HighscoreList {&#xA;&#x9;&#xA;&#x9;private int maxSize;&#xA;&#x9;private List&lt;HighscoreListListener> listeners = new ArrayList&lt;>();&#xA;&#x9;private List&lt;Integer> highscoreList = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;HighscoreList(int maxSize) {&#xA;&#x9;&#x9;this.maxSize = maxSize;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addHighscoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (!listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.add(listener);&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void removeHighscoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.remove(listener);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int size() {&#xA;&#x9;&#x9;return highscoreList.size();&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int getElement(int element) {&#xA;&#x9;&#x9;if (element > highscoreList.size()-1) {&#xA;&#x9;&#x9;&#x9;return -1;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return highscoreList.get(element);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addResult(Integer result) {&#xA;&#x9;&#x9;//Returns if the result isn't good enough to be on the list&#xA;&#x9;&#x9;if (result >= highscoreList.getElement(highscoreList.size()-1) &amp;&amp; !highscoreList.isEmpty()) {&#xA;&#x9;&#x9;&#x9;return;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (highscoreList.size() >= maxSize) {&#xA;&#x9;&#x9;&#x9;highscoreList.remove(highscoreList.size()-1);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;highscoreList.add(result);&#xA;&#x9;&#x9;Collections.sort(highscoreList);&#xA;&#x9;&#x9;fireChangeEvent(highscoreList.get(result));&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;private void fireChangeEvent(int position) {&#xA;&#x9;&#x9;for (HighscoreListListener listener : listeners) {&#xA;&#x9;&#x9;&#x9;listener.listChanged(this, position);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;HighscoreList list = new HighscoreList(2);&#xA;&#x9;&#x9;list.addResult(2);&#xA;&#x9;&#x9;list.getElement(0);&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457900345417" sizeMeasure="65">
          <edit xsi:type="exercise:StringEdit" storedString="package patterns.observable;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collections;&#xA;import java.util.List;&#xA;&#xA;public class HighscoreList {&#xA;&#x9;&#xA;&#x9;private int maxSize;&#xA;&#x9;private List&lt;HighscoreListListener> listeners = new ArrayList&lt;>();&#xA;&#x9;private List&lt;Integer> highscoreList = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;HighscoreList(int maxSize) {&#xA;&#x9;&#x9;this.maxSize = maxSize;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addHighscoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (!listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.add(listener);&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void removeHighscoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.remove(listener);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int size() {&#xA;&#x9;&#x9;return highscoreList.size();&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int getElement(int element) {&#xA;&#x9;&#x9;if (element > highscoreList.size()-1) {&#xA;&#x9;&#x9;&#x9;return -1;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return highscoreList.get(element);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addResult(Integer result) {&#xA;&#x9;&#x9;//Returns if the result isn't good enough to be on the list&#xA;&#x9;&#x9;if (result >= this.getElement(highscoreList.size()-1) &amp;&amp; !highscoreList.isEmpty()) {&#xA;&#x9;&#x9;&#x9;return;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (highscoreList.size() >= maxSize) {&#xA;&#x9;&#x9;&#x9;highscoreList.remove(highscoreList.size()-1);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;highscoreList.add(result);&#xA;&#x9;&#x9;Collections.sort(highscoreList);&#xA;&#x9;&#x9;fireChangeEvent(highscoreList.get(result));&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;private void fireChangeEvent(int position) {&#xA;&#x9;&#x9;for (HighscoreListListener listener : listeners) {&#xA;&#x9;&#x9;&#x9;listener.listChanged(this, position);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;HighscoreList list = new HighscoreList(2);&#xA;&#x9;&#x9;list.addResult(2);&#xA;&#x9;&#x9;list.getElement(0);&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457903180418" sizeMeasure="68">
          <edit xsi:type="exercise:StringEdit" storedString="package patterns.observable;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collections;&#xA;import java.util.List;&#xA;&#xA;public class HighscoreList {&#xA;&#x9;&#xA;&#x9;private int maxSize;&#xA;&#x9;private List&lt;HighscoreListListener> listeners = new ArrayList&lt;>();&#xA;&#x9;private List&lt;Integer> highscoreList = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;HighscoreList(int maxSize) {&#xA;&#x9;&#x9;this.maxSize = maxSize;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addHighscoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (!listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.add(listener);&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void removeHighscoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.remove(listener);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int size() {&#xA;&#x9;&#x9;return highscoreList.size();&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int getElement(int element) {&#xA;&#x9;&#x9;if (element > highscoreList.size()-1) {&#xA;&#x9;&#x9;&#x9;return -1;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else if (highscoreList.isEmpty()) {&#xA;&#x9;&#x9;&#x9;return 0;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return highscoreList.get(element);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addResult(Integer result) {&#xA;&#x9;&#x9;//Returns if the result isn't good enough to be on the list&#xA;&#x9;&#x9;if (result >= this.getElement(highscoreList.size()-1) &amp;&amp; !highscoreList.isEmpty()) {&#xA;&#x9;&#x9;&#x9;return;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (highscoreList.size() >= maxSize) {&#xA;&#x9;&#x9;&#x9;highscoreList.remove(highscoreList.size()-1);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;highscoreList.add(result);&#xA;&#x9;&#x9;Collections.sort(highscoreList);&#xA;&#x9;&#x9;fireChangeEvent(highscoreList.get(result));&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;private void fireChangeEvent(int position) {&#xA;&#x9;&#x9;for (HighscoreListListener listener : listeners) {&#xA;&#x9;&#x9;&#x9;listener.listChanged(this, position);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;HighscoreList list = new HighscoreList(2);&#xA;&#x9;&#x9;list.addResult(2);&#xA;&#x9;&#x9;list.getElement(0);&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457903565384" sizeMeasure="68">
          <edit xsi:type="exercise:StringEdit" storedString="package patterns.observable;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collections;&#xA;import java.util.List;&#xA;&#xA;public class HighscoreList {&#xA;&#x9;&#xA;&#x9;private int maxSize;&#xA;&#x9;private List&lt;HighscoreListListener> listeners = new ArrayList&lt;>();&#xA;&#x9;private List&lt;Integer> highscoreList = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;HighscoreList(int maxSize) {&#xA;&#x9;&#x9;this.maxSize = maxSize;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addHighscoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (!listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.add(listener);&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void removeHighscoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.remove(listener);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int size() {&#xA;&#x9;&#x9;return highscoreList.size();&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int getElement(int element) {&#xA;&#x9;&#x9;if (element > highscoreList.size()-1) {&#xA;&#x9;&#x9;&#x9;return -1;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else if (highscoreList.isEmpty()) {&#xA;&#x9;&#x9;&#x9;return 0;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return highscoreList.get(element);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addResult(Integer result) {&#xA;&#x9;&#x9;//Returns if the result isn't good enough to be on the list&#xA;&#x9;&#x9;if (result >= this.getElement(highscoreList.size()-1) &amp;&amp; !highscoreList.isEmpty()) {&#xA;&#x9;&#x9;&#x9;return;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (highscoreList.size() >= maxSize) {&#xA;&#x9;&#x9;&#x9;highscoreList.remove(highscoreList.size()-1);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;highscoreList.add(result);&#xA;&#x9;&#x9;Collections.sort(highscoreList);&#xA;&#x9;&#x9;fireChangeEvent(highscoreList.get(result));&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;private void fireChangeEvent(int position) {&#xA;&#x9;&#x9;for (HighscoreListListener listener : listeners) {&#xA;&#x9;&#x9;&#x9;listener.listChanged(this, position);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;HighscoreList list = new HighscoreList(2);&#xA;&#x9;&#x9;list.addResult(2);&#xA;&#x9;&#x9;list.getElement(0);&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457903580951" sizeMeasure="68">
          <edit xsi:type="exercise:StringEdit" storedString="package patterns.observable;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collections;&#xA;import java.util.List;&#xA;&#xA;public class HighscoreList {&#xA;&#x9;&#xA;&#x9;private int maxSize;&#xA;&#x9;private List&lt;HighscoreListListener> listeners = new ArrayList&lt;>();&#xA;&#x9;private List&lt;Integer> highscoreList = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;HighscoreList(int maxSize) {&#xA;&#x9;&#x9;this.maxSize = maxSize;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addHighscoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (!listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.add(listener);&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void removeHighscoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.remove(listener);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int size() {&#xA;&#x9;&#x9;return highscoreList.size();&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int getElement(int element) {&#xA;&#x9;&#x9;if (element > highscoreList.size()-1) {&#xA;&#x9;&#x9;&#x9;return -1;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else if (highscoreList.isEmpty()) {&#xA;&#x9;&#x9;&#x9;return 0;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return highscoreList.get(element);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addResult(Integer result) {&#xA;&#x9;&#x9;//Returns if the result isn't good enough to be on the list&#xA;&#x9;&#x9;if (result >= this.getElement(highscoreList.size()-1) &amp;&amp; !highscoreList.isEmpty()) {&#xA;&#x9;&#x9;&#x9;return;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (highscoreList.size() >= maxSize) {&#xA;&#x9;&#x9;&#x9;highscoreList.remove(highscoreList.size()-1);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;highscoreList.add(result);&#xA;&#x9;&#x9;Collections.sort(highscoreList);&#xA;&#x9;&#x9;fireChangeEvent(highscoreList.indexOf(result));&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;private void fireChangeEvent(int position) {&#xA;&#x9;&#x9;for (HighscoreListListener listener : listeners) {&#xA;&#x9;&#x9;&#x9;listener.listChanged(this, position);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;HighscoreList list = new HighscoreList(2);&#xA;&#x9;&#x9;list.addResult(2);&#xA;&#x9;&#x9;list.getElement(0);&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457903608590" sizeMeasure="68" errorCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package patterns.observable;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collections;&#xA;import java.util.List;&#xA;&#xA;public class HighscoreList {&#xA;&#x9;&#xA;&#x9;private int maxSize;&#xA;&#x9;private List&lt;HighscoreListListener> listeners = new ArrayList&lt;>();&#xA;&#x9;private List&lt;Integer> highscoreList = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;HighscoreList(int maxSize) {&#xA;&#x9;&#x9;this.maxSize = maxSize;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addHighscoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (!listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.add(listener);&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void removeHighscoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.remove(listener);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int size() {&#xA;&#x9;&#x9;return highscoreList.size();&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int getElement(int element) {&#xA;&#x9;&#x9;if (element > highscoreList.size()-1) {&#xA;&#x9;&#x9;&#x9;return -1;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else if (highscoreList.isEmpty()) {&#xA;&#x9;&#x9;&#x9;return 0;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return highscoreList.get(element);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addResult(Integer result) {&#xA;&#x9;&#x9;//Returns if the result isn't good enough to be on the list&#xA;&#x9;&#x9;if (result >= this.getElement(highscoreList.size()-1) &amp;&amp; !highscoreList.isEmpty()) {&#xA;&#x9;&#x9;&#x9;return;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (highscoreList.size() >= maxSize) {&#xA;&#x9;&#x9;&#x9;highscoreList.remove(highscoreList.size()-1);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;highscoreList.add(result);&#xA;&#x9;&#x9;Collections.sort(highscoreList);&#xA;&#x9;&#x9;fireChangeEvent(highscoreList.indexOf(result));&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;private void fireChangeEvent(int position) {&#xA;&#x9;&#x9;for (HighscoreListListener listener : listeners) {&#xA;&#x9;&#x9;&#x9;listener.listChanged(this, position);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;HighscoreList list = new HighscoreList(2);&#xA;&#x9;&#x9;System.out.println(list.addResult(2));&#xA;&#x9;&#x9;System.out.println(list.getElement(0));&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457903638701" sizeMeasure="68">
          <edit xsi:type="exercise:StringEdit" storedString="package patterns.observable;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collections;&#xA;import java.util.List;&#xA;&#xA;public class HighscoreList {&#xA;&#x9;&#xA;&#x9;private int maxSize;&#xA;&#x9;private List&lt;HighscoreListListener> listeners = new ArrayList&lt;>();&#xA;&#x9;private List&lt;Integer> highscoreList = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;HighscoreList(int maxSize) {&#xA;&#x9;&#x9;this.maxSize = maxSize;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addHighscoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (!listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.add(listener);&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void removeHighscoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.remove(listener);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int size() {&#xA;&#x9;&#x9;return highscoreList.size();&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int getElement(int element) {&#xA;&#x9;&#x9;if (element > highscoreList.size()-1) {&#xA;&#x9;&#x9;&#x9;return -1;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else if (highscoreList.isEmpty()) {&#xA;&#x9;&#x9;&#x9;return 0;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return highscoreList.get(element);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addResult(Integer result) {&#xA;&#x9;&#x9;//Returns if the result isn't good enough to be on the list&#xA;&#x9;&#x9;if (result >= this.getElement(highscoreList.size()-1) &amp;&amp; !highscoreList.isEmpty()) {&#xA;&#x9;&#x9;&#x9;return;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (highscoreList.size() >= maxSize) {&#xA;&#x9;&#x9;&#x9;highscoreList.remove(highscoreList.size()-1);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;highscoreList.add(result);&#xA;&#x9;&#x9;Collections.sort(highscoreList);&#xA;&#x9;&#x9;fireChangeEvent(highscoreList.indexOf(result));&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;private void fireChangeEvent(int position) {&#xA;&#x9;&#x9;for (HighscoreListListener listener : listeners) {&#xA;&#x9;&#x9;&#x9;listener.listChanged(this, position);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;HighscoreList list = new HighscoreList(2);&#xA;&#x9;&#x9;list.addResult(2);&#xA;&#x9;&#x9;System.out.println(list.getElement(0));&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457903675766" sizeMeasure="70">
          <edit xsi:type="exercise:StringEdit" storedString="package patterns.observable;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collections;&#xA;import java.util.List;&#xA;&#xA;public class HighscoreList {&#xA;&#x9;&#xA;&#x9;private int maxSize;&#xA;&#x9;private List&lt;HighscoreListListener> listeners = new ArrayList&lt;>();&#xA;&#x9;private List&lt;Integer> highscoreList = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;HighscoreList(int maxSize) {&#xA;&#x9;&#x9;this.maxSize = maxSize;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addHighscoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (!listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.add(listener);&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void removeHighscoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.remove(listener);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int size() {&#xA;&#x9;&#x9;return highscoreList.size();&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int getElement(int element) {&#xA;&#x9;&#x9;if (element > highscoreList.size()-1) {&#xA;&#x9;&#x9;&#x9;return -1;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else if (highscoreList.isEmpty()) {&#xA;&#x9;&#x9;&#x9;return 0;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return highscoreList.get(element);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addResult(Integer result) {&#xA;&#x9;&#x9;//Returns if the result isn't good enough to be on the list&#xA;&#x9;&#x9;if (result >= this.getElement(highscoreList.size()-1) &amp;&amp; !highscoreList.isEmpty()) {&#xA;&#x9;&#x9;&#x9;return;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (highscoreList.size() >= maxSize) {&#xA;&#x9;&#x9;&#x9;highscoreList.remove(highscoreList.size()-1);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;highscoreList.add(result);&#xA;&#x9;&#x9;Collections.sort(highscoreList);&#xA;&#x9;&#x9;fireChangeEvent(highscoreList.indexOf(result));&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;private void fireChangeEvent(int position) {&#xA;&#x9;&#x9;for (HighscoreListListener listener : listeners) {&#xA;&#x9;&#x9;&#x9;listener.listChanged(this, position);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;HighscoreList list = new HighscoreList(2);&#xA;&#x9;&#x9;list.addResult(2);&#xA;&#x9;&#x9;System.out.println(list.getElement(0));&#xA;&#x9;&#x9;list.addResult(5);&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457903695862" sizeMeasure="70">
          <edit xsi:type="exercise:StringEdit" storedString="package patterns.observable;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collections;&#xA;import java.util.List;&#xA;&#xA;public class HighscoreList {&#xA;&#x9;&#xA;&#x9;private int maxSize;&#xA;&#x9;private List&lt;HighscoreListListener> listeners = new ArrayList&lt;>();&#xA;&#x9;private List&lt;Integer> highscoreList = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;HighscoreList(int maxSize) {&#xA;&#x9;&#x9;this.maxSize = maxSize;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addHighscoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (!listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.add(listener);&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void removeHighscoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.remove(listener);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int size() {&#xA;&#x9;&#x9;return highscoreList.size();&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int getElement(int element) {&#xA;&#x9;&#x9;if (element > highscoreList.size()-1) {&#xA;&#x9;&#x9;&#x9;return -1;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else if (highscoreList.isEmpty()) {&#xA;&#x9;&#x9;&#x9;return 0;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return highscoreList.get(element);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addResult(Integer result) {&#xA;&#x9;&#x9;//Returns if the result isn't good enough to be on the list&#xA;&#x9;&#x9;if (result >= this.getElement(highscoreList.size()-1) &amp;&amp; !highscoreList.isEmpty()) {&#xA;&#x9;&#x9;&#x9;return;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (highscoreList.size() >= maxSize) {&#xA;&#x9;&#x9;&#x9;highscoreList.remove(highscoreList.size()-1);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;highscoreList.add(result);&#xA;&#x9;&#x9;Collections.sort(highscoreList);&#xA;&#x9;&#x9;fireChangeEvent(highscoreList.indexOf(result));&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;private void fireChangeEvent(int position) {&#xA;&#x9;&#x9;for (HighscoreListListener listener : listeners) {&#xA;&#x9;&#x9;&#x9;listener.listChanged(this, position);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;HighscoreList list = new HighscoreList(2);&#xA;&#x9;&#x9;list.addResult(2);&#xA;&#x9;&#x9;System.out.println(list.getElement(0));&#xA;&#x9;&#x9;list.addResult(5);&#xA;&#x9;&#x9;System.out.println(list.getElement(1));&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457903943595" sizeMeasure="67">
          <edit xsi:type="exercise:StringEdit" storedString="package patterns.observable;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collections;&#xA;import java.util.List;&#xA;&#xA;public class HighscoreList {&#xA;&#x9;&#xA;&#x9;private int maxSize;&#xA;&#x9;private List&lt;HighscoreListListener> listeners = new ArrayList&lt;>();&#xA;&#x9;private List&lt;Integer> highscoreList = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;HighscoreList(int maxSize) {&#xA;&#x9;&#x9;this.maxSize = maxSize;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addHighscoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (!listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.add(listener);&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void removeHighscoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.remove(listener);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int size() {&#xA;&#x9;&#x9;return highscoreList.size();&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int getElement(int element) {&#xA;&#x9;&#x9;if (highscoreList.isEmpty()) {&#xA;&#x9;&#x9;&#x9;return 0;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return highscoreList.get(element);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addResult(Integer result) {&#xA;&#x9;&#x9;//Returns if the result isn't good enough to be on the list&#xA;&#x9;&#x9;if (result >= this.getElement(highscoreList.size()-1) &amp;&amp; !highscoreList.isEmpty()) {&#xA;&#x9;&#x9;&#x9;return;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (highscoreList.size() >= maxSize) {&#xA;&#x9;&#x9;&#x9;highscoreList.remove(highscoreList.size()-1);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;highscoreList.add(result);&#xA;&#x9;&#x9;Collections.sort(highscoreList);&#xA;&#x9;&#x9;fireChangeEvent(highscoreList.indexOf(result));&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;private void fireChangeEvent(int position) {&#xA;&#x9;&#x9;for (HighscoreListListener listener : listeners) {&#xA;&#x9;&#x9;&#x9;listener.listChanged(this, position);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;HighscoreList list = new HighscoreList(2);&#xA;&#x9;&#x9;list.addResult(2);&#xA;&#x9;&#x9;System.out.println(list.getElement(0));&#xA;&#x9;&#x9;list.addResult(5);&#xA;&#x9;&#x9;System.out.println(list.getElement(1));&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457903996284" sizeMeasure="67">
          <edit xsi:type="exercise:StringEdit" storedString="package patterns.observable;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collections;&#xA;import java.util.List;&#xA;&#xA;public class HighscoreList {&#xA;&#x9;&#xA;&#x9;private int maxSize;&#xA;&#x9;private List&lt;HighscoreListListener> listeners = new ArrayList&lt;>();&#xA;&#x9;private List&lt;Integer> highscoreList = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;HighscoreList(int maxSize) {&#xA;&#x9;&#x9;this.maxSize = maxSize;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addHighscoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (!listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.add(listener);&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void removeHighscoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.remove(listener);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int size() {&#xA;&#x9;&#x9;return highscoreList.size();&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int getElement(int element) {&#xA;&#x9;&#x9;if (highscoreList.isEmpty()) {&#xA;&#x9;&#x9;&#x9;return 0;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return highscoreList.get(element);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addResult(Integer result) {&#xA;&#x9;&#x9;//Returns if the result isn't good enough to be on the list&#xA;&#x9;&#x9;if (result >= highscoreList.get(highscoreList.size()-1) &amp;&amp; !highscoreList.isEmpty()) {&#xA;&#x9;&#x9;&#x9;return;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (highscoreList.size() >= maxSize) {&#xA;&#x9;&#x9;&#x9;highscoreList.remove(highscoreList.size()-1);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;highscoreList.add(result);&#xA;&#x9;&#x9;Collections.sort(highscoreList);&#xA;&#x9;&#x9;fireChangeEvent(highscoreList.indexOf(result));&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;private void fireChangeEvent(int position) {&#xA;&#x9;&#x9;for (HighscoreListListener listener : listeners) {&#xA;&#x9;&#x9;&#x9;listener.listChanged(this, position);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;HighscoreList list = new HighscoreList(2);&#xA;&#x9;&#x9;list.addResult(2);&#xA;&#x9;&#x9;System.out.println(list.getElement(0));&#xA;&#x9;&#x9;list.addResult(5);&#xA;&#x9;&#x9;System.out.println(list.getElement(1));&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457904022337" sizeMeasure="67">
          <edit xsi:type="exercise:StringEdit" storedString="package patterns.observable;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collections;&#xA;import java.util.List;&#xA;&#xA;public class HighscoreList {&#xA;&#x9;&#xA;&#x9;private int maxSize;&#xA;&#x9;private List&lt;HighscoreListListener> listeners = new ArrayList&lt;>();&#xA;&#x9;private List&lt;Integer> highscoreList = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;HighscoreList(int maxSize) {&#xA;&#x9;&#x9;this.maxSize = maxSize;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addHighscoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (!listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.add(listener);&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void removeHighscoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.remove(listener);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int size() {&#xA;&#x9;&#x9;return highscoreList.size();&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int getElement(int element) {&#xA;&#x9;&#x9;if (highscoreList.isEmpty()) {&#xA;&#x9;&#x9;&#x9;return 0;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return highscoreList.get(element);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addResult(Integer result) {&#xA;&#x9;&#x9;//Returns if the result isn't good enough to be on the list&#xA;&#x9;&#x9;if (result >= this.getElement(highscoreList.size()-1) &amp;&amp; !highscoreList.isEmpty()) {&#xA;&#x9;&#x9;&#x9;return;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (highscoreList.size() >= maxSize) {&#xA;&#x9;&#x9;&#x9;highscoreList.remove(highscoreList.size()-1);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;highscoreList.add(result);&#xA;&#x9;&#x9;Collections.sort(highscoreList);&#xA;&#x9;&#x9;fireChangeEvent(highscoreList.indexOf(result));&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;private void fireChangeEvent(int position) {&#xA;&#x9;&#x9;for (HighscoreListListener listener : listeners) {&#xA;&#x9;&#x9;&#x9;listener.listChanged(this, position);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;HighscoreList list = new HighscoreList(2);&#xA;&#x9;&#x9;list.addResult(2);&#xA;&#x9;&#x9;System.out.println(list.getElement(0));&#xA;&#x9;&#x9;list.addResult(5);&#xA;&#x9;&#x9;System.out.println(list.getElement(1));&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457904085536" sizeMeasure="67">
          <edit xsi:type="exercise:StringEdit" storedString="package patterns.observable;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collections;&#xA;import java.util.List;&#xA;&#xA;public class HighscoreList {&#xA;&#x9;&#xA;&#x9;private int maxSize;&#xA;&#x9;private List&lt;HighscoreListListener> listeners = new ArrayList&lt;>();&#xA;&#x9;private List&lt;Integer> highscoreList = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;HighscoreList(int maxSize) {&#xA;&#x9;&#x9;this.maxSize = maxSize;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addHighscoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (!listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.add(listener);&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void removeHighscoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.remove(listener);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int size() {&#xA;&#x9;&#x9;return highscoreList.size();&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int getElement(int element) {&#xA;&#x9;&#x9;if (highscoreList.isEmpty()) {&#xA;&#x9;&#x9;&#x9;return 0;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return highscoreList.get(element);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addResult(Integer result) {&#xA;&#x9;&#x9;//Returns if the result isn't good enough to be on the list&#xA;&#x9;&#x9;if (result >= this.getElement(highscoreList.size()-1) &amp;&amp; !highscoreList.isEmpty()) {&#xA;&#x9;&#x9;&#x9;return;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (highscoreList.size() >= maxSize) {&#xA;&#x9;&#x9;&#x9;highscoreList.remove(highscoreList.size()-1);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;highscoreList.add(result);&#xA;&#x9;&#x9;Collections.sort(highscoreList);&#xA;&#x9;&#x9;fireChangeEvent(highscoreList.indexOf(result));&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;private void fireChangeEvent(int position) {&#xA;&#x9;&#x9;for (HighscoreListListener listener : listeners) {&#xA;&#x9;&#x9;&#x9;listener.listChanged(this, position);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;HighscoreList list = new HighscoreList(2);&#xA;&#x9;&#x9;list.addResult(2);&#xA;&#x9;&#x9;System.out.println(list.getElement(0));&#xA;&#x9;&#x9;list.addResult(5);&#xA;&#x9;&#x9;System.out.println(list.getElement(1));&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457904095278" sizeMeasure="68" errorCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package patterns.observable;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collections;&#xA;import java.util.List;&#xA;&#xA;public class HighscoreList {&#xA;&#x9;&#xA;&#x9;private int maxSize;&#xA;&#x9;private List&lt;HighscoreListListener> listeners = new ArrayList&lt;>();&#xA;&#x9;private List&lt;Integer> highscoreList = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;HighscoreList(int maxSize) {&#xA;&#x9;&#x9;this.maxSize = maxSize;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addHighscoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (!listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.add(listener);&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void removeHighscoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.remove(listener);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int size() {&#xA;&#x9;&#x9;return highscoreList.size();&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int getElement(int element) {&#xA;&#x9;&#x9;if (highscoreList.isEmpty()) {&#xA;&#x9;&#x9;&#x9;return 0;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return highscoreList.get(element);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addResult(Integer result) {&#xA;&#x9;&#x9;//Returns if the result isn't good enough to be on the list&#xA;&#x9;&#x9;if (result >= this.getElement(highscoreList.size()-1) &amp;&amp; &#xA;&#x9;&#x9;&#x9;&#x9;!highscoreList.isEmpty() &amp;&amp; ) {&#xA;&#x9;&#x9;&#x9;return;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (highscoreList.size() >= maxSize) {&#xA;&#x9;&#x9;&#x9;highscoreList.remove(highscoreList.size()-1);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;highscoreList.add(result);&#xA;&#x9;&#x9;Collections.sort(highscoreList);&#xA;&#x9;&#x9;fireChangeEvent(highscoreList.indexOf(result));&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;private void fireChangeEvent(int position) {&#xA;&#x9;&#x9;for (HighscoreListListener listener : listeners) {&#xA;&#x9;&#x9;&#x9;listener.listChanged(this, position);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;HighscoreList list = new HighscoreList(2);&#xA;&#x9;&#x9;list.addResult(2);&#xA;&#x9;&#x9;System.out.println(list.getElement(0));&#xA;&#x9;&#x9;list.addResult(5);&#xA;&#x9;&#x9;System.out.println(list.getElement(1));&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457904116168" sizeMeasure="68">
          <edit xsi:type="exercise:StringEdit" storedString="package patterns.observable;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collections;&#xA;import java.util.List;&#xA;&#xA;public class HighscoreList {&#xA;&#x9;&#xA;&#x9;private int maxSize;&#xA;&#x9;private List&lt;HighscoreListListener> listeners = new ArrayList&lt;>();&#xA;&#x9;private List&lt;Integer> highscoreList = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;HighscoreList(int maxSize) {&#xA;&#x9;&#x9;this.maxSize = maxSize;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addHighscoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (!listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.add(listener);&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void removeHighscoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.remove(listener);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int size() {&#xA;&#x9;&#x9;return highscoreList.size();&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int getElement(int element) {&#xA;&#x9;&#x9;if (highscoreList.isEmpty()) {&#xA;&#x9;&#x9;&#x9;return 0;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return highscoreList.get(element);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addResult(Integer result) {&#xA;&#x9;&#x9;//Returns if the result isn't good enough to be on the list&#xA;&#x9;&#x9;if (result >= this.getElement(highscoreList.size()-1) &amp;&amp; &#xA;&#x9;&#x9;&#x9;&#x9;!highscoreList.isEmpty() &amp;&amp; highscoreList.size()&lt;maxSize) {&#xA;&#x9;&#x9;&#x9;return;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (highscoreList.size() >= maxSize) {&#xA;&#x9;&#x9;&#x9;highscoreList.remove(highscoreList.size()-1);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;highscoreList.add(result);&#xA;&#x9;&#x9;Collections.sort(highscoreList);&#xA;&#x9;&#x9;fireChangeEvent(highscoreList.indexOf(result));&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;private void fireChangeEvent(int position) {&#xA;&#x9;&#x9;for (HighscoreListListener listener : listeners) {&#xA;&#x9;&#x9;&#x9;listener.listChanged(this, position);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;HighscoreList list = new HighscoreList(2);&#xA;&#x9;&#x9;list.addResult(2);&#xA;&#x9;&#x9;System.out.println(list.getElement(0));&#xA;&#x9;&#x9;list.addResult(5);&#xA;&#x9;&#x9;System.out.println(list.getElement(1));&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457904300895" sizeMeasure="68" errorCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package patterns.observable;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collections;&#xA;import java.util.List;&#xA;&#xA;public class HighscoreList {&#xA;&#x9;&#xA;&#x9;private int maxSize;&#xA;&#x9;private List&lt;HighscoreListListener> listeners = new ArrayList&lt;>();&#xA;&#x9;private List&lt;Integer> highscoreList = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;HighscoreList(int maxSize) {&#xA;&#x9;&#x9;this.maxSize = maxSize;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addHighscoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (!listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.add(listener);&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void removeHighscoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.remove(listener);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int size() {&#xA;&#x9;&#x9;return highscoreList.size();&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int getElement(int element) {&#xA;&#x9;&#x9;if (highscoreList.isEmpty()) {&#xA;&#x9;&#x9;&#x9;return 0;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return highscoreList.get(element);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addResult(Integer result) {&#xA;&#x9;&#x9;//Returns if the result isn't good enough to be on the list&#xA;&#x9;&#x9;if (result >= this.getElement(highscoreList.size()-1) &amp;&amp; &#xA;&#x9;&#x9;&#x9;&#x9;!highscoreList.isEmpty() &amp;&amp; highscoreList.size>=maxSize) {&#xA;&#x9;&#x9;&#x9;return;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (highscoreList.size() >= maxSize) {&#xA;&#x9;&#x9;&#x9;highscoreList.remove(highscoreList.size()-1);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;highscoreList.add(result);&#xA;&#x9;&#x9;Collections.sort(highscoreList);&#xA;&#x9;&#x9;fireChangeEvent(highscoreList.indexOf(result));&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;private void fireChangeEvent(int position) {&#xA;&#x9;&#x9;for (HighscoreListListener listener : listeners) {&#xA;&#x9;&#x9;&#x9;listener.listChanged(this, position);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;HighscoreList list = new HighscoreList(2);&#xA;&#x9;&#x9;list.addResult(2);&#xA;&#x9;&#x9;System.out.println(list.getElement(0));&#xA;&#x9;&#x9;list.addResult(5);&#xA;&#x9;&#x9;System.out.println(list.getElement(1));&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457904303799" sizeMeasure="68">
          <edit xsi:type="exercise:StringEdit" storedString="package patterns.observable;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collections;&#xA;import java.util.List;&#xA;&#xA;public class HighscoreList {&#xA;&#x9;&#xA;&#x9;private int maxSize;&#xA;&#x9;private List&lt;HighscoreListListener> listeners = new ArrayList&lt;>();&#xA;&#x9;private List&lt;Integer> highscoreList = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;HighscoreList(int maxSize) {&#xA;&#x9;&#x9;this.maxSize = maxSize;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addHighscoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (!listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.add(listener);&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void removeHighscoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.remove(listener);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int size() {&#xA;&#x9;&#x9;return highscoreList.size();&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int getElement(int element) {&#xA;&#x9;&#x9;if (highscoreList.isEmpty()) {&#xA;&#x9;&#x9;&#x9;return 0;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return highscoreList.get(element);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addResult(Integer result) {&#xA;&#x9;&#x9;//Returns if the result isn't good enough to be on the list&#xA;&#x9;&#x9;if (result >= this.getElement(highscoreList.size()-1) &amp;&amp; &#xA;&#x9;&#x9;&#x9;&#x9;!highscoreList.isEmpty() &amp;&amp; highscoreList.size()>=maxSize) {&#xA;&#x9;&#x9;&#x9;return;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (highscoreList.size() >= maxSize) {&#xA;&#x9;&#x9;&#x9;highscoreList.remove(highscoreList.size()-1);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;highscoreList.add(result);&#xA;&#x9;&#x9;Collections.sort(highscoreList);&#xA;&#x9;&#x9;fireChangeEvent(highscoreList.indexOf(result));&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;private void fireChangeEvent(int position) {&#xA;&#x9;&#x9;for (HighscoreListListener listener : listeners) {&#xA;&#x9;&#x9;&#x9;listener.listChanged(this, position);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;HighscoreList list = new HighscoreList(2);&#xA;&#x9;&#x9;list.addResult(2);&#xA;&#x9;&#x9;System.out.println(list.getElement(0));&#xA;&#x9;&#x9;list.addResult(5);&#xA;&#x9;&#x9;System.out.println(list.getElement(1));&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457905176166" sizeMeasure="68">
          <edit xsi:type="exercise:StringEdit" storedString="package patterns.observable;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collections;&#xA;import java.util.List;&#xA;&#xA;public class HighscoreList {&#xA;&#x9;&#xA;&#x9;private int maxSize;&#xA;&#x9;private List&lt;HighscoreListListener> listeners = new ArrayList&lt;>();&#xA;&#x9;private List&lt;Integer> highscoreList = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;HighscoreList(int maxSize) {&#xA;&#x9;&#x9;this.maxSize = maxSize;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addHighscoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (!listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.add(listener);&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void removeHighscoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.remove(listener);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int size() {&#xA;&#x9;&#x9;return highscoreList.size();&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int getElement(int element) {&#xA;&#x9;&#x9;if (highscoreList.isEmpty()) {&#xA;&#x9;&#x9;&#x9;return 0;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return highscoreList.get(element);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addResult(Integer result) {&#xA;&#x9;&#x9;//Returns if the result isn't good enough to be on the list&#xA;&#x9;&#x9;if (result >= this.getElement(highscoreList.size()-1) &amp;&amp; &#xA;&#x9;&#x9;&#x9;&#x9;!highscoreList.isEmpty() &amp;&amp; highscoreList.size() == maxSize) {&#xA;&#x9;&#x9;&#x9;return;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (highscoreList.size() >= maxSize) {&#xA;&#x9;&#x9;&#x9;highscoreList.remove(highscoreList.size()-1);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;highscoreList.add(result);&#xA;&#x9;&#x9;Collections.sort(highscoreList);&#xA;&#x9;&#x9;fireChangeEvent(highscoreList.indexOf(result));&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;private void fireChangeEvent(int position) {&#xA;&#x9;&#x9;for (HighscoreListListener listener : listeners) {&#xA;&#x9;&#x9;&#x9;listener.listChanged(this, position);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;HighscoreList list = new HighscoreList(2);&#xA;&#x9;&#x9;list.addResult(2);&#xA;&#x9;&#x9;System.out.println(list.getElement(0));&#xA;&#x9;&#x9;list.addResult(5);&#xA;&#x9;&#x9;System.out.println(list.getElement(1));&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457955780429" sizeMeasure="68">
          <edit xsi:type="exercise:StringEdit" storedString="package patterns.observable;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collections;&#xA;import java.util.List;&#xA;&#xA;public class HighscoreList {&#xA;&#x9;&#xA;&#x9;private int maxSize;&#xA;&#x9;private List&lt;HighscoreListListener> listeners = new ArrayList&lt;>();&#xA;&#x9;private List&lt;Integer> highscoreList = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;HighscoreList(int maxSize) {&#xA;&#x9;&#x9;this.maxSize = maxSize;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addHighscoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (!listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.add(listener);&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void removeHighscoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.remove(listener);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int size() {&#xA;&#x9;&#x9;return highscoreList.size();&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int getElement(int element) {&#xA;&#x9;&#x9;if (highscoreList.isEmpty()) {&#xA;&#x9;&#x9;&#x9;return 0;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return highscoreList.get(element);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addResult(Integer result) {&#xA;&#x9;&#x9;//Returns if the result isn't good enough to be on the list&#xA;&#x9;&#x9;if (result >= this.getElement(highscoreList.size()-1) &amp;&amp; &#xA;&#x9;&#x9;&#x9;&#x9;!highscoreList.isEmpty() &amp;&amp; highscoreList.size() == maxSize) {&#xA;&#x9;&#x9;&#x9;return;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (highscoreList.size() >= maxSize) {&#xA;&#x9;&#x9;&#x9;highscoreList.remove(highscoreList.size()-1);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;highscoreList.add(result);&#xA;&#x9;&#x9;Collections.sort(highscoreList);&#xA;&#x9;&#x9;fireChangeEvent(highscoreList.indexOf(result));&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;private void fireChangeEvent(int position) {&#xA;&#x9;&#x9;for (HighscoreListListener listener : listeners) {&#xA;&#x9;&#x9;&#x9;listener.listChanged(this, position);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;HighscoreList list = new HighscoreList(2);&#xA;&#x9;&#x9;list.addResult(2);&#xA;&#x9;&#x9;System.out.println(list.getElement(0));&#xA;&#x9;&#x9;list.addResult(5);&#xA;&#x9;&#x9;System.out.println(list.getElement(1));&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457955931560" sizeMeasure="71">
          <edit xsi:type="exercise:StringEdit" storedString="package patterns.observable;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collections;&#xA;import java.util.List;&#xA;&#xA;public class HighscoreList {&#xA;&#x9;&#xA;&#x9;private int maxSize;&#xA;&#x9;private List&lt;HighscoreListListener> listeners = new ArrayList&lt;>();&#xA;&#x9;private List&lt;Integer> highscoreList = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;HighscoreList(int maxSize) {&#xA;&#x9;&#x9;this.maxSize = maxSize;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addHighscoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (!listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.add(listener);&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void removeHighscoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.remove(listener);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int size() {&#xA;&#x9;&#x9;return highscoreList.size();&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int getElement(int element) {&#xA;&#x9;&#x9;if (highscoreList.size()-1 &lt; element) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;That element doesn't exist.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (highscoreList.isEmpty()) {&#xA;&#x9;&#x9;&#x9;return 0;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return highscoreList.get(element);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addResult(Integer result) {&#xA;&#x9;&#x9;//Returns if the result isn't good enough to be on the list&#xA;&#x9;&#x9;if (result >= this.getElement(highscoreList.size()-1) &amp;&amp; &#xA;&#x9;&#x9;&#x9;&#x9;!highscoreList.isEmpty() &amp;&amp; highscoreList.size() == maxSize) {&#xA;&#x9;&#x9;&#x9;return;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (highscoreList.size() >= maxSize) {&#xA;&#x9;&#x9;&#x9;highscoreList.remove(highscoreList.size()-1);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;highscoreList.add(result);&#xA;&#x9;&#x9;Collections.sort(highscoreList);&#xA;&#x9;&#x9;fireChangeEvent(highscoreList.indexOf(result));&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;private void fireChangeEvent(int position) {&#xA;&#x9;&#x9;for (HighscoreListListener listener : listeners) {&#xA;&#x9;&#x9;&#x9;listener.listChanged(this, position);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;HighscoreList list = new HighscoreList(2);&#xA;&#x9;&#x9;list.addResult(2);&#xA;&#x9;&#x9;System.out.println(list.getElement(0));&#xA;&#x9;&#x9;list.addResult(5);&#xA;&#x9;&#x9;System.out.println(list.getElement(1));&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457955936869" sizeMeasure="71">
          <edit xsi:type="exercise:StringEdit" storedString="package patterns.observable;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collections;&#xA;import java.util.List;&#xA;&#xA;public class HighscoreList {&#xA;&#x9;&#xA;&#x9;private int maxSize;&#xA;&#x9;private List&lt;HighscoreListListener> listeners = new ArrayList&lt;>();&#xA;&#x9;private List&lt;Integer> highscoreList = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;HighscoreList(int maxSize) {&#xA;&#x9;&#x9;this.maxSize = maxSize;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addHighscoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (!listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.add(listener);&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void removeHighscoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.remove(listener);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int size() {&#xA;&#x9;&#x9;return highscoreList.size();&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int getElement(int element) {&#xA;&#x9;&#x9;if (highscoreList.size()-1 &lt; element) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;That element doesn't exist.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else if (highscoreList.isEmpty()) {&#xA;&#x9;&#x9;&#x9;return 0;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return highscoreList.get(element);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addResult(Integer result) {&#xA;&#x9;&#x9;//Returns if the result isn't good enough to be on the list&#xA;&#x9;&#x9;if (result >= this.getElement(highscoreList.size()-1) &amp;&amp; &#xA;&#x9;&#x9;&#x9;&#x9;!highscoreList.isEmpty() &amp;&amp; highscoreList.size() == maxSize) {&#xA;&#x9;&#x9;&#x9;return;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (highscoreList.size() >= maxSize) {&#xA;&#x9;&#x9;&#x9;highscoreList.remove(highscoreList.size()-1);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;highscoreList.add(result);&#xA;&#x9;&#x9;Collections.sort(highscoreList);&#xA;&#x9;&#x9;fireChangeEvent(highscoreList.indexOf(result));&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;private void fireChangeEvent(int position) {&#xA;&#x9;&#x9;for (HighscoreListListener listener : listeners) {&#xA;&#x9;&#x9;&#x9;listener.listChanged(this, position);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;HighscoreList list = new HighscoreList(2);&#xA;&#x9;&#x9;list.addResult(2);&#xA;&#x9;&#x9;System.out.println(list.getElement(0));&#xA;&#x9;&#x9;list.addResult(5);&#xA;&#x9;&#x9;System.out.println(list.getElement(1));&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457956056158" sizeMeasure="70">
          <edit xsi:type="exercise:StringEdit" storedString="package patterns.observable;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collections;&#xA;import java.util.List;&#xA;&#xA;public class HighscoreList {&#xA;&#x9;&#xA;&#x9;private int maxSize;&#xA;&#x9;private List&lt;HighscoreListListener> listeners = new ArrayList&lt;>();&#xA;&#x9;private List&lt;Integer> highscoreList = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;HighscoreList(int maxSize) {&#xA;&#x9;&#x9;this.maxSize = maxSize;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addHighscoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (!listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.add(listener);&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void removeHighscoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.remove(listener);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int size() {&#xA;&#x9;&#x9;return highscoreList.size();&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int getElement(int element) {&#xA;&#x9;&#x9;if (highscoreList.size()-1 &lt; element) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;That element doesn't exist.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else if (highscoreList.isEmpty()) {&#xA;&#x9;&#x9;&#x9;return 0;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return highscoreList.get(element);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addResult(Integer result) {&#xA;&#x9;&#x9;//Returns if the result isn't good enough to be on the list&#xA;&#x9;&#x9;if (result >= this.getElement(highscoreList.size()-1) &amp;&amp; highscoreList.size() == maxSize) {&#xA;&#x9;&#x9;&#x9;return;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (highscoreList.size() >= maxSize) {&#xA;&#x9;&#x9;&#x9;highscoreList.remove(highscoreList.size()-1);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;highscoreList.add(result);&#xA;&#x9;&#x9;Collections.sort(highscoreList);&#xA;&#x9;&#x9;fireChangeEvent(highscoreList.indexOf(result));&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;private void fireChangeEvent(int position) {&#xA;&#x9;&#x9;for (HighscoreListListener listener : listeners) {&#xA;&#x9;&#x9;&#x9;listener.listChanged(this, position);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;HighscoreList list = new HighscoreList(2);&#xA;&#x9;&#x9;list.addResult(2);&#xA;&#x9;&#x9;System.out.println(list.getElement(0));&#xA;&#x9;&#x9;list.addResult(5);&#xA;&#x9;&#x9;System.out.println(list.getElement(1));&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457956217573" sizeMeasure="70">
          <edit xsi:type="exercise:StringEdit" storedString="package patterns.observable;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collections;&#xA;import java.util.List;&#xA;&#xA;public class HighscoreList {&#xA;&#x9;&#xA;&#x9;private int maxSize;&#xA;&#x9;private List&lt;HighscoreListListener> listeners = new ArrayList&lt;>();&#xA;&#x9;private List&lt;Integer> highscoreList = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;HighscoreList(int maxSize) {&#xA;&#x9;&#x9;this.maxSize = maxSize;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addHighscoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (!listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.add(listener);&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void removeHighscoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.remove(listener);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int size() {&#xA;&#x9;&#x9;return highscoreList.size();&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int getElement(int element) {&#xA;&#x9;&#x9;if (highscoreList.size()-1 &lt; element) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;That element doesn't exist.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else if (highscoreList.isEmpty()) {&#xA;&#x9;&#x9;&#x9;return 0;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return highscoreList.get(element);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addResult(Integer result) {&#xA;&#x9;&#x9;//Returns if the result isn't good enough to be on the list&#xA;&#x9;&#x9;if (result >= this.getElement(highscoreList.size()-1) &amp;&amp; highscoreList.size() == maxSize) {&#xA;&#x9;&#x9;&#x9;return;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (highscoreList.size() >= maxSize) {&#xA;&#x9;&#x9;&#x9;highscoreList.remove(highscoreList.size()-1);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;highscoreList.add(result);&#xA;&#x9;&#x9;Collections.sort(highscoreList);&#xA;&#x9;&#x9;fireChangeEvent(highscoreList.indexOf(result)+1);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;private void fireChangeEvent(int position) {&#xA;&#x9;&#x9;for (HighscoreListListener listener : listeners) {&#xA;&#x9;&#x9;&#x9;listener.listChanged(this, position);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;HighscoreList list = new HighscoreList(2);&#xA;&#x9;&#x9;list.addResult(2);&#xA;&#x9;&#x9;System.out.println(list.getElement(0));&#xA;&#x9;&#x9;list.addResult(5);&#xA;&#x9;&#x9;System.out.println(list.getElement(1));&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457956229767" sizeMeasure="70">
          <edit xsi:type="exercise:StringEdit" storedString="package patterns.observable;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collections;&#xA;import java.util.List;&#xA;&#xA;public class HighscoreList {&#xA;&#x9;&#xA;&#x9;private int maxSize;&#xA;&#x9;private List&lt;HighscoreListListener> listeners = new ArrayList&lt;>();&#xA;&#x9;private List&lt;Integer> highscoreList = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;HighscoreList(int maxSize) {&#xA;&#x9;&#x9;this.maxSize = maxSize;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addHighscoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (!listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.add(listener);&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void removeHighscoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.remove(listener);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int size() {&#xA;&#x9;&#x9;return highscoreList.size();&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int getElement(int element) {&#xA;&#x9;&#x9;if (highscoreList.size()-1 &lt; element) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;That element doesn't exist.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else if (highscoreList.isEmpty()) {&#xA;&#x9;&#x9;&#x9;return 0;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return highscoreList.get(element);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addResult(Integer result) {&#xA;&#x9;&#x9;//Returns if the result isn't good enough to be on the list&#xA;&#x9;&#x9;if (result >= this.getElement(highscoreList.size()-1) &amp;&amp; highscoreList.size() == maxSize) {&#xA;&#x9;&#x9;&#x9;return;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (highscoreList.size() >= maxSize) {&#xA;&#x9;&#x9;&#x9;highscoreList.remove(highscoreList.size()-1);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;highscoreList.add(result);&#xA;&#x9;&#x9;Collections.sort(highscoreList);&#xA;&#x9;&#x9;fireChangeEvent(highscoreList.indexOf(result));&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;private void fireChangeEvent(int position) {&#xA;&#x9;&#x9;for (HighscoreListListener listener : listeners) {&#xA;&#x9;&#x9;&#x9;listener.listChanged(this, position);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;HighscoreList list = new HighscoreList(2);&#xA;&#x9;&#x9;list.addResult(2);&#xA;&#x9;&#x9;System.out.println(list.getElement(0));&#xA;&#x9;&#x9;list.addResult(5);&#xA;&#x9;&#x9;System.out.println(list.getElement(1));&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457956309893" sizeMeasure="70">
          <edit xsi:type="exercise:StringEdit" storedString="package patterns.observable;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collections;&#xA;import java.util.List;&#xA;&#xA;public class HighscoreList {&#xA;&#x9;&#xA;&#x9;private int maxSize;&#xA;&#x9;private List&lt;HighscoreListListener> listeners = new ArrayList&lt;>();&#xA;&#x9;private List&lt;Integer> highscoreList = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;HighscoreList(int maxSize) {&#xA;&#x9;&#x9;this.maxSize = maxSize;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addHighscoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (!listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.add(listener);&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void removeHighscoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.remove(listener);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int size() {&#xA;&#x9;&#x9;return highscoreList.size();&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int getElement(int element) {&#xA;&#x9;&#x9;if (highscoreList.size()-1 &lt; element) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;That element doesn't exist.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else if (highscoreList.isEmpty()) {&#xA;&#x9;&#x9;&#x9;return 0;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return highscoreList.get(element);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addResult(Integer result) {&#xA;&#x9;&#x9;//Returns if the result isn't good enough to be on the list&#xA;&#x9;&#x9;if (result >= this.getElement(highscoreList.size()-1) &amp;&amp; highscoreList.size() == maxSize) {&#xA;&#x9;&#x9;&#x9;return;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (highscoreList.size() >= maxSize) {&#xA;&#x9;&#x9;&#x9;highscoreList.remove(highscoreList.size()-1);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;highscoreList.add(result);&#xA;&#x9;&#x9;Collections.sort(highscoreList);&#xA;&#x9;&#x9;fireChangeEvent(highscoreList.indexOf(result));&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;private void fireChangeEvent(int position) {&#xA;&#x9;&#x9;for (HighscoreListListener listener : listeners) {&#xA;&#x9;&#x9;&#x9;listener.listChanged(this, position);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;HighscoreList list = new HighscoreList(2);&#xA;&#x9;&#x9;list.addResult(2);&#xA;&#x9;&#x9;System.out.println(list.getElement(0));&#xA;&#x9;&#x9;list.addResult(5);&#xA;&#x9;&#x9;System.out.println(list.getElement(1));&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457956372821" sizeMeasure="70">
          <edit xsi:type="exercise:StringEdit" storedString="package patterns.observable;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collections;&#xA;import java.util.List;&#xA;&#xA;public class HighscoreList {&#xA;&#x9;&#xA;&#x9;private int maxSize;&#xA;&#x9;private List&lt;HighscoreListListener> listeners = new ArrayList&lt;>();&#xA;&#x9;private List&lt;Integer> highscoreList = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;HighscoreList(int maxSize) {&#xA;&#x9;&#x9;this.maxSize = maxSize;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addHighscoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (!listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.add(listener);&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void removeHighscoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.remove(listener);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int size() {&#xA;&#x9;&#x9;return highscoreList.size();&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int getElement(int element) {&#xA;&#x9;&#x9;if (highscoreList.size()-1 &lt; element) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;That element doesn't exist.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else if (highscoreList.isEmpty()) {&#xA;&#x9;&#x9;&#x9;return 0;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return highscoreList.get(element);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addResult(Integer result) {&#xA;&#x9;&#x9;//Returns if the result isn't good enough to be on the list&#xA;&#x9;&#x9;if (result >= this.getElement(highscoreList.size()-1) &amp;&amp; highscoreList.size() == maxSize) {&#xA;&#x9;&#x9;&#x9;return;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (highscoreList.size() >= maxSize) {&#xA;&#x9;&#x9;&#x9;highscoreList.remove(highscoreList.size()-1);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;highscoreList.add(result);&#xA;&#x9;&#x9;Collections.sort(highscoreList);&#xA;&#x9;&#x9;fireChangeEvent(highscoreList.indexOf(result)+1);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;private void fireChangeEvent(int position) {&#xA;&#x9;&#x9;for (HighscoreListListener listener : listeners) {&#xA;&#x9;&#x9;&#x9;listener.listChanged(this, position);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;HighscoreList list = new HighscoreList(2);&#xA;&#x9;&#x9;list.addResult(2);&#xA;&#x9;&#x9;System.out.println(list.getElement(0));&#xA;&#x9;&#x9;list.addResult(5);&#xA;&#x9;&#x9;System.out.println(list.getElement(1));&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457957477329" sizeMeasure="70">
          <edit xsi:type="exercise:StringEdit" storedString="package patterns.observable;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collections;&#xA;import java.util.List;&#xA;&#xA;public class HighscoreList {&#xA;&#x9;&#xA;&#x9;private int maxSize;&#xA;&#x9;private List&lt;HighscoreListListener> listeners = new ArrayList&lt;>();&#xA;&#x9;private List&lt;Integer> highscoreList = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;HighscoreList(int maxSize) {&#xA;&#x9;&#x9;this.maxSize = maxSize;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addHighscoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (!listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.add(listener);&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void removeHighscoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.remove(listener);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int size() {&#xA;&#x9;&#x9;return highscoreList.size();&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int getElement(int element) {&#xA;&#x9;&#x9;if (highscoreList.size()-1 &lt; element) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;That element doesn't exist.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else if (highscoreList.isEmpty()) {&#xA;&#x9;&#x9;&#x9;return 0;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return highscoreList.get(element);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addResult(Integer result) {&#xA;&#x9;&#x9;//Returns if the result isn't good enough to be on the list&#xA;&#x9;&#x9;if (result >= this.getElement(highscoreList.size()-1) &amp;&amp; highscoreList.size() == maxSize) {&#xA;&#x9;&#x9;&#x9;return;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (highscoreList.size() >= maxSize) {&#xA;&#x9;&#x9;&#x9;highscoreList.remove(highscoreList.size()-1);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;highscoreList.add(result);&#xA;&#x9;&#x9;Collections.sort(highscoreList);&#xA;&#x9;&#x9;fireChangeEvent(highscoreList.indexOf(result));&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;private void fireChangeEvent(int position) {&#xA;&#x9;&#x9;for (HighscoreListListener listener : listeners) {&#xA;&#x9;&#x9;&#x9;listener.listChanged(this, position);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;HighscoreList list = new HighscoreList(2);&#xA;&#x9;&#x9;list.addResult(2);&#xA;&#x9;&#x9;System.out.println(list.getElement(0));&#xA;&#x9;&#x9;list.addResult(5);&#xA;&#x9;&#x9;System.out.println(list.getElement(1));&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457957979205" sizeMeasure="70" errorCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package patterns.observable;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collections;&#xA;import java.util.List;&#xA;&#xA;public class HighscoreList {&#xA;&#x9;&#xA;&#x9;private int maxSize;&#xA;&#x9;private List&lt;HighscoreListListener> listeners = new ArrayList&lt;>();&#xA;&#x9;private List&lt;Integer> highscoreList = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;HighscoreList(int maxSize) {&#xA;&#x9;&#x9;this.maxSize = maxSize;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addHighscoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (!listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.add(listener);&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void removeHighscoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.remove(listener);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int size() {&#xA;&#x9;&#x9;return highscoreList.size();&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int getElement(int element) {&#xA;&#x9;&#x9;if (highscoreList.size()-1 &lt; element) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;That element doesn't exist.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else if (highscoreList.isEmpty()) {&#xA;&#x9;&#x9;&#x9;return 0;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return highscoreList.get(element);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addResult(Integer result) {&#xA;&#x9;&#x9;//Returns if the result isn't good enough to be on the list&#xA;&#x9;&#x9;if (result >= this.getElement(highscoreList.size()-1) &amp;&amp; highscoreList.size() == maxSize) {&#xA;&#x9;&#x9;&#x9;return;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (highscoreList.size() >= maxSize) {&#xA;&#x9;&#x9;&#x9;highscoreList.remove(highscoreList.size()-1);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;highscoreList.add(result);&#xA;&#x9;&#x9;Collections.sort(highscoreList);&#xA;&#x9;&#x9;fireChangeEvent(highscoreList.lastindexOf(result));&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;private void fireChangeEvent(int position) {&#xA;&#x9;&#x9;for (HighscoreListListener listener : listeners) {&#xA;&#x9;&#x9;&#x9;listener.listChanged(this, position);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;HighscoreList list = new HighscoreList(2);&#xA;&#x9;&#x9;list.addResult(2);&#xA;&#x9;&#x9;System.out.println(list.getElement(0));&#xA;&#x9;&#x9;list.addResult(5);&#xA;&#x9;&#x9;System.out.println(list.getElement(1));&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457957981328" sizeMeasure="70">
          <edit xsi:type="exercise:StringEdit" storedString="package patterns.observable;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collections;&#xA;import java.util.List;&#xA;&#xA;public class HighscoreList {&#xA;&#x9;&#xA;&#x9;private int maxSize;&#xA;&#x9;private List&lt;HighscoreListListener> listeners = new ArrayList&lt;>();&#xA;&#x9;private List&lt;Integer> highscoreList = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;HighscoreList(int maxSize) {&#xA;&#x9;&#x9;this.maxSize = maxSize;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addHighscoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (!listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.add(listener);&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void removeHighscoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.remove(listener);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int size() {&#xA;&#x9;&#x9;return highscoreList.size();&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int getElement(int element) {&#xA;&#x9;&#x9;if (highscoreList.size()-1 &lt; element) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;That element doesn't exist.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else if (highscoreList.isEmpty()) {&#xA;&#x9;&#x9;&#x9;return 0;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return highscoreList.get(element);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addResult(Integer result) {&#xA;&#x9;&#x9;//Returns if the result isn't good enough to be on the list&#xA;&#x9;&#x9;if (result >= this.getElement(highscoreList.size()-1) &amp;&amp; highscoreList.size() == maxSize) {&#xA;&#x9;&#x9;&#x9;return;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (highscoreList.size() >= maxSize) {&#xA;&#x9;&#x9;&#x9;highscoreList.remove(highscoreList.size()-1);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;highscoreList.add(result);&#xA;&#x9;&#x9;Collections.sort(highscoreList);&#xA;&#x9;&#x9;fireChangeEvent(highscoreList.lastIndexOf(result));&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;private void fireChangeEvent(int position) {&#xA;&#x9;&#x9;for (HighscoreListListener listener : listeners) {&#xA;&#x9;&#x9;&#x9;listener.listChanged(this, position);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;HighscoreList list = new HighscoreList(2);&#xA;&#x9;&#x9;list.addResult(2);&#xA;&#x9;&#x9;System.out.println(list.getElement(0));&#xA;&#x9;&#x9;list.addResult(5);&#xA;&#x9;&#x9;System.out.println(list.getElement(1));&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457959960054" sizeMeasure="71">
          <edit xsi:type="exercise:StringEdit" storedString="package patterns.observable;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collections;&#xA;import java.util.List;&#xA;&#xA;public class HighscoreList {&#xA;&#x9;&#xA;&#x9;private int maxSize;&#xA;&#x9;private List&lt;HighscoreListListener> listeners = new ArrayList&lt;>();&#xA;&#x9;private List&lt;Integer> highscoreList = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;HighscoreList(int maxSize) {&#xA;&#x9;&#x9;this.maxSize = maxSize;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addHighscoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (!listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.add(listener);&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void removeHighscoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.remove(listener);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int size() {&#xA;&#x9;&#x9;return highscoreList.size();&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int getElement(int element) {&#xA;&#x9;&#x9;if (highscoreList.size()-1 &lt; element) {&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;That element doesn't exist.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else if (highscoreList.isEmpty()) {&#xA;&#x9;&#x9;&#x9;return 0;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return highscoreList.get(element);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addResult(Integer result) {&#xA;&#x9;&#x9;//Returns if the result isn't good enough to be on the list&#xA;&#x9;&#x9;if (result >= this.getElement(highscoreList.size()-1) &#xA;&#x9;&#x9;&#x9;&#x9;&amp;&amp; highscoreList.size() == maxSize) {&#xA;&#x9;&#x9;&#x9;return;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (highscoreList.size() >= maxSize) {&#xA;&#x9;&#x9;&#x9;highscoreList.remove(highscoreList.size()-1);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;highscoreList.add(result);&#xA;&#x9;&#x9;Collections.sort(highscoreList);&#xA;&#x9;&#x9;fireChangeEvent(highscoreList.lastIndexOf(result));&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;private void fireChangeEvent(int position) {&#xA;&#x9;&#x9;for (HighscoreListListener listener : listeners) {&#xA;&#x9;&#x9;&#x9;listener.listChanged(this, position);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;HighscoreList list = new HighscoreList(2);&#xA;&#x9;&#x9;list.addResult(2);&#xA;&#x9;&#x9;System.out.println(list.getElement(0));&#xA;&#x9;&#x9;list.addResult(5);&#xA;&#x9;&#x9;System.out.println(list.getElement(1));&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457959996844" sizeMeasure="73">
          <edit xsi:type="exercise:StringEdit" storedString="package patterns.observable;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collections;&#xA;import java.util.List;&#xA;&#xA;public class HighscoreList {&#xA;&#x9;&#xA;&#x9;private int maxSize;&#xA;&#x9;private List&lt;HighscoreListListener> listeners = new ArrayList&lt;>();&#xA;&#x9;private List&lt;Integer> highscoreList = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;HighscoreList(int maxSize) {&#xA;&#x9;&#x9;this.maxSize = maxSize;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addHighscoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (!listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.add(listener);&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void removeHighscoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.remove(listener);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int size() {&#xA;&#x9;&#x9;return highscoreList.size();&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int getElement(int element) {&#xA;&#x9;&#x9;if (highscoreList.size()-1 &lt; element) {&#xA;&#x9;&#x9;&#x9;//If the given element is too large for the list&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;That element doesn't exist.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else if (highscoreList.isEmpty()) {&#xA;&#x9;&#x9;&#x9;//If the list is empty&#xA;&#x9;&#x9;&#x9;return 0;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return highscoreList.get(element);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addResult(Integer result) {&#xA;&#x9;&#x9;//Returns if the result isn't good enough to be on the list&#xA;&#x9;&#x9;if (result >= this.getElement(highscoreList.size()-1) &#xA;&#x9;&#x9;&#x9;&#x9;&amp;&amp; highscoreList.size() == maxSize) {&#xA;&#x9;&#x9;&#x9;return;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (highscoreList.size() >= maxSize) {&#xA;&#x9;&#x9;&#x9;highscoreList.remove(highscoreList.size()-1);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;highscoreList.add(result);&#xA;&#x9;&#x9;Collections.sort(highscoreList);&#xA;&#x9;&#x9;fireChangeEvent(highscoreList.lastIndexOf(result));&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;private void fireChangeEvent(int position) {&#xA;&#x9;&#x9;for (HighscoreListListener listener : listeners) {&#xA;&#x9;&#x9;&#x9;listener.listChanged(this, position);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;HighscoreList list = new HighscoreList(2);&#xA;&#x9;&#x9;list.addResult(2);&#xA;&#x9;&#x9;System.out.println(list.getElement(0));&#xA;&#x9;&#x9;list.addResult(5);&#xA;&#x9;&#x9;System.out.println(list.getElement(1));&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457960021768" sizeMeasure="74">
          <edit xsi:type="exercise:StringEdit" storedString="package patterns.observable;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collections;&#xA;import java.util.List;&#xA;&#xA;public class HighscoreList {&#xA;&#x9;&#xA;&#x9;private int maxSize;&#xA;&#x9;private List&lt;HighscoreListListener> listeners = new ArrayList&lt;>();&#xA;&#x9;private List&lt;Integer> highscoreList = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;HighscoreList(int maxSize) {&#xA;&#x9;&#x9;this.maxSize = maxSize;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addHighscoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (!listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.add(listener);&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void removeHighscoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.remove(listener);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int size() {&#xA;&#x9;&#x9;return highscoreList.size();&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int getElement(int element) {&#xA;&#x9;&#x9;if (highscoreList.size()-1 &lt; element) {&#xA;&#x9;&#x9;&#x9;//If the given element is too large for the list&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;That element doesn't exist.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else if (highscoreList.isEmpty()) {&#xA;&#x9;&#x9;&#x9;//If the list is empty&#xA;&#x9;&#x9;&#x9;return 0;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return highscoreList.get(element);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addResult(Integer result) {&#xA;&#x9;&#x9;if (result >= this.getElement(highscoreList.size()-1) &#xA;&#x9;&#x9;&#x9;&#x9;//Returns if the result isn't good enough to be on the list&#xA;&#x9;&#x9;&#x9;&#x9;&amp;&amp; highscoreList.size() == maxSize) {&#xA;&#x9;&#x9;&#x9;return;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (highscoreList.size() >= maxSize) {&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;highscoreList.remove(highscoreList.size()-1);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;highscoreList.add(result);&#xA;&#x9;&#x9;Collections.sort(highscoreList);&#xA;&#x9;&#x9;fireChangeEvent(highscoreList.lastIndexOf(result));&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;private void fireChangeEvent(int position) {&#xA;&#x9;&#x9;for (HighscoreListListener listener : listeners) {&#xA;&#x9;&#x9;&#x9;listener.listChanged(this, position);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;HighscoreList list = new HighscoreList(2);&#xA;&#x9;&#x9;list.addResult(2);&#xA;&#x9;&#x9;System.out.println(list.getElement(0));&#xA;&#x9;&#x9;list.addResult(5);&#xA;&#x9;&#x9;System.out.println(list.getElement(1));&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457960026420" sizeMeasure="74">
          <edit xsi:type="exercise:StringEdit" storedString="package patterns.observable;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collections;&#xA;import java.util.List;&#xA;&#xA;public class HighscoreList {&#xA;&#x9;&#xA;&#x9;private int maxSize;&#xA;&#x9;private List&lt;HighscoreListListener> listeners = new ArrayList&lt;>();&#xA;&#x9;private List&lt;Integer> highscoreList = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;HighscoreList(int maxSize) {&#xA;&#x9;&#x9;this.maxSize = maxSize;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addHighscoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (!listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.add(listener);&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void removeHighscoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.remove(listener);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int size() {&#xA;&#x9;&#x9;return highscoreList.size();&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int getElement(int element) {&#xA;&#x9;&#x9;if (highscoreList.size()-1 &lt; element) {&#xA;&#x9;&#x9;&#x9;//If the given element is too large for the list&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;That element doesn't exist.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else if (highscoreList.isEmpty()) {&#xA;&#x9;&#x9;&#x9;//If the list is empty&#xA;&#x9;&#x9;&#x9;return 0;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return highscoreList.get(element);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addResult(Integer result) {&#xA;&#x9;&#x9;if (result >= this.getElement(highscoreList.size()-1) &#xA;&#x9;&#x9;&#x9;&#x9;&amp;&amp; highscoreList.size() == maxSize) {&#xA;&#x9;&#x9;&#x9;//Returns if the result isn't good enough to be on the list&#xA;&#x9;&#x9;&#x9;return;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (highscoreList.size() >= maxSize) {&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;highscoreList.remove(highscoreList.size()-1);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;highscoreList.add(result);&#xA;&#x9;&#x9;Collections.sort(highscoreList);&#xA;&#x9;&#x9;fireChangeEvent(highscoreList.lastIndexOf(result));&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;private void fireChangeEvent(int position) {&#xA;&#x9;&#x9;for (HighscoreListListener listener : listeners) {&#xA;&#x9;&#x9;&#x9;listener.listChanged(this, position);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;HighscoreList list = new HighscoreList(2);&#xA;&#x9;&#x9;list.addResult(2);&#xA;&#x9;&#x9;System.out.println(list.getElement(0));&#xA;&#x9;&#x9;list.addResult(5);&#xA;&#x9;&#x9;System.out.println(list.getElement(1));&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457960044684" sizeMeasure="74">
          <edit xsi:type="exercise:StringEdit" storedString="package patterns.observable;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collections;&#xA;import java.util.List;&#xA;&#xA;public class HighscoreList {&#xA;&#x9;&#xA;&#x9;private int maxSize;&#xA;&#x9;private List&lt;HighscoreListListener> listeners = new ArrayList&lt;>();&#xA;&#x9;private List&lt;Integer> highscoreList = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;HighscoreList(int maxSize) {&#xA;&#x9;&#x9;this.maxSize = maxSize;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addHighscoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (!listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.add(listener);&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void removeHighscoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.remove(listener);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int size() {&#xA;&#x9;&#x9;return highscoreList.size();&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int getElement(int element) {&#xA;&#x9;&#x9;if (highscoreList.size()-1 &lt; element) {&#xA;&#x9;&#x9;&#x9;//If the given element is too large for the list&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;That element doesn't exist.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else if (highscoreList.isEmpty()) {&#xA;&#x9;&#x9;&#x9;//If the list is empty&#xA;&#x9;&#x9;&#x9;return 0;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return highscoreList.get(element);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addResult(Integer result) {&#xA;&#x9;&#x9;if (result >= this.getElement(highscoreList.size()-1) &#xA;&#x9;&#x9;&#x9;&#x9;&amp;&amp; highscoreList.size() == maxSize) {&#xA;&#x9;&#x9;&#x9;//Returns if the result isn't good enough to be on the list&#xA;&#x9;&#x9;&#x9;return;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (highscoreList.size() >= maxSize) {&#xA;&#x9;&#x9;&#x9;//If the list is full, removes the last element&#xA;&#x9;&#x9;&#x9;highscoreList.remove(highscoreList.size()-1);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;highscoreList.add(result);&#xA;&#x9;&#x9;Collections.sort(highscoreList);&#xA;&#x9;&#x9;fireChangeEvent(highscoreList.lastIndexOf(result));&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;private void fireChangeEvent(int position) {&#xA;&#x9;&#x9;for (HighscoreListListener listener : listeners) {&#xA;&#x9;&#x9;&#x9;listener.listChanged(this, position);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;HighscoreList list = new HighscoreList(2);&#xA;&#x9;&#x9;list.addResult(2);&#xA;&#x9;&#x9;System.out.println(list.getElement(0));&#xA;&#x9;&#x9;list.addResult(5);&#xA;&#x9;&#x9;System.out.println(list.getElement(1));&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457960059294" sizeMeasure="75">
          <edit xsi:type="exercise:StringEdit" storedString="package patterns.observable;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collections;&#xA;import java.util.List;&#xA;&#xA;public class HighscoreList {&#xA;&#x9;&#xA;&#x9;private int maxSize;&#xA;&#x9;private List&lt;HighscoreListListener> listeners = new ArrayList&lt;>();&#xA;&#x9;private List&lt;Integer> highscoreList = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;HighscoreList(int maxSize) {&#xA;&#x9;&#x9;this.maxSize = maxSize;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addHighscoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (!listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.add(listener);&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void removeHighscoreListListener (HighscoreListListener listener) {&#xA;&#x9;&#x9;if (listeners.contains(listener)) {&#xA;&#x9;&#x9;&#x9;this.listeners.remove(listener);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int size() {&#xA;&#x9;&#x9;return highscoreList.size();&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;int getElement(int element) {&#xA;&#x9;&#x9;if (highscoreList.size()-1 &lt; element) {&#xA;&#x9;&#x9;&#x9;//If the given element is too large for the list&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;That element doesn't exist.&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else if (highscoreList.isEmpty()) {&#xA;&#x9;&#x9;&#x9;//If the list is empty&#xA;&#x9;&#x9;&#x9;return 0;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return highscoreList.get(element);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;void addResult(Integer result) {&#xA;&#x9;&#x9;if (result >= this.getElement(highscoreList.size()-1) &#xA;&#x9;&#x9;&#x9;&#x9;&amp;&amp; highscoreList.size() == maxSize) {&#xA;&#x9;&#x9;&#x9;//Returns if the result isn't good enough to be on the list&#xA;&#x9;&#x9;&#x9;return;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (highscoreList.size() >= maxSize) {&#xA;&#x9;&#x9;&#x9;//If the list is full, removes the last element&#xA;&#x9;&#x9;&#x9;highscoreList.remove(highscoreList.size()-1);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;highscoreList.add(result);&#xA;&#x9;&#x9;Collections.sort(highscoreList);&#xA;&#x9;&#x9;fireChangeEvent(highscoreList.lastIndexOf(result));&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;private void fireChangeEvent(int position) {&#xA;&#x9;&#x9;for (HighscoreListListener listener : listeners) {&#xA;&#x9;&#x9;&#x9;listener.listChanged(this, position);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;//For testing&#xA;&#x9;&#x9;HighscoreList list = new HighscoreList(2);&#xA;&#x9;&#x9;list.addResult(2);&#xA;&#x9;&#x9;System.out.println(list.getElement(0));&#xA;&#x9;&#x9;list.addResult(5);&#xA;&#x9;&#x9;System.out.println(list.getElement(1));&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
      </proposals>
      <proposals xsi:type="junit:JunitTestProposal" question="/0/@parts.1/@tasks.1/@q" answer="/0/@parts.1/@tasks.1/@a" completion="0.875">
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457899766802" completion="1.0" successCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457899767766" completion="0.0" errorCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457899769035" completion="0.0" errorCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457899770075" completion="0.0" errorCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457899771907" completion="0.0" errorCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457899772608" completion="0.0" errorCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457899773227" completion="0.0" errorCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457899793172" completion="0.0" errorCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457899793852" completion="0.0" errorCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457899797974" completion="0.0" errorCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457899798491" completion="0.0" errorCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457899800308" completion="0.0" errorCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457899801020" completion="0.0" errorCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457900059403" completion="0.0" errorCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457900060342" completion="0.0" errorCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457900061093" completion="0.0" errorCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457900061882" completion="0.0" errorCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457900062561" completion="0.0" errorCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457900063596" completion="0.0" errorCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457900076848" completion="0.0" errorCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457903647190" completion="0.0" failureCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457903647992" completion="0.0" failureCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457903648661" completion="0.0" failureCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457903649429" completion="0.0" failureCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457903650373" completion="0.0" failureCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457903651716" completion="0.0" failureCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457904974996" completion="1.0" successCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457904975929" completion="1.0" successCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457904976598" completion="1.0" successCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457904977216" completion="1.0" successCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457904978232" completion="1.0" successCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457904979313" completion="0.0" failureCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457904981207" completion="0.0" failureCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457905177782" completion="1.0" successCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457905178447" completion="1.0" successCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457956035509" completion="1.0" successCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457956037119" completion="1.0" successCount="2"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457956037729" completion="1.0" successCount="3"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457956038883" completion="1.0" successCount="4"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457956039494" completion="1.0" successCount="5"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457956040562" completion="1.0" successCount="6"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457956042663" completion="0.8571428571428571" successCount="6" failureCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457956063913" completion="0.875" successCount="7" failureCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457956064973" completion="0.8888888888888888" successCount="8" failureCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457956066050" completion="0.9" successCount="9" failureCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457956066903" completion="0.9090909090909091" successCount="10" failureCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457956067682" completion="0.9166666666666666" successCount="11" failureCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457956068539" completion="0.9230769230769231" successCount="12" failureCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457956195206" completion="0.8571428571428571" successCount="12" failureCount="2"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457956220624" completion="0.8666666666666667" successCount="13" failureCount="2"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457956232423" completion="0.8125" successCount="13" failureCount="3"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457956375896" completion="0.8235294117647058" successCount="14" failureCount="3"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457957458106" completion="0.8333333333333334" successCount="15" failureCount="3"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457957458750" completion="0.7894736842105263" successCount="15" failureCount="4"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457957459401" completion="0.75" successCount="15" failureCount="5"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457957460762" completion="0.7619047619047619" successCount="16" failureCount="5"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457957461889" completion="0.7727272727272727" successCount="17" failureCount="5"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457957462783" completion="0.782608695652174" successCount="18" failureCount="5"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457957463469" completion="0.7916666666666666" successCount="19" failureCount="5"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457957479942" completion="0.8" successCount="20" failureCount="5"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457957480999" completion="0.8076923076923077" successCount="21" failureCount="5"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457957483924" completion="0.7777777777777778" successCount="21" failureCount="6"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457957991587" completion="0.7857142857142857" successCount="22" failureCount="6"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457957994173" completion="0.7931034482758621" successCount="23" failureCount="6"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457957995442" completion="0.8" successCount="24" failureCount="6"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457957996610" completion="0.8064516129032258" successCount="25" failureCount="6"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457957997642" completion="0.8125" successCount="26" failureCount="6"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457957998637" completion="0.8181818181818182" successCount="27" failureCount="6"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457958040487" completion="0.8235294117647058" successCount="28" failureCount="6"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457958041075" completion="0.8285714285714286" successCount="29" failureCount="6"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457958041877" completion="0.8333333333333334" successCount="30" failureCount="6"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457958042818" completion="0.8378378378378378" successCount="31" failureCount="6"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457958043732" completion="0.8421052631578947" successCount="32" failureCount="6"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457958044803" completion="0.8461538461538461" successCount="33" failureCount="6"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457958045930" completion="0.85" successCount="34" failureCount="6"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457958211979" completion="0.8536585365853658" successCount="35" failureCount="6"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457958548449" completion="0.8571428571428571" successCount="36" failureCount="6"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457958549596" completion="0.8604651162790697" successCount="37" failureCount="6"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457958550159" completion="0.8636363636363636" successCount="38" failureCount="6"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457958551089" completion="0.8666666666666667" successCount="39" failureCount="6"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457958551872" completion="0.8695652173913043" successCount="40" failureCount="6"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457958553078" completion="0.8723404255319149" successCount="41" failureCount="6"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457958554046" completion="0.875" successCount="42" failureCount="6"/>
      </proposals>
    </proposals>
    <proposals exercisePart="/0/@parts.2">
      <proposals xsi:type="jdt:JdtSourceEditProposal" question="/0/@parts.2/@tasks.0/@q" answer="/0/@parts.2/@tasks.0/@a"/>
      <proposals xsi:type="junit:JunitTestProposal" question="/0/@parts.2/@tasks.1/@q" answer="/0/@parts.2/@tasks.1/@a"/>
      <proposals xsi:type="jdt:JdtSourceEditProposal" question="/0/@parts.2/@tasks.2/@q" answer="/0/@parts.2/@tasks.2/@a"/>
      <proposals xsi:type="junit:JunitTestProposal" question="/0/@parts.2/@tasks.3/@q" answer="/0/@parts.2/@tasks.3/@a"/>
    </proposals>
    <proposals exercisePart="/0/@parts.3">
      <proposals xsi:type="workbench:DebugEventProposal" question="/0/@parts.3/@tasks.0/@q" answer="/0/@parts.3/@tasks.0/@a" performedCount="8">
        <attempts timestamp="1457900431409"/>
        <attempts timestamp="1457900517390"/>
        <attempts timestamp="1457903090376"/>
        <attempts timestamp="1457903149007"/>
        <attempts timestamp="1457903447793"/>
        <attempts timestamp="1457903526999"/>
        <attempts timestamp="1457904128125"/>
        <attempts timestamp="1457904139797"/>
      </proposals>
      <proposals xsi:type="workbench:CommandExecutionProposal" question="/0/@parts.3/@tasks.1/@q" answer="/0/@parts.3/@tasks.1/@a"/>
      <proposals xsi:type="workbench:CommandExecutionProposal" question="/0/@parts.3/@tasks.2/@q" answer="/0/@parts.3/@tasks.2/@a" performedCount="42">
        <attempts timestamp="1457900436029"/>
        <attempts timestamp="1457900438655"/>
        <attempts timestamp="1457900441126"/>
        <attempts timestamp="1457900442461"/>
        <attempts timestamp="1457900443754"/>
        <attempts timestamp="1457900445955"/>
        <attempts timestamp="1457900448016"/>
        <attempts timestamp="1457900477438"/>
        <attempts timestamp="1457900509777"/>
        <attempts timestamp="1457900511552"/>
        <attempts timestamp="1457900517386"/>
        <attempts timestamp="1457903093226"/>
        <attempts timestamp="1457903093855"/>
        <attempts timestamp="1457903096004"/>
        <attempts timestamp="1457903096439"/>
        <attempts timestamp="1457903096940"/>
        <attempts timestamp="1457903097467"/>
        <attempts timestamp="1457903098926"/>
        <attempts timestamp="1457903118843"/>
        <attempts timestamp="1457903135372"/>
        <attempts timestamp="1457903146072"/>
        <attempts timestamp="1457903149007"/>
        <attempts timestamp="1457903449897"/>
        <attempts timestamp="1457903450182"/>
        <attempts timestamp="1457903450453"/>
        <attempts timestamp="1457903450666"/>
        <attempts timestamp="1457903450902"/>
        <attempts timestamp="1457903451260"/>
        <attempts timestamp="1457903452137"/>
        <attempts timestamp="1457903453208"/>
        <attempts timestamp="1457903456367"/>
        <attempts timestamp="1457903460273"/>
        <attempts timestamp="1457903470373"/>
        <attempts timestamp="1457903470868"/>
        <attempts timestamp="1457903474863"/>
        <attempts timestamp="1457903480290"/>
        <attempts timestamp="1457903481969"/>
        <attempts timestamp="1457903523739"/>
        <attempts timestamp="1457903526983"/>
        <attempts timestamp="1457904131100"/>
        <attempts timestamp="1457904131563"/>
        <attempts timestamp="1457904154382"/>
      </proposals>
      <proposals xsi:type="workbench:PartTaskProposal" question="/0/@parts.3/@tasks.3/@q" answer="/0/@parts.3/@tasks.3/@a" performedCount="4">
        <attempts timestamp="1457900448790"/>
        <attempts timestamp="1457903099986"/>
        <attempts timestamp="1457903485347"/>
        <attempts timestamp="1457904142477"/>
      </proposals>
      <proposals xsi:type="jdt:JdtLaunchProposal" question="/0/@parts.3/@tasks.4/@q" answer="/0/@parts.3/@tasks.4/@a">
        <attempts xsi:type="jdt:JdtLaunchEvent" timestamp="1457900294042" mode="run"/>
        <attempts xsi:type="jdt:JdtLaunchEvent" timestamp="1457900351135" mode="run"/>
        <attempts xsi:type="jdt:JdtLaunchEvent" timestamp="1457900431134" mode="debug"/>
        <attempts xsi:type="jdt:JdtLaunchEvent" timestamp="1457903090138" mode="debug"/>
        <attempts xsi:type="jdt:JdtLaunchEvent" timestamp="1457903188032" mode="run"/>
        <attempts xsi:type="jdt:JdtLaunchEvent" timestamp="1457903447593" mode="debug"/>
        <attempts xsi:type="jdt:JdtLaunchEvent" timestamp="1457903585308" mode="run"/>
        <attempts xsi:type="jdt:JdtLaunchEvent" timestamp="1457903640065" mode="run"/>
        <attempts xsi:type="jdt:JdtLaunchEvent" timestamp="1457903704337" mode="run"/>
        <attempts xsi:type="jdt:JdtLaunchEvent" timestamp="1457903945084" mode="run"/>
        <attempts xsi:type="jdt:JdtLaunchEvent" timestamp="1457903998703" mode="run"/>
        <attempts xsi:type="jdt:JdtLaunchEvent" timestamp="1457904023439" mode="run"/>
        <attempts xsi:type="jdt:JdtLaunchEvent" timestamp="1457904118703" mode="run"/>
        <attempts xsi:type="jdt:JdtLaunchEvent" timestamp="1457904127956" mode="debug"/>
        <attempts xsi:type="jdt:JdtLaunchEvent" timestamp="1457904139612" mode="debug"/>
        <attempts xsi:type="jdt:JdtLaunchEvent" timestamp="1457904938543" mode="run"/>
        <attempts xsi:type="jdt:JdtLaunchEvent" timestamp="1457904948289" mode="run"/>
        <attempts xsi:type="jdt:JdtLaunchEvent" timestamp="1457956009261" mode="run"/>
        <attempts xsi:type="jdt:JdtLaunchEvent" timestamp="1457956059001" mode="run"/>
      </proposals>
    </proposals>
  </exercise:ExerciseProposals>
</xmi:XMI>
