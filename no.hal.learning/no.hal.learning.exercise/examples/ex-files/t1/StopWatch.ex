<?xml version="1.0" encoding="UTF-8"?>
<xmi:XMI xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:exercise="platform:/plugin/no.hal.learning.exercise.model/model/exercise.ecore" xmlns:jdt="platform:/plugin/no.hal.learning.exercise.jdt/model/jdt-exercise.ecore" xmlns:junit="platform:/plugin/no.hal.learning.exercise.junit/model/junit-exercise.ecore" xmlns:workbench="platform:/plugin/no.hal.learning.exercise.workbench/model/workbench-exercise.ecore">
  <exercise:Exercise>
    <parts xsi:type="exercise:ExercisePart" title="StopWatch and StopWatchManager">
      <tasks xsi:type="exercise:Task">
        <q xsi:type="exercise:StringQuestion" question="Write source code for the StopWatch class."/>
        <a xsi:type="jdt:JdtSourceEditAnswer" className="objectstructures.StopWatch"/>
      </tasks>
      <tasks xsi:type="exercise:Task">
        <q xsi:type="exercise:StringQuestion" question="Write source code for the StopWatchManager class."/>
        <a xsi:type="jdt:JdtSourceEditAnswer" className="objectstructures.StopWatchManager"/>
      </tasks>
      <tasks xsi:type="exercise:Task">
        <q xsi:type="exercise:StringQuestion" question="Run the StopWatchManagerTest."/>
        <a xsi:type="junit:JunitTestAnswer" testRunName="objectstructures.StopWatchManagerTest"/>
      </tasks>
    </parts>
    <parts xsi:type="exercise:ExercisePart" title="Tool usage">
      <tasks xsi:type="exercise:Task">
        <q xsi:type="exercise:StringQuestion" question="Use breakpoints to debug code."/>
        <a xsi:type="workbench:DebugEventAnswer" action="suspend.breakpoint"/>
      </tasks>
      <tasks xsi:type="exercise:Task">
        <q xsi:type="exercise:StringQuestion" question="Use the debug command Step Over"/>
        <a xsi:type="workbench:CommandExecutionAnswer" elementId="org.eclipse.debug.ui.commands.StepOver" action="executeSuccess"/>
      </tasks>
      <tasks xsi:type="exercise:Task">
        <q xsi:type="exercise:StringQuestion" question="Use the debug command Step Into"/>
        <a xsi:type="workbench:CommandExecutionAnswer" elementId="org.eclipse.debug.ui.commands.StepInto" action="executeSuccess"/>
      </tasks>
      <tasks xsi:type="exercise:Task">
        <q xsi:type="exercise:StringQuestion" question="Use the Variables view"/>
        <a xsi:type="workbench:PartTaskAnswer" elementId="org.eclipse.debug.ui.VariableView" action="activated"/>
      </tasks>
    </parts>
  </exercise:Exercise>
  <exercise:ExerciseProposals exercise="/0">
    <proposals exercisePart="/0/@parts.0">
      <proposals xsi:type="jdt:JdtSourceEditProposal" question="/0/@parts.0/@tasks.0/@q" answer="/0/@parts.0/@tasks.0/@a">
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1456748436727" sizeMeasure="60">
          <edit xsi:type="exercise:StringEdit" storedString="package objectstructures;&#xA;&#xA;public class StopWatch {&#xA;    &#xA;    private int ticks = 0;&#xA;    private int startTime = -1;&#xA;    private int stopTime = -1;&#xA;    private int lapStartTime = -1;&#xA;    private int lapTime = -1;&#xA;    &#xA;    public int getTicks() {&#xA;        return ticks;&#xA;    }&#xA;    public void tick(int ticks) {&#xA;        this.ticks += ticks;&#xA;    }&#xA;    &#xA;    public void start() {&#xA;        startTime = ticks;&#xA;        lap();&#xA;    }&#xA;    public boolean isStarted() {&#xA;        return startTime >= 0;&#xA;    }&#xA;    &#xA;    public void stop() {&#xA;    &#x9;stopTime = ticks;&#xA;    &#x9;lap();&#xA;    }&#xA;    public boolean isStopped() {&#xA;    &#x9;return stopTime >= 0;&#xA;    }&#xA;    &#xA;    public int getTime() {&#xA;        if (isStopped()) {&#xA;            return stopTime - startTime;&#xA;        } else if (isStarted()) {&#xA;            return ticks - startTime;&#xA;        } else {&#xA;            return -1;&#xA;        }&#xA;    }&#xA;    public void lap() {&#xA;    &#x9;if (lapStartTime >= 0) {&#xA;    &#x9;&#x9;lapTime = ticks - lapStartTime;&#xA;    &#x9;}&#xA;    &#x9;lapStartTime = ticks;&#xA;    }&#xA;    &#xA;    public int getLapTime() {&#xA;        if (lapStartTime >= 0) {&#xA;            return ticks - lapStartTime;&#xA;        } else {&#xA;            return -1;&#xA;        }&#xA;    }&#xA;    public int getLastLapTime() {&#xA;        return lapTime;&#xA;    }&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1456750587777" sizeMeasure="72">
          <edit xsi:type="exercise:StringEdit" storedString="package objectstructures;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collection;&#xA;&#xA;public class StopWatch {&#xA;    &#xA;    private int ticks = 0;&#xA;    private int startTime = -1;&#xA;    private int stopTime = -1;&#xA;    private int lapStartTime = -1;&#xA;    private int lapTime = -1;&#xA;    &#xA;    public int getTicks() {&#xA;        return ticks;&#xA;    }&#xA;    public void tick(int ticks) {&#xA;        this.ticks += ticks;&#xA;    }&#xA;    &#xA;    public void start() {&#xA;        startTime = ticks;&#xA;        lap();&#xA;    }&#xA;    public boolean isStarted() {&#xA;        return startTime >= 0;&#xA;    }&#xA;    &#xA;    public void stop() {&#xA;    &#x9;stopTime = ticks;&#xA;    &#x9;lap();&#xA;    }&#xA;    public boolean isStopped() {&#xA;    &#x9;return stopTime >= 0;&#xA;    }&#xA;    &#xA;    public int getTime() {&#xA;        if (isStopped()) {&#xA;            return stopTime - startTime;&#xA;        } else if (isStarted()) {&#xA;            return ticks - startTime;&#xA;        } else {&#xA;            return -1;&#xA;        }&#xA;    }&#xA;    public void lap() {&#xA;    &#x9;if (lapStartTime >= 0) {&#xA;    &#x9;&#x9;lapTime = ticks - lapStartTime;&#xA;    &#x9;}&#xA;    &#x9;lapStartTime = ticks;&#xA;    }&#xA;    &#xA;    public int getLapTime() {&#xA;        if (lapStartTime >= 0) {&#xA;            return ticks - lapStartTime;&#xA;        } else {&#xA;            return -1;&#xA;        }&#xA;    }&#xA;    public int getLastLapTime() {&#xA;        return lapTime;&#xA;    }&#xA;    &#xA;    &#xA;    private Collection&lt;StopWatchListener> stopWatchListener = new ArrayList&lt;StopWatchListener>();&#xA;    public void addStopWatchListener(StopWatchListener listener) {&#xA;    &#x9;stopWatchListener.add(listener);&#xA;    }&#xA;    public void removeStopWatchListener(StopWatchListener listener) {&#xA;    &#x9;stopWatchListener.remove(listener);&#xA;    }&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1456751548509" sizeMeasure="72">
          <edit xsi:type="exercise:StringEdit" storedString="package objectstructures;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collection;&#xA;&#xA;public class StopWatch {&#xA;    &#xA;    private int ticks = 2;&#xA;    private int startTime = -1;&#xA;    private int stopTime = -1;&#xA;    private int lapStartTime = -1;&#xA;    private int lapTime = -1;&#xA;    &#xA;    public int getTicks() {&#xA;        return ticks;&#xA;    }&#xA;    public void tick(int ticks) {&#xA;        this.ticks += ticks;&#xA;    }&#xA;    &#xA;    public void start() {&#xA;        startTime = ticks;&#xA;        lap();&#xA;    }&#xA;    public boolean isStarted() {&#xA;        return startTime >= 0;&#xA;    }&#xA;    &#xA;    public void stop() {&#xA;    &#x9;stopTime = ticks;&#xA;    &#x9;lap();&#xA;    }&#xA;    public boolean isStopped() {&#xA;    &#x9;return stopTime >= 0;&#xA;    }&#xA;    &#xA;    public int getTime() {&#xA;        if (isStopped()) {&#xA;            return stopTime - startTime;&#xA;        } else if (isStarted()) {&#xA;            return ticks - startTime;&#xA;        } else {&#xA;            return -1;&#xA;        }&#xA;    }&#xA;    public void lap() {&#xA;    &#x9;if (lapStartTime >= 0) {&#xA;    &#x9;&#x9;lapTime = ticks - lapStartTime;&#xA;    &#x9;}&#xA;    &#x9;lapStartTime = ticks;&#xA;    }&#xA;    &#xA;    public int getLapTime() {&#xA;        if (lapStartTime >= 0) {&#xA;            return ticks - lapStartTime;&#xA;        } else {&#xA;            return -1;&#xA;        }&#xA;    }&#xA;    public int getLastLapTime() {&#xA;        return lapTime;&#xA;    }&#xA;    &#xA;    &#xA;    private Collection&lt;StopWatchListener> stopWatchListener = new ArrayList&lt;StopWatchListener>();&#xA;    public void addStopWatchListener(StopWatchListener listener) {&#xA;    &#x9;stopWatchListener.add(listener);&#xA;    }&#xA;    public void removeStopWatchListener(StopWatchListener listener) {&#xA;    &#x9;stopWatchListener.remove(listener);&#xA;    }&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1456751557795" sizeMeasure="72">
          <edit xsi:type="exercise:StringEdit" storedString="package objectstructures;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collection;&#xA;&#xA;public class StopWatch {&#xA;    &#xA;    private int ticks = 0;&#xA;    private int startTime = -1;&#xA;    private int stopTime = -1;&#xA;    private int lapStartTime = -1;&#xA;    private int lapTime = -1;&#xA;    &#xA;    public int getTicks() {&#xA;        return ticks;&#xA;    }&#xA;    public void tick(int ticks) {&#xA;        this.ticks += ticks;&#xA;    }&#xA;    &#xA;    public void start() {&#xA;        startTime = ticks;&#xA;        lap();&#xA;    }&#xA;    public boolean isStarted() {&#xA;        return startTime >= 0;&#xA;    }&#xA;    &#xA;    public void stop() {&#xA;    &#x9;stopTime = ticks;&#xA;    &#x9;lap();&#xA;    }&#xA;    public boolean isStopped() {&#xA;    &#x9;return stopTime >= 0;&#xA;    }&#xA;    &#xA;    public int getTime() {&#xA;        if (isStopped()) {&#xA;            return stopTime - startTime;&#xA;        } else if (isStarted()) {&#xA;            return ticks - startTime;&#xA;        } else {&#xA;            return -1;&#xA;        }&#xA;    }&#xA;    public void lap() {&#xA;    &#x9;if (lapStartTime >= 0) {&#xA;    &#x9;&#x9;lapTime = ticks - lapStartTime;&#xA;    &#x9;}&#xA;    &#x9;lapStartTime = ticks;&#xA;    }&#xA;    &#xA;    public int getLapTime() {&#xA;        if (lapStartTime >= 0) {&#xA;            return ticks - lapStartTime;&#xA;        } else {&#xA;            return -1;&#xA;        }&#xA;    }&#xA;    public int getLastLapTime() {&#xA;        return lapTime;&#xA;    }&#xA;    &#xA;    &#xA;    private Collection&lt;StopWatchListener> stopWatchListener = new ArrayList&lt;StopWatchListener>();&#xA;    public void addStopWatchListener(StopWatchListener listener) {&#xA;    &#x9;stopWatchListener.add(listener);&#xA;    }&#xA;    public void removeStopWatchListener(StopWatchListener listener) {&#xA;    &#x9;stopWatchListener.remove(listener);&#xA;    }&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1456752844639" sizeMeasure="76" errorCount="2">
          <edit xsi:type="exercise:StringEdit" storedString="package objectstructures;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collection;&#xA;import java.util.Iterator;&#xA;&#xA;public class StopWatch {&#xA;    private Collection&lt;StopWatchListener> stopWatchListener = new ArrayList&lt;StopWatchListener>();&#xA;&#xA;    private int ticks = 0;&#xA;    private int startTime = -1;&#xA;    private int stopTime = -1;&#xA;    private int lapStartTime = -1;&#xA;    private int lapTime = -1;&#xA;    &#xA;    public int getTicks() {&#xA;        return ticks;&#xA;    }&#xA;    public void tick(int ticks) {&#xA;        this.ticks += ticks;&#xA;        for (Iterator&lt;StopWatchListener> iterator = stopWatchListener.iterator()) {&#xA;        &#x9;       &#x9;&#xA;        }&#xA;    }&#xA;    &#xA;    public void start() {&#xA;        startTime = ticks;&#xA;        lap();&#xA;    }&#xA;    public boolean isStarted() {&#xA;        return startTime >= 0;&#xA;    }&#xA;    &#xA;    public void stop() {&#xA;    &#x9;stopTime = ticks;&#xA;    &#x9;lap();&#xA;    }&#xA;    public boolean isStopped() {&#xA;    &#x9;return stopTime >= 0;&#xA;    }&#xA;    &#xA;    public int getTime() {&#xA;        if (isStopped()) {&#xA;            return stopTime - startTime;&#xA;        } else if (isStarted()) {&#xA;            return ticks - startTime;&#xA;        } else {&#xA;            return -1;&#xA;        }&#xA;    }&#xA;    public void lap() {&#xA;    &#x9;if (lapStartTime >= 0) {&#xA;    &#x9;&#x9;lapTime = ticks - lapStartTime;&#xA;    &#x9;}&#xA;    &#x9;lapStartTime = ticks;&#xA;    }&#xA;    &#xA;    public int getLapTime() {&#xA;        if (lapStartTime >= 0) {&#xA;            return ticks - lapStartTime;&#xA;        } else {&#xA;            return -1;&#xA;        }&#xA;    }&#xA;    public int getLastLapTime() {&#xA;        return lapTime;&#xA;    }&#xA;    &#xA;    &#xA;    public void addStopWatchListener(StopWatchListener listener) {&#xA;    &#x9;stopWatchListener.add(listener);&#xA;    }&#xA;    public void removeStopWatchListener(StopWatchListener listener) {&#xA;    &#x9;stopWatchListener.remove(listener);&#xA;    }&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1456753671823" sizeMeasure="75">
          <edit xsi:type="exercise:StringEdit" storedString="package objectstructures;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collection;&#xA;&#xA;public class StopWatch {&#xA;    private Collection&lt;StopWatchListener> stopWatchListener = new ArrayList&lt;StopWatchListener>();&#xA;&#xA;    private int ticks = 0;&#xA;    private int startTime = -1;&#xA;    private int stopTime = -1;&#xA;    private int lapStartTime = -1;&#xA;    private int lapTime = -1;&#xA;    &#xA;    public int getTicks() {&#xA;        return ticks;&#xA;    }&#xA;    public void tick(int ticks) {&#xA;        this.ticks += ticks;&#xA;        for (StopWatchListener listener : stopWatchListener){&#xA;        &#x9;listener.stopWatchChanged(this, 1);        &#x9;&#xA;        }&#xA;    }&#xA;    &#xA;    public void start() {&#xA;        startTime = ticks;&#xA;        lap();&#xA;    }&#xA;    public boolean isStarted() {&#xA;        return startTime >= 0;&#xA;    }&#xA;    &#xA;    public void stop() {&#xA;    &#x9;stopTime = ticks;&#xA;    &#x9;lap();&#xA;    }&#xA;    public boolean isStopped() {&#xA;    &#x9;return stopTime >= 0;&#xA;    }&#xA;    &#xA;    public int getTime() {&#xA;        if (isStopped()) {&#xA;            return stopTime - startTime;&#xA;        } else if (isStarted()) {&#xA;            return ticks - startTime;&#xA;        } else {&#xA;            return -1;&#xA;        }&#xA;    }&#xA;    public void lap() {&#xA;    &#x9;if (lapStartTime >= 0) {&#xA;    &#x9;&#x9;lapTime = ticks - lapStartTime;&#xA;    &#x9;}&#xA;    &#x9;lapStartTime = ticks;&#xA;    }&#xA;    &#xA;    public int getLapTime() {&#xA;        if (lapStartTime >= 0) {&#xA;            return ticks - lapStartTime;&#xA;        } else {&#xA;            return -1;&#xA;        }&#xA;    }&#xA;    public int getLastLapTime() {&#xA;        return lapTime;&#xA;    }&#xA;    &#xA;    &#xA;    public void addStopWatchListener(StopWatchListener listener) {&#xA;    &#x9;stopWatchListener.add(listener);&#xA;    }&#xA;    public void removeStopWatchListener(StopWatchListener listener) {&#xA;    &#x9;stopWatchListener.remove(listener);&#xA;    }&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1456753817927" sizeMeasure="84">
          <edit xsi:type="exercise:StringEdit" storedString="package objectstructures;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collection;&#xA;&#xA;public class StopWatch {&#xA;    private Collection&lt;StopWatchListener> stopWatchListener = new ArrayList&lt;StopWatchListener>();&#xA;&#xA;    private int ticks = 0;&#xA;    private int startTime = -1;&#xA;    private int stopTime = -1;&#xA;    private int lapStartTime = -1;&#xA;    private int lapTime = -1;&#xA;    &#xA;    public int getTicks() {&#xA;        return ticks;&#xA;    }&#xA;    public void tick(int ticks) {&#xA;        this.ticks += ticks;&#xA;        for (StopWatchListener listener : stopWatchListener){&#xA;        &#x9;listener.stopWatchChanged(this, 1);        &#x9;&#xA;        }&#xA;    }&#xA;    &#xA;    public void start() {&#xA;    &#x9;for (StopWatchListener listener : stopWatchListener){&#xA;        &#x9;listener.stopWatchChanged(this, 2);        &#x9;&#xA;        }&#xA;        startTime = ticks;&#xA;        lap();&#xA;    }&#xA;    public boolean isStarted() {&#xA;    &#x9;return startTime >= 0;&#xA;    }&#xA;    &#xA;    public void stop() {&#xA;    &#x9;for (StopWatchListener listener : stopWatchListener){&#xA;        &#x9;listener.stopWatchChanged(this, 8);        &#x9;&#xA;        }&#xA;    &#x9;stopTime = ticks;&#xA;    &#x9;lap();&#xA;    }&#xA;    public boolean isStopped() {&#xA;    &#x9;return stopTime >= 0;&#xA;    }&#xA;    &#xA;    public int getTime() {&#xA;        if (isStopped()) {&#xA;            return stopTime - startTime;&#xA;        } else if (isStarted()) {&#xA;            return ticks - startTime;&#xA;        } else {&#xA;            return -1;&#xA;        }&#xA;    }&#xA;    public void lap() {&#xA;    &#x9;if (lapStartTime >= 0) {&#xA;    &#x9;&#x9;lapTime = ticks - lapStartTime;&#xA;    &#x9;}&#xA;    &#x9;lapStartTime = ticks;&#xA;    &#x9;for (StopWatchListener listener : stopWatchListener){&#xA;        &#x9;listener.stopWatchChanged(this, 4);        &#x9;&#xA;        }&#xA;    }&#xA;    &#xA;    public int getLapTime() {&#xA;        if (lapStartTime >= 0) {&#xA;            return ticks - lapStartTime;&#xA;        } else {&#xA;            return -1;&#xA;        }&#xA;    }&#xA;    public int getLastLapTime() {&#xA;        return lapTime;&#xA;    }&#xA;    &#xA;    &#xA;    public void addStopWatchListener(StopWatchListener listener) {&#xA;    &#x9;stopWatchListener.add(listener);&#xA;    }&#xA;    public void removeStopWatchListener(StopWatchListener listener) {&#xA;    &#x9;stopWatchListener.remove(listener);&#xA;    }&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1456753877760" sizeMeasure="84">
          <edit xsi:type="exercise:StringEdit" storedString="package objectstructures;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collection;&#xA;&#xA;public class StopWatch {&#xA;    private Collection&lt;StopWatchListener> stopWatchListener = new ArrayList&lt;StopWatchListener>();&#xA;&#xA;    private int ticks = 0;&#xA;    private int startTime = -1;&#xA;    private int stopTime = -1;&#xA;    private int lapStartTime = -1;&#xA;    private int lapTime = -1;&#xA;    &#xA;    public int getTicks() {&#xA;        return ticks;&#xA;    }&#xA;    public void tick(int ticks) {&#xA;        this.ticks += ticks;&#xA;        for (StopWatchListener listener : stopWatchListener){&#xA;        &#x9;listener.stopWatchChanged(this, 1);        &#x9;&#xA;        }&#xA;    }&#xA;    &#xA;    public void start() {&#xA;    &#x9;startTime = ticks;&#xA;        lap();&#xA;        for (StopWatchListener listener : stopWatchListener){&#xA;        &#x9;listener.stopWatchChanged(this, 2);        &#x9;&#xA;        }&#xA;    }&#xA;    public boolean isStarted() {&#xA;    &#x9;return startTime >= 0;&#xA;    }&#xA;    &#xA;    public void stop() {&#xA;    &#x9;for (StopWatchListener listener : stopWatchListener){&#xA;        &#x9;listener.stopWatchChanged(this, 8);        &#x9;&#xA;        }&#xA;    &#x9;stopTime = ticks;&#xA;    &#x9;lap();&#xA;    }&#xA;    public boolean isStopped() {&#xA;    &#x9;return stopTime >= 0;&#xA;    }&#xA;    &#xA;    public int getTime() {&#xA;        if (isStopped()) {&#xA;            return stopTime - startTime;&#xA;        } else if (isStarted()) {&#xA;            return ticks - startTime;&#xA;        } else {&#xA;            return -1;&#xA;        }&#xA;    }&#xA;    public void lap() {&#xA;    &#x9;if (lapStartTime >= 0) {&#xA;    &#x9;&#x9;lapTime = ticks - lapStartTime;&#xA;    &#x9;}&#xA;    &#x9;lapStartTime = ticks;&#xA;    &#x9;for (StopWatchListener listener : stopWatchListener){&#xA;        &#x9;listener.stopWatchChanged(this, 4);        &#x9;&#xA;        }&#xA;    }&#xA;    &#xA;    public int getLapTime() {&#xA;        if (lapStartTime >= 0) {&#xA;            return ticks - lapStartTime;&#xA;        } else {&#xA;            return -1;&#xA;        }&#xA;    }&#xA;    public int getLastLapTime() {&#xA;        return lapTime;&#xA;    }&#xA;    &#xA;    &#xA;    public void addStopWatchListener(StopWatchListener listener) {&#xA;    &#x9;stopWatchListener.add(listener);&#xA;    }&#xA;    public void removeStopWatchListener(StopWatchListener listener) {&#xA;    &#x9;stopWatchListener.remove(listener);&#xA;    }&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1456753915614" sizeMeasure="84">
          <edit xsi:type="exercise:StringEdit" storedString="package objectstructures;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collection;&#xA;&#xA;public class StopWatch {&#xA;    private Collection&lt;StopWatchListener> stopWatchListener = new ArrayList&lt;StopWatchListener>();&#xA;&#xA;    private int ticks = 0;&#xA;    private int startTime = -1;&#xA;    private int stopTime = -1;&#xA;    private int lapStartTime = -1;&#xA;    private int lapTime = -1;&#xA;    &#xA;    public int getTicks() {&#xA;        return ticks;&#xA;    }&#xA;    public void tick(int ticks) {&#xA;        this.ticks += ticks;&#xA;        for (StopWatchListener listener : stopWatchListener){&#xA;        &#x9;listener.stopWatchChanged(this, 1);        &#x9;&#xA;        }&#xA;    }&#xA;    &#xA;    public void start() {&#xA;    &#x9;startTime = ticks;&#xA;        lap();&#xA;        for (StopWatchListener listener : stopWatchListener){&#xA;        &#x9;listener.stopWatchChanged(this, 2);        &#x9;&#xA;        }&#xA;    }&#xA;    public boolean isStarted() {&#xA;    &#x9;return startTime >= 0;&#xA;    }&#xA;    &#xA;    public void stop() {&#xA;    &#x9;stopTime = ticks;&#xA;    &#x9;lap();&#xA;    &#x9;for (StopWatchListener listener : stopWatchListener){&#xA;    &#x9;&#x9;listener.stopWatchChanged(this, 8);        &#x9;&#xA;    &#x9;}&#xA;    }&#xA;    public boolean isStopped() {&#xA;    &#x9;return stopTime >= 0;&#xA;    }&#xA;    &#xA;    public int getTime() {&#xA;        if (isStopped()) {&#xA;            return stopTime - startTime;&#xA;        } else if (isStarted()) {&#xA;            return ticks - startTime;&#xA;        } else {&#xA;            return -1;&#xA;        }&#xA;    }&#xA;    public void lap() {&#xA;    &#x9;if (lapStartTime >= 0) {&#xA;    &#x9;&#x9;lapTime = ticks - lapStartTime;&#xA;    &#x9;}&#xA;    &#x9;lapStartTime = ticks;&#xA;    &#x9;for (StopWatchListener listener : stopWatchListener){&#xA;        &#x9;listener.stopWatchChanged(this, 4);        &#x9;&#xA;        }&#xA;    }&#xA;    &#xA;    public int getLapTime() {&#xA;        if (lapStartTime >= 0) {&#xA;            return ticks - lapStartTime;&#xA;        } else {&#xA;            return -1;&#xA;        }&#xA;    }&#xA;    public int getLastLapTime() {&#xA;        return lapTime;&#xA;    }&#xA;    &#xA;    &#xA;    public void addStopWatchListener(StopWatchListener listener) {&#xA;    &#x9;stopWatchListener.add(listener);&#xA;    }&#xA;    public void removeStopWatchListener(StopWatchListener listener) {&#xA;    &#x9;stopWatchListener.remove(listener);&#xA;    }&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1456755015400" sizeMeasure="86">
          <edit xsi:type="exercise:StringEdit" storedString="package objectstructures;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collection;&#xA;&#xA;public class StopWatch {&#xA;    private Collection&lt;StopWatchListener> stopWatchListener = new ArrayList&lt;StopWatchListener>();&#xA;&#xA;    private int ticks = 0;&#xA;    private int startTime = -1;&#xA;    private int stopTime = -1;&#xA;    private int lapStartTime = -1;&#xA;    private int lapTime = -1;&#xA;    &#xA;    public int getTicks() {&#xA;        return ticks;&#xA;    }&#xA;    public void tick(int ticks) {&#xA;        this.ticks += ticks;&#xA;        for (StopWatchListener listener : stopWatchListener){&#xA;        &#x9;listener.stopWatchChanged(this, 1);        &#x9;&#xA;        }&#xA;    }&#xA;    &#xA;    public void start() {&#xA;    &#x9;startTime = ticks;&#xA;        lap();&#xA;        for (StopWatchListener listener : stopWatchListener){&#xA;        &#x9;listener.stopWatchChanged(this, 2);        &#x9;&#xA;        }&#xA;    }&#xA;    public boolean isStarted() {&#xA;    &#x9;return startTime >= 0;&#xA;    }&#xA;    &#xA;    public void stop() {&#xA;    &#x9;stopTime = ticks;&#xA;    &#x9;lap();&#xA;    &#x9;for (StopWatchListener listener : stopWatchListener){&#xA;    &#x9;&#x9;listener.stopWatchChanged(this, 8);        &#x9;&#xA;    &#x9;}&#xA;    }&#xA;    public boolean isStopped() {&#xA;    &#x9;return stopTime >= 0;&#xA;    }&#xA;    &#xA;    public int getTime() {&#xA;        if (isStopped()) {&#xA;            return stopTime - startTime;&#xA;        } else if (isStarted()) {&#xA;            return ticks - startTime;&#xA;        } else {&#xA;            return -1;&#xA;        }&#xA;    }&#xA;    public void lap() {&#xA;    &#x9;if (lapStartTime >= 0) {&#xA;    &#x9;&#x9;lapTime = ticks - lapStartTime;&#xA;    &#x9;}&#xA;    &#x9;lapStartTime = ticks;&#xA;    &#x9;if (!isStopped()){&#xA;    &#x9;for (StopWatchListener listener : stopWatchListener){&#xA;        &#x9;listener.stopWatchChanged(this, 4);   &#xA;    &#x9;}&#xA;        }&#xA;    }&#xA;    &#xA;    public int getLapTime() {&#xA;        if (lapStartTime >= 0) {&#xA;            return ticks - lapStartTime;&#xA;        } else {&#xA;            return -1;&#xA;        }&#xA;    }&#xA;    public int getLastLapTime() {&#xA;        return lapTime;&#xA;    }&#xA;    &#xA;    &#xA;    public void addStopWatchListener(StopWatchListener listener) {&#xA;    &#x9;stopWatchListener.add(listener);&#xA;    }&#xA;    public void removeStopWatchListener(StopWatchListener listener) {&#xA;    &#x9;stopWatchListener.remove(listener);&#xA;    }&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1456755352748" sizeMeasure="86">
          <edit xsi:type="exercise:StringEdit" storedString="package objectstructures;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collection;&#xA;&#xA;public class StopWatch {&#xA;    private Collection&lt;StopWatchListener> stopWatchListener = new ArrayList&lt;StopWatchListener>();&#xA;&#xA;    private int ticks = 0;&#xA;    private int startTime = -1;&#xA;    private int stopTime = -1;&#xA;    private int lapStartTime = -1;&#xA;    private int lapTime = -1;&#xA;    &#xA;    public int getTicks() {&#xA;        return ticks;&#xA;    }&#xA;    public void tick(int ticks) {&#xA;        this.ticks += ticks;&#xA;        for (StopWatchListener listener : stopWatchListener){&#xA;        &#x9;listener.stopWatchChanged(this, 1);        &#x9;&#xA;        }&#xA;    }&#xA;    &#xA;    public void start() {&#xA;    &#x9;startTime = ticks;&#xA;        lap();&#xA;        for (StopWatchListener listener : stopWatchListener){&#xA;        &#x9;listener.stopWatchChanged(this, 2);        &#x9;&#xA;        }&#xA;    }&#xA;    public boolean isStarted() {&#xA;    &#x9;return startTime >= 0;&#xA;    }&#xA;    &#xA;    public void stop() {&#xA;    &#x9;stopTime = ticks;&#xA;    &#x9;lap();&#xA;    &#x9;for (StopWatchListener listener : stopWatchListener){&#xA;    &#x9;&#x9;listener.stopWatchChanged(this, 8);        &#x9;&#xA;    &#x9;}&#xA;    }&#xA;    public boolean isStopped() {&#xA;    &#x9;return stopTime >= 0;&#xA;    }&#xA;    &#xA;    public int getTime() {&#xA;        if (isStopped()) {&#xA;            return stopTime - startTime;&#xA;        } else if (isStarted()) {&#xA;            return ticks - startTime;&#xA;        } else {&#xA;            return -1;&#xA;        }&#xA;    }&#xA;    public void lap() {&#xA;    &#x9;if (lapStartTime >= 0) {&#xA;    &#x9;&#x9;lapTime = ticks - lapStartTime;&#xA;    &#x9;}&#xA;    &#x9;lapStartTime = ticks;&#xA;    &#x9;if (!isStopped() &amp;&amp; isStarted()){&#xA;    &#x9;for (StopWatchListener listener : stopWatchListener){&#xA;        &#x9;listener.stopWatchChanged(this, 4);   &#xA;    &#x9;}&#xA;        }&#xA;    }&#xA;    &#xA;    public int getLapTime() {&#xA;        if (lapStartTime >= 0) {&#xA;            return ticks - lapStartTime;&#xA;        } else {&#xA;            return -1;&#xA;        }&#xA;    }&#xA;    public int getLastLapTime() {&#xA;        return lapTime;&#xA;    }&#xA;    &#xA;    &#xA;    public void addStopWatchListener(StopWatchListener listener) {&#xA;    &#x9;stopWatchListener.add(listener);&#xA;    }&#xA;    public void removeStopWatchListener(StopWatchListener listener) {&#xA;    &#x9;stopWatchListener.remove(listener);&#xA;    }&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1456755498272" sizeMeasure="89">
          <edit xsi:type="exercise:StringEdit" storedString="package objectstructures;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collection;&#xA;&#xA;public class StopWatch {&#xA;    private Collection&lt;StopWatchListener> stopWatchListener = new ArrayList&lt;StopWatchListener>();&#xA;&#xA;    private int ticks = 0;&#xA;    private int startTime = -1;&#xA;    private int stopTime = -1;&#xA;    private int lapStartTime = -1;&#xA;    private int lapTime = -1;&#xA;    private boolean fromStart=false;&#xA;    &#xA;    public int getTicks() {&#xA;        return ticks;&#xA;    }&#xA;    public void tick(int ticks) {&#xA;        this.ticks += ticks;&#xA;        for (StopWatchListener listener : stopWatchListener){&#xA;        &#x9;listener.stopWatchChanged(this, 1);        &#x9;&#xA;        }&#xA;    }&#xA;    &#xA;    public void start() {&#xA;    &#x9;startTime = ticks;&#xA;    &#x9;fromStart=true;&#xA;        lap();&#xA;        fromStart=false;&#xA;        for (StopWatchListener listener : stopWatchListener){&#xA;        &#x9;listener.stopWatchChanged(this, 2);        &#x9;&#xA;        }&#xA;    }&#xA;    public boolean isStarted() {&#xA;    &#x9;return startTime >= 0;&#xA;    }&#xA;    &#xA;    public void stop() {&#xA;    &#x9;stopTime = ticks;&#xA;    &#x9;lap();&#xA;    &#x9;for (StopWatchListener listener : stopWatchListener){&#xA;    &#x9;&#x9;listener.stopWatchChanged(this, 8);        &#x9;&#xA;    &#x9;}&#xA;    }&#xA;    public boolean isStopped() {&#xA;    &#x9;return stopTime >= 0;&#xA;    }&#xA;    &#xA;    public int getTime() {&#xA;        if (isStopped()) {&#xA;            return stopTime - startTime;&#xA;        } else if (isStarted()) {&#xA;            return ticks - startTime;&#xA;        } else {&#xA;            return -1;&#xA;        }&#xA;    }&#xA;    public void lap() {&#xA;    &#x9;if (lapStartTime >= 0) {&#xA;    &#x9;&#x9;lapTime = ticks - lapStartTime;&#xA;    &#x9;}&#xA;    &#x9;lapStartTime = ticks;&#xA;    &#x9;if (!isStopped() &amp;&amp; !fromStart){&#xA;    &#x9;for (StopWatchListener listener : stopWatchListener){&#xA;        &#x9;listener.stopWatchChanged(this, 4);   &#xA;    &#x9;}&#xA;        }&#xA;    }&#xA;    &#xA;    public int getLapTime() {&#xA;        if (lapStartTime >= 0) {&#xA;            return ticks - lapStartTime;&#xA;        } else {&#xA;            return -1;&#xA;        }&#xA;    }&#xA;    public int getLastLapTime() {&#xA;        return lapTime;&#xA;    }&#xA;    &#xA;    &#xA;    public void addStopWatchListener(StopWatchListener listener) {&#xA;    &#x9;stopWatchListener.add(listener);&#xA;    }&#xA;    public void removeStopWatchListener(StopWatchListener listener) {&#xA;    &#x9;stopWatchListener.remove(listener);&#xA;    }&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1456755611837" sizeMeasure="89">
          <edit xsi:type="exercise:StringEdit" storedString="package objectstructures;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collection;&#xA;&#xA;public class StopWatch {&#xA;    private Collection&lt;StopWatchListener> stopWatchListener = new ArrayList&lt;StopWatchListener>();&#xA;&#xA;    private int ticks = 0;&#xA;    private int startTime = -1;&#xA;    private int stopTime = -1;&#xA;    private int lapStartTime = -1;&#xA;    private int lapTime = -1;&#xA;    private boolean fromStart=false;&#xA;    &#xA;    public int getTicks() {&#xA;        return ticks;&#xA;    }&#xA;    public void tick(int ticks) {&#xA;        this.ticks += ticks;&#xA;        for (StopWatchListener listener : stopWatchListener){&#xA;        &#x9;listener.stopWatchChanged(this, 1);        &#x9;&#xA;        }&#xA;    }&#xA;    &#xA;    public void start() {&#xA;    &#x9;startTime = ticks;&#xA;    &#x9;fromStart=true;&#xA;        lap();&#xA;        fromStart=false;&#xA;        for (StopWatchListener listener : stopWatchListener){&#xA;        &#x9;listener.stopWatchChanged(this, 2);        &#x9;&#xA;        }&#xA;    }&#xA;    public boolean isStarted() {&#xA;    &#x9;return startTime >= 0;&#xA;    }&#xA;    &#xA;    public void stop() {&#xA;    &#x9;stopTime = ticks;&#xA;    &#x9;lap();&#xA;    &#x9;for (StopWatchListener listener : stopWatchListener){&#xA;    &#x9;&#x9;listener.stopWatchChanged(this, 8);        &#x9;&#xA;    &#x9;}&#xA;    }&#xA;    public boolean isStopped() {&#xA;    &#x9;return stopTime >= 0;&#xA;    }&#xA;    &#xA;    public int getTime() {&#xA;        if (isStopped()) {&#xA;            return stopTime - startTime;&#xA;        } else if (isStarted()) {&#xA;            return ticks - startTime;&#xA;        } else {&#xA;            return -1;&#xA;        }&#xA;    }&#xA;    public void lap() {&#xA;    &#x9;if (lapStartTime >= 0) {&#xA;    &#x9;&#x9;lapTime = ticks - lapStartTime;&#xA;    &#x9;}&#xA;    &#x9;lapStartTime = ticks;&#xA;    &#x9;if (!isStopped() &amp;&amp; !fromStart){&#xA;&#x9;    &#x9;for (StopWatchListener listener : stopWatchListener){&#xA;&#x9;        &#x9;listener.stopWatchChanged(this, 4);   &#xA;&#x9;    &#x9;}&#xA;        }&#xA;    }&#xA;    &#xA;    public int getLapTime() {&#xA;        if (lapStartTime >= 0) {&#xA;            return ticks - lapStartTime;&#xA;        } else {&#xA;            return -1;&#xA;        }&#xA;    }&#xA;    public int getLastLapTime() {&#xA;        return lapTime;&#xA;    }&#xA;    &#xA;    &#xA;    public void addStopWatchListener(StopWatchListener listener) {&#xA;    &#x9;stopWatchListener.add(listener);&#xA;    }&#xA;    public void removeStopWatchListener(StopWatchListener listener) {&#xA;    &#x9;stopWatchListener.remove(listener);&#xA;    }&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1456759167446" sizeMeasure="90">
          <edit xsi:type="exercise:StringEdit" storedString="package objectstructures;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collection;&#xA;&#xA;public class StopWatch {&#xA;    private Collection&lt;StopWatchListener> stopWatchListener = new ArrayList&lt;StopWatchListener>();&#xA;&#xA;    private int ticks = 0;&#xA;    private int startTime = -1;&#xA;    private int stopTime = -1;&#xA;    private int lapStartTime = -1;&#xA;    private int lapTime = -1;&#xA;    private boolean fromStart=false;&#xA;    &#xA;    public int getTicks() {&#xA;        return ticks;&#xA;    }&#xA;    public void tick(int ticks) {&#xA;        this.ticks += ticks;&#xA;        for (StopWatchListener listener : stopWatchListener){&#xA;        &#x9;listener.stopWatchChanged(this, 1);        &#x9;&#xA;        }&#xA;    }&#xA;    &#xA;    public void start() {&#xA;    &#x9;startTime = ticks;&#xA;    &#x9;fromStart=true;&#xA;        lap();&#xA;        fromStart=false;&#xA;        System.out.println(&quot;bla&quot;);&#xA;        for (StopWatchListener listener : stopWatchListener){&#xA;        &#x9;listener.stopWatchChanged(this, 2);        &#x9;&#xA;        }&#xA;    }&#xA;    public boolean isStarted() {&#xA;    &#x9;return startTime >= 0;&#xA;    }&#xA;    &#xA;    public void stop() {&#xA;    &#x9;stopTime = ticks;&#xA;    &#x9;lap();&#xA;    &#x9;for (StopWatchListener listener : stopWatchListener){&#xA;    &#x9;&#x9;listener.stopWatchChanged(this, 8);        &#x9;&#xA;    &#x9;}&#xA;    }&#xA;    public boolean isStopped() {&#xA;    &#x9;return stopTime >= 0;&#xA;    }&#xA;    &#xA;    public int getTime() {&#xA;        if (isStopped()) {&#xA;            return stopTime - startTime;&#xA;        } else if (isStarted()) {&#xA;            return ticks - startTime;&#xA;        } else {&#xA;            return -1;&#xA;        }&#xA;    }&#xA;    public void lap() {&#xA;    &#x9;if (lapStartTime >= 0) {&#xA;    &#x9;&#x9;lapTime = ticks - lapStartTime;&#xA;    &#x9;}&#xA;    &#x9;lapStartTime = ticks;&#xA;    &#x9;if (!isStopped() &amp;&amp; !fromStart){&#xA;&#x9;    &#x9;for (StopWatchListener listener : stopWatchListener){&#xA;&#x9;        &#x9;listener.stopWatchChanged(this, 4);   &#xA;&#x9;    &#x9;}&#xA;        }&#xA;    }&#xA;    &#xA;    public int getLapTime() {&#xA;        if (lapStartTime >= 0) {&#xA;            return ticks - lapStartTime;&#xA;        } else {&#xA;            return -1;&#xA;        }&#xA;    }&#xA;    public int getLastLapTime() {&#xA;        return lapTime;&#xA;    }&#xA;    &#xA;    &#xA;    public void addStopWatchListener(StopWatchListener listener) {&#xA;    &#x9;stopWatchListener.add(listener);&#xA;    }&#xA;    public void removeStopWatchListener(StopWatchListener listener) {&#xA;    &#x9;stopWatchListener.remove(listener);&#xA;    }&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1456759173644" sizeMeasure="90">
          <edit xsi:type="exercise:StringEdit" storedString="package objectstructures;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collection;&#xA;&#xA;public class StopWatch {&#xA;    private Collection&lt;StopWatchListener> stopWatchListener = new ArrayList&lt;StopWatchListener>();&#xA;&#xA;    private int ticks = 0;&#xA;    private int startTime = -1;&#xA;    private int stopTime = -1;&#xA;    private int lapStartTime = -1;&#xA;    private int lapTime = -1;&#xA;    private boolean fromStart=false;&#xA;    &#xA;    public int getTicks() {&#xA;        return ticks;&#xA;    }&#xA;    public void tick(int ticks) {&#xA;        this.ticks += ticks;&#xA;        for (StopWatchListener listener : stopWatchListener){&#xA;        &#x9;listener.stopWatchChanged(this, 1);        &#x9;&#xA;        }&#xA;    }&#xA;    &#xA;    public void start() {&#xA;    &#x9;startTime = ticks;&#xA;    &#x9;fromStart=true;&#xA;        lap();&#xA;        fromStart=false;&#xA;        for (StopWatchListener listener : stopWatchListener){&#xA;        &#x9;System.out.println(&quot;bla&quot;);&#xA;        &#x9;listener.stopWatchChanged(this, 2);        &#x9;&#xA;        }&#xA;    }&#xA;    public boolean isStarted() {&#xA;    &#x9;return startTime >= 0;&#xA;    }&#xA;    &#xA;    public void stop() {&#xA;    &#x9;stopTime = ticks;&#xA;    &#x9;lap();&#xA;    &#x9;for (StopWatchListener listener : stopWatchListener){&#xA;    &#x9;&#x9;listener.stopWatchChanged(this, 8);        &#x9;&#xA;    &#x9;}&#xA;    }&#xA;    public boolean isStopped() {&#xA;    &#x9;return stopTime >= 0;&#xA;    }&#xA;    &#xA;    public int getTime() {&#xA;        if (isStopped()) {&#xA;            return stopTime - startTime;&#xA;        } else if (isStarted()) {&#xA;            return ticks - startTime;&#xA;        } else {&#xA;            return -1;&#xA;        }&#xA;    }&#xA;    public void lap() {&#xA;    &#x9;if (lapStartTime >= 0) {&#xA;    &#x9;&#x9;lapTime = ticks - lapStartTime;&#xA;    &#x9;}&#xA;    &#x9;lapStartTime = ticks;&#xA;    &#x9;if (!isStopped() &amp;&amp; !fromStart){&#xA;&#x9;    &#x9;for (StopWatchListener listener : stopWatchListener){&#xA;&#x9;        &#x9;listener.stopWatchChanged(this, 4);   &#xA;&#x9;    &#x9;}&#xA;        }&#xA;    }&#xA;    &#xA;    public int getLapTime() {&#xA;        if (lapStartTime >= 0) {&#xA;            return ticks - lapStartTime;&#xA;        } else {&#xA;            return -1;&#xA;        }&#xA;    }&#xA;    public int getLastLapTime() {&#xA;        return lapTime;&#xA;    }&#xA;    &#xA;    &#xA;    public void addStopWatchListener(StopWatchListener listener) {&#xA;    &#x9;stopWatchListener.add(listener);&#xA;    }&#xA;    public void removeStopWatchListener(StopWatchListener listener) {&#xA;    &#x9;stopWatchListener.remove(listener);&#xA;    }&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1456759192747" sizeMeasure="90">
          <edit xsi:type="exercise:StringEdit" storedString="package objectstructures;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collection;&#xA;&#xA;public class StopWatch {&#xA;    public Collection&lt;StopWatchListener> stopWatchListener = new ArrayList&lt;StopWatchListener>();&#xA;&#xA;    private int ticks = 0;&#xA;    private int startTime = -1;&#xA;    private int stopTime = -1;&#xA;    private int lapStartTime = -1;&#xA;    private int lapTime = -1;&#xA;    private boolean fromStart=false;&#xA;    &#xA;    public int getTicks() {&#xA;        return ticks;&#xA;    }&#xA;    public void tick(int ticks) {&#xA;        this.ticks += ticks;&#xA;        for (StopWatchListener listener : stopWatchListener){&#xA;        &#x9;listener.stopWatchChanged(this, 1);        &#x9;&#xA;        }&#xA;    }&#xA;    &#xA;    public void start() {&#xA;    &#x9;startTime = ticks;&#xA;    &#x9;fromStart=true;&#xA;        lap();&#xA;        fromStart=false;&#xA;        for (StopWatchListener listener : stopWatchListener){&#xA;        &#x9;System.out.println(&quot;bla&quot;);&#xA;        &#x9;listener.stopWatchChanged(this, 2);        &#x9;&#xA;        }&#xA;    }&#xA;    public boolean isStarted() {&#xA;    &#x9;return startTime >= 0;&#xA;    }&#xA;    &#xA;    public void stop() {&#xA;    &#x9;stopTime = ticks;&#xA;    &#x9;lap();&#xA;    &#x9;for (StopWatchListener listener : stopWatchListener){&#xA;    &#x9;&#x9;listener.stopWatchChanged(this, 8);        &#x9;&#xA;    &#x9;}&#xA;    }&#xA;    public boolean isStopped() {&#xA;    &#x9;return stopTime >= 0;&#xA;    }&#xA;    &#xA;    public int getTime() {&#xA;        if (isStopped()) {&#xA;            return stopTime - startTime;&#xA;        } else if (isStarted()) {&#xA;            return ticks - startTime;&#xA;        } else {&#xA;            return -1;&#xA;        }&#xA;    }&#xA;    public void lap() {&#xA;    &#x9;if (lapStartTime >= 0) {&#xA;    &#x9;&#x9;lapTime = ticks - lapStartTime;&#xA;    &#x9;}&#xA;    &#x9;lapStartTime = ticks;&#xA;    &#x9;if (!isStopped() &amp;&amp; !fromStart){&#xA;&#x9;    &#x9;for (StopWatchListener listener : stopWatchListener){&#xA;&#x9;        &#x9;listener.stopWatchChanged(this, 4);   &#xA;&#x9;    &#x9;}&#xA;        }&#xA;    }&#xA;    &#xA;    public int getLapTime() {&#xA;        if (lapStartTime >= 0) {&#xA;            return ticks - lapStartTime;&#xA;        } else {&#xA;            return -1;&#xA;        }&#xA;    }&#xA;    public int getLastLapTime() {&#xA;        return lapTime;&#xA;    }&#xA;    &#xA;    &#xA;    public void addStopWatchListener(StopWatchListener listener) {&#xA;    &#x9;stopWatchListener.add(listener);&#xA;    }&#xA;    public void removeStopWatchListener(StopWatchListener listener) {&#xA;    &#x9;stopWatchListener.remove(listener);&#xA;    }&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1456759204007" sizeMeasure="89">
          <edit xsi:type="exercise:StringEdit" storedString="package objectstructures;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collection;&#xA;&#xA;public class StopWatch {&#xA;    private Collection&lt;StopWatchListener> stopWatchListener = new ArrayList&lt;StopWatchListener>();&#xA;&#xA;    private int ticks = 0;&#xA;    private int startTime = -1;&#xA;    private int stopTime = -1;&#xA;    private int lapStartTime = -1;&#xA;    private int lapTime = -1;&#xA;    private boolean fromStart=false;&#xA;    &#xA;    public int getTicks() {&#xA;        return ticks;&#xA;    }&#xA;    public void tick(int ticks) {&#xA;        this.ticks += ticks;&#xA;        for (StopWatchListener listener : stopWatchListener){&#xA;        &#x9;listener.stopWatchChanged(this, 1);        &#x9;&#xA;        }&#xA;    }&#xA;    &#xA;    public void start() {&#xA;    &#x9;startTime = ticks;&#xA;    &#x9;fromStart=true;&#xA;        lap();&#xA;        fromStart=false;&#xA;        for (StopWatchListener listener : stopWatchListener){&#xA;        &#x9;listener.stopWatchChanged(this, 2);        &#x9;&#xA;        }&#xA;    }&#xA;    public boolean isStarted() {&#xA;    &#x9;return startTime >= 0;&#xA;    }&#xA;    &#xA;    public void stop() {&#xA;    &#x9;stopTime = ticks;&#xA;    &#x9;lap();&#xA;    &#x9;for (StopWatchListener listener : stopWatchListener){&#xA;    &#x9;&#x9;listener.stopWatchChanged(this, 8);        &#x9;&#xA;    &#x9;}&#xA;    }&#xA;    public boolean isStopped() {&#xA;    &#x9;return stopTime >= 0;&#xA;    }&#xA;    &#xA;    public int getTime() {&#xA;        if (isStopped()) {&#xA;            return stopTime - startTime;&#xA;        } else if (isStarted()) {&#xA;            return ticks - startTime;&#xA;        } else {&#xA;            return -1;&#xA;        }&#xA;    }&#xA;    public void lap() {&#xA;    &#x9;if (lapStartTime >= 0) {&#xA;    &#x9;&#x9;lapTime = ticks - lapStartTime;&#xA;    &#x9;}&#xA;    &#x9;lapStartTime = ticks;&#xA;    &#x9;if (!isStopped() &amp;&amp; !fromStart){&#xA;&#x9;    &#x9;for (StopWatchListener listener : stopWatchListener){&#xA;&#x9;        &#x9;listener.stopWatchChanged(this, 4);   &#xA;&#x9;    &#x9;}&#xA;        }&#xA;    }&#xA;    &#xA;    public int getLapTime() {&#xA;        if (lapStartTime >= 0) {&#xA;            return ticks - lapStartTime;&#xA;        } else {&#xA;            return -1;&#xA;        }&#xA;    }&#xA;    public int getLastLapTime() {&#xA;        return lapTime;&#xA;    }&#xA;    &#xA;    &#xA;    public void addStopWatchListener(StopWatchListener listener) {&#xA;    &#x9;stopWatchListener.add(listener);&#xA;    }&#xA;    public void removeStopWatchListener(StopWatchListener listener) {&#xA;    &#x9;stopWatchListener.remove(listener);&#xA;    }&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1456759656266" sizeMeasure="92">
          <edit xsi:type="exercise:StringEdit" storedString="package objectstructures;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collection;&#xA;&#xA;public class StopWatch {&#xA;    private Collection&lt;StopWatchListener> stopWatchListener = new ArrayList&lt;StopWatchListener>();&#xA;    private StopWatchManager stopWatchManager = new StopWatchManager();&#xA;    private int ticks = 0;&#xA;    private int startTime = -1;&#xA;    private int stopTime = -1;&#xA;    private int lapStartTime = -1;&#xA;    private int lapTime = -1;&#xA;    private boolean fromStart=false;&#xA;    &#xA;    public int getTicks() {&#xA;        return ticks;&#xA;    }&#xA;    public void tick(int ticks) {&#xA;        this.ticks += ticks;&#xA;        for (StopWatchListener listener : stopWatchListener){&#xA;        &#x9;listener.stopWatchChanged(this, 1);        &#x9;&#xA;        }&#xA;    }&#xA;    &#xA;    public void start() {&#xA;    &#x9;startTime = ticks;&#xA;    &#x9;fromStart=true;&#xA;        lap();&#xA;        fromStart=false;&#xA;        for (StopWatchListener listener : stopWatchListener){&#xA;        &#x9;listener.stopWatchChanged(this, 2);        &#x9;&#xA;        }&#xA;        for (StopWatchListener listener : stopWatchManager.getListener()) {&#xA;        &#x9;listener.stopWatchChanged(this,2);&#xA;        }&#xA;    }&#xA;    public boolean isStarted() {&#xA;    &#x9;return startTime >= 0;&#xA;    }&#xA;    &#xA;    public void stop() {&#xA;    &#x9;stopTime = ticks;&#xA;    &#x9;lap();&#xA;    &#x9;for (StopWatchListener listener : stopWatchListener){&#xA;    &#x9;&#x9;listener.stopWatchChanged(this, 8);        &#x9;&#xA;    &#x9;}&#xA;    }&#xA;    public boolean isStopped() {&#xA;    &#x9;return stopTime >= 0;&#xA;    }&#xA;    &#xA;    public int getTime() {&#xA;        if (isStopped()) {&#xA;            return stopTime - startTime;&#xA;        } else if (isStarted()) {&#xA;            return ticks - startTime;&#xA;        } else {&#xA;            return -1;&#xA;        }&#xA;    }&#xA;    public void lap() {&#xA;    &#x9;if (lapStartTime >= 0) {&#xA;    &#x9;&#x9;lapTime = ticks - lapStartTime;&#xA;    &#x9;}&#xA;    &#x9;lapStartTime = ticks;&#xA;    &#x9;if (!isStopped() &amp;&amp; !fromStart){&#xA;&#x9;    &#x9;for (StopWatchListener listener : stopWatchListener){&#xA;&#x9;        &#x9;listener.stopWatchChanged(this, 4);   &#xA;&#x9;    &#x9;}&#xA;        }&#xA;    }&#xA;    &#xA;    public int getLapTime() {&#xA;        if (lapStartTime >= 0) {&#xA;            return ticks - lapStartTime;&#xA;        } else {&#xA;            return -1;&#xA;        }&#xA;    }&#xA;    public int getLastLapTime() {&#xA;        return lapTime;&#xA;    }&#xA;    &#xA;    &#xA;    public void addStopWatchListener(StopWatchListener listener) {&#xA;    &#x9;stopWatchListener.add(listener);&#xA;    }&#xA;    public void removeStopWatchListener(StopWatchListener listener) {&#xA;    &#x9;stopWatchListener.remove(listener);&#xA;    }&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1456759823182" sizeMeasure="93">
          <edit xsi:type="exercise:StringEdit" storedString="package objectstructures;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collection;&#xA;&#xA;public class StopWatch {&#xA;    private Collection&lt;StopWatchListener> stopWatchListener = new ArrayList&lt;StopWatchListener>();&#xA;    private StopWatchManager stopWatchManager = new StopWatchManager();&#xA;    private int ticks = 0;&#xA;    private int startTime = -1;&#xA;    private int stopTime = -1;&#xA;    private int lapStartTime = -1;&#xA;    private int lapTime = -1;&#xA;    private boolean fromStart=false;&#xA;    &#xA;    public int getTicks() {&#xA;        return ticks;&#xA;    }&#xA;    public void tick(int ticks) {&#xA;        this.ticks += ticks;&#xA;        for (StopWatchListener listener : stopWatchListener){&#xA;        &#x9;listener.stopWatchChanged(this, 1);        &#x9;&#xA;        }&#xA;    }&#xA;    &#xA;    public void start() {&#xA;    &#x9;startTime = ticks;&#xA;    &#x9;fromStart=true;&#xA;        lap();&#xA;        fromStart=false;&#xA;        for (StopWatchListener listener : stopWatchListener){&#xA;        &#x9;listener.stopWatchChanged(this, 2);        &#x9;&#xA;        }&#xA;        for (StopWatchListener listener : stopWatchManager.getListener()) {&#xA;        &#x9;System.out.println(&quot;bla&quot;);&#xA;        &#x9;listener.stopWatchChanged(this,2);&#xA;        }&#xA;    }&#xA;    public boolean isStarted() {&#xA;    &#x9;return startTime >= 0;&#xA;    }&#xA;    &#xA;    public void stop() {&#xA;    &#x9;stopTime = ticks;&#xA;    &#x9;lap();&#xA;    &#x9;for (StopWatchListener listener : stopWatchListener){&#xA;    &#x9;&#x9;listener.stopWatchChanged(this, 8);        &#x9;&#xA;    &#x9;}&#xA;    }&#xA;    public boolean isStopped() {&#xA;    &#x9;return stopTime >= 0;&#xA;    }&#xA;    &#xA;    public int getTime() {&#xA;        if (isStopped()) {&#xA;            return stopTime - startTime;&#xA;        } else if (isStarted()) {&#xA;            return ticks - startTime;&#xA;        } else {&#xA;            return -1;&#xA;        }&#xA;    }&#xA;    public void lap() {&#xA;    &#x9;if (lapStartTime >= 0) {&#xA;    &#x9;&#x9;lapTime = ticks - lapStartTime;&#xA;    &#x9;}&#xA;    &#x9;lapStartTime = ticks;&#xA;    &#x9;if (!isStopped() &amp;&amp; !fromStart){&#xA;&#x9;    &#x9;for (StopWatchListener listener : stopWatchListener){&#xA;&#x9;        &#x9;listener.stopWatchChanged(this, 4);   &#xA;&#x9;    &#x9;}&#xA;        }&#xA;    }&#xA;    &#xA;    public int getLapTime() {&#xA;        if (lapStartTime >= 0) {&#xA;            return ticks - lapStartTime;&#xA;        } else {&#xA;            return -1;&#xA;        }&#xA;    }&#xA;    public int getLastLapTime() {&#xA;        return lapTime;&#xA;    }&#xA;    &#xA;    &#xA;    public void addStopWatchListener(StopWatchListener listener) {&#xA;    &#x9;stopWatchListener.add(listener);&#xA;    }&#xA;    public void removeStopWatchListener(StopWatchListener listener) {&#xA;    &#x9;stopWatchListener.remove(listener);&#xA;    }&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1456765817602" sizeMeasure="93" errorCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package objectstructures;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collection;&#xA;&#xA;public class StopWatch implements StopWatchListener {&#xA;    private Collection&lt;StopWatchListener> stopWatchListener = new ArrayList&lt;StopWatchListener>();&#xA;    private StopWatchManager stopWatchManager = new StopWatchManager();&#xA;    private int ticks = 0;&#xA;    private int startTime = -1;&#xA;    private int stopTime = -1;&#xA;    private int lapStartTime = -1;&#xA;    private int lapTime = -1;&#xA;    private boolean fromStart=false;&#xA;    &#xA;    public int getTicks() {&#xA;        return ticks;&#xA;    }&#xA;    public void tick(int ticks) {&#xA;        this.ticks += ticks;&#xA;        for (StopWatchListener listener : stopWatchListener){&#xA;        &#x9;listener.stopWatchChanged(this, 1);        &#x9;&#xA;        }&#xA;    }&#xA;    &#xA;    public void start() {&#xA;    &#x9;startTime = ticks;&#xA;    &#x9;fromStart=true;&#xA;        lap();&#xA;        fromStart=false;&#xA;        for (StopWatchListener listener : stopWatchListener){&#xA;        &#x9;listener.stopWatchChanged(this, 2);        &#x9;&#xA;        }&#xA;        for (StopWatchListener listener : stopWatchManager.getListener()) {&#xA;        &#x9;System.out.println(&quot;bla&quot;);&#xA;        &#x9;listener.stopWatchChanged(this,2);&#xA;        }&#xA;    }&#xA;    public boolean isStarted() {&#xA;    &#x9;return startTime >= 0;&#xA;    }&#xA;    &#xA;    public void stop() {&#xA;    &#x9;stopTime = ticks;&#xA;    &#x9;lap();&#xA;    &#x9;for (StopWatchListener listener : stopWatchListener){&#xA;    &#x9;&#x9;listener.stopWatchChanged(this, 8);        &#x9;&#xA;    &#x9;}&#xA;    }&#xA;    public boolean isStopped() {&#xA;    &#x9;return stopTime >= 0;&#xA;    }&#xA;    &#xA;    public int getTime() {&#xA;        if (isStopped()) {&#xA;            return stopTime - startTime;&#xA;        } else if (isStarted()) {&#xA;            return ticks - startTime;&#xA;        } else {&#xA;            return -1;&#xA;        }&#xA;    }&#xA;    public void lap() {&#xA;    &#x9;if (lapStartTime >= 0) {&#xA;    &#x9;&#x9;lapTime = ticks - lapStartTime;&#xA;    &#x9;}&#xA;    &#x9;lapStartTime = ticks;&#xA;    &#x9;if (!isStopped() &amp;&amp; !fromStart){&#xA;&#x9;    &#x9;for (StopWatchListener listener : stopWatchListener){&#xA;&#x9;        &#x9;listener.stopWatchChanged(this, 4);   &#xA;&#x9;    &#x9;}&#xA;        }&#xA;    }&#xA;    &#xA;    public int getLapTime() {&#xA;        if (lapStartTime >= 0) {&#xA;            return ticks - lapStartTime;&#xA;        } else {&#xA;            return -1;&#xA;        }&#xA;    }&#xA;    public int getLastLapTime() {&#xA;        return lapTime;&#xA;    }&#xA;    &#xA;    &#xA;    public void addStopWatchListener(StopWatchListener listener) {&#xA;    &#x9;stopWatchListener.add(listener);&#xA;    }&#xA;    public void removeStopWatchListener(StopWatchListener listener) {&#xA;    &#x9;stopWatchListener.remove(listener);&#xA;    }&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1456765909710" sizeMeasure="97">
          <edit xsi:type="exercise:StringEdit" storedString="package objectstructures;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collection;&#xA;&#xA;public class StopWatch implements StopWatchListener {&#xA;    private Collection&lt;StopWatchListener> stopWatchListener = new ArrayList&lt;StopWatchListener>();&#xA;    private StopWatchManager stopWatchManager = new StopWatchManager();&#xA;    private int ticks = 0;&#xA;    private int startTime = -1;&#xA;    private int stopTime = -1;&#xA;    private int lapStartTime = -1;&#xA;    private int lapTime = -1;&#xA;    private boolean fromStart=false;&#xA;    &#xA;    public int getTicks() {&#xA;        return ticks;&#xA;    }&#xA;    public void tick(int ticks) {&#xA;        this.ticks += ticks;&#xA;        for (StopWatchListener listener : stopWatchListener){&#xA;        &#x9;listener.stopWatchChanged(this, 1);        &#x9;&#xA;        }&#xA;    }&#xA;    &#xA;    public void start() {&#xA;    &#x9;startTime = ticks;&#xA;    &#x9;fromStart=true;&#xA;        lap();&#xA;        fromStart=false;&#xA;        for (StopWatchListener listener : stopWatchListener){&#xA;        &#x9;listener.stopWatchChanged(this, 2);        &#x9;&#xA;        }&#xA;        for (StopWatchListener listener : stopWatchManager.getListener()) {&#xA;        &#x9;System.out.println(&quot;bla&quot;);&#xA;        &#x9;listener.stopWatchChanged(this,2);&#xA;        }&#xA;    }&#xA;    public boolean isStarted() {&#xA;    &#x9;return startTime >= 0;&#xA;    }&#xA;    &#xA;    public void stop() {&#xA;    &#x9;stopTime = ticks;&#xA;    &#x9;lap();&#xA;    &#x9;for (StopWatchListener listener : stopWatchListener){&#xA;    &#x9;&#x9;listener.stopWatchChanged(this, 8);        &#x9;&#xA;    &#x9;}&#xA;    }&#xA;    public boolean isStopped() {&#xA;    &#x9;return stopTime >= 0;&#xA;    }&#xA;    &#xA;    public int getTime() {&#xA;        if (isStopped()) {&#xA;            return stopTime - startTime;&#xA;        } else if (isStarted()) {&#xA;            return ticks - startTime;&#xA;        } else {&#xA;            return -1;&#xA;        }&#xA;    }&#xA;    public void lap() {&#xA;    &#x9;if (lapStartTime >= 0) {&#xA;    &#x9;&#x9;lapTime = ticks - lapStartTime;&#xA;    &#x9;}&#xA;    &#x9;lapStartTime = ticks;&#xA;    &#x9;if (!isStopped() &amp;&amp; !fromStart){&#xA;&#x9;    &#x9;for (StopWatchListener listener : stopWatchListener){&#xA;&#x9;        &#x9;listener.stopWatchChanged(this, 4);   &#xA;&#x9;    &#x9;}&#xA;        }&#xA;    }&#xA;    &#xA;    public int getLapTime() {&#xA;        if (lapStartTime >= 0) {&#xA;            return ticks - lapStartTime;&#xA;        } else {&#xA;            return -1;&#xA;        }&#xA;    }&#xA;    public int getLastLapTime() {&#xA;        return lapTime;&#xA;    }&#xA;    &#xA;    &#xA;    public void addStopWatchListener(StopWatchListener listener) {&#xA;    &#x9;stopWatchListener.add(listener);&#xA;    }&#xA;    public void removeStopWatchListener(StopWatchListener listener) {&#xA;    &#x9;stopWatchListener.remove(listener);&#xA;    }&#xA;&#x9;@Override&#xA;&#x9;public void stopWatchChanged(StopWatch stopWatch, int what) {&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1456766364523" sizeMeasure="93" warningCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package objectstructures;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collection;&#xA;&#xA;public class StopWatch implements StopWatchListener {&#xA;    private Collection&lt;StopWatchListener> stopWatchListener = new ArrayList&lt;StopWatchListener>();&#xA;    private StopWatchManager stopWatchManager = new StopWatchManager();&#xA;    private int ticks = 0;&#xA;    private int startTime = -1;&#xA;    private int stopTime = -1;&#xA;    private int lapStartTime = -1;&#xA;    private int lapTime = -1;&#xA;    private boolean fromStart=false;&#xA;    &#xA;    public int getTicks() {&#xA;        return ticks;&#xA;    }&#xA;    public void tick(int ticks) {&#xA;        this.ticks += ticks;&#xA;        for (StopWatchListener listener : stopWatchListener){&#xA;        &#x9;listener.stopWatchChanged(this, 1);        &#x9;&#xA;        }&#xA;    }&#xA;    &#xA;    public void start() {&#xA;    &#x9;startTime = ticks;&#xA;    &#x9;fromStart=true;&#xA;        lap();&#xA;        fromStart=false;&#xA;        for (StopWatchListener listener : stopWatchListener){&#xA;        &#x9;listener.stopWatchChanged(this, 2);        &#x9;&#xA;        }&#xA;    }&#xA;    public boolean isStarted() {&#xA;    &#x9;return startTime >= 0;&#xA;    }&#xA;    &#xA;    public void stop() {&#xA;    &#x9;stopTime = ticks;&#xA;    &#x9;lap();&#xA;    &#x9;for (StopWatchListener listener : stopWatchListener){&#xA;    &#x9;&#x9;listener.stopWatchChanged(this, 8);        &#x9;&#xA;    &#x9;}&#xA;    }&#xA;    public boolean isStopped() {&#xA;    &#x9;return stopTime >= 0;&#xA;    }&#xA;    &#xA;    public int getTime() {&#xA;        if (isStopped()) {&#xA;            return stopTime - startTime;&#xA;        } else if (isStarted()) {&#xA;            return ticks - startTime;&#xA;        } else {&#xA;            return -1;&#xA;        }&#xA;    }&#xA;    public void lap() {&#xA;    &#x9;if (lapStartTime >= 0) {&#xA;    &#x9;&#x9;lapTime = ticks - lapStartTime;&#xA;    &#x9;}&#xA;    &#x9;lapStartTime = ticks;&#xA;    &#x9;if (!isStopped() &amp;&amp; !fromStart){&#xA;&#x9;    &#x9;for (StopWatchListener listener : stopWatchListener){&#xA;&#x9;        &#x9;listener.stopWatchChanged(this, 4);   &#xA;&#x9;    &#x9;}&#xA;        }&#xA;    }&#xA;    &#xA;    public int getLapTime() {&#xA;        if (lapStartTime >= 0) {&#xA;            return ticks - lapStartTime;&#xA;        } else {&#xA;            return -1;&#xA;        }&#xA;    }&#xA;    public int getLastLapTime() {&#xA;        return lapTime;&#xA;    }&#xA;    &#xA;    &#xA;    public void addStopWatchListener(StopWatchListener listener) {&#xA;    &#x9;stopWatchListener.add(listener);&#xA;    }&#xA;    public void removeStopWatchListener(StopWatchListener listener) {&#xA;    &#x9;stopWatchListener.remove(listener);&#xA;    }&#xA;&#x9;@Override&#xA;&#x9;public void stopWatchChanged(StopWatch stopWatch, int what) {&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1456766460683" sizeMeasure="92">
          <edit xsi:type="exercise:StringEdit" storedString="package objectstructures;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collection;&#xA;&#xA;public class StopWatch implements StopWatchListener {&#xA;    private Collection&lt;StopWatchListener> stopWatchListener = new ArrayList&lt;StopWatchListener>();&#xA;    private int ticks = 0;&#xA;    private int startTime = -1;&#xA;    private int stopTime = -1;&#xA;    private int lapStartTime = -1;&#xA;    private int lapTime = -1;&#xA;    private boolean fromStart=false;&#xA;    &#xA;    public int getTicks() {&#xA;        return ticks;&#xA;    }&#xA;    public void tick(int ticks) {&#xA;        this.ticks += ticks;&#xA;        for (StopWatchListener listener : stopWatchListener){&#xA;        &#x9;listener.stopWatchChanged(this, 1);        &#x9;&#xA;        }&#xA;    }&#xA;    &#xA;    public void start() {&#xA;    &#x9;startTime = ticks;&#xA;    &#x9;fromStart=true;&#xA;        lap();&#xA;        fromStart=false;&#xA;        for (StopWatchListener listener : stopWatchListener){&#xA;        &#x9;listener.stopWatchChanged(this, 2);        &#x9;&#xA;        }&#xA;    }&#xA;    public boolean isStarted() {&#xA;    &#x9;return startTime >= 0;&#xA;    }&#xA;    &#xA;    public void stop() {&#xA;    &#x9;stopTime = ticks;&#xA;    &#x9;lap();&#xA;    &#x9;for (StopWatchListener listener : stopWatchListener){&#xA;    &#x9;&#x9;listener.stopWatchChanged(this, 8);        &#x9;&#xA;    &#x9;}&#xA;    }&#xA;    public boolean isStopped() {&#xA;    &#x9;return stopTime >= 0;&#xA;    }&#xA;    &#xA;    public int getTime() {&#xA;        if (isStopped()) {&#xA;            return stopTime - startTime;&#xA;        } else if (isStarted()) {&#xA;            return ticks - startTime;&#xA;        } else {&#xA;            return -1;&#xA;        }&#xA;    }&#xA;    public void lap() {&#xA;    &#x9;if (lapStartTime >= 0) {&#xA;    &#x9;&#x9;lapTime = ticks - lapStartTime;&#xA;    &#x9;}&#xA;    &#x9;lapStartTime = ticks;&#xA;    &#x9;if (!isStopped() &amp;&amp; !fromStart){&#xA;&#x9;    &#x9;for (StopWatchListener listener : stopWatchListener){&#xA;&#x9;        &#x9;listener.stopWatchChanged(this, 4);   &#xA;&#x9;    &#x9;}&#xA;        }&#xA;    }&#xA;    &#xA;    public int getLapTime() {&#xA;        if (lapStartTime >= 0) {&#xA;            return ticks - lapStartTime;&#xA;        } else {&#xA;            return -1;&#xA;        }&#xA;    }&#xA;    public int getLastLapTime() {&#xA;        return lapTime;&#xA;    }&#xA;    &#xA;    &#xA;    public void addStopWatchListener(StopWatchListener listener) {&#xA;    &#x9;stopWatchListener.add(listener);&#xA;    }&#xA;    public void removeStopWatchListener(StopWatchListener listener) {&#xA;    &#x9;stopWatchListener.remove(listener);&#xA;    }&#xA;&#x9;@Override&#xA;&#x9;public void stopWatchChanged(StopWatch stopWatch, int what) {&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1456766481388" sizeMeasure="94">
          <edit xsi:type="exercise:StringEdit" storedString="package objectstructures;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collection;&#xA;&#xA;public class StopWatch implements StopWatchListener {&#xA;    private Collection&lt;StopWatchListener> stopWatchListener = new ArrayList&lt;StopWatchListener>();&#xA;    private int ticks = 0;&#xA;    private int startTime = -1;&#xA;    private int stopTime = -1;&#xA;    private int lapStartTime = -1;&#xA;    private int lapTime = -1;&#xA;    private boolean fromStart=false;&#xA;    &#xA;    public int getTicks() {&#xA;        return ticks;&#xA;    }&#xA;    public void tick(int ticks) {&#xA;        this.ticks += ticks;&#xA;        for (StopWatchListener listener : stopWatchListener){&#xA;        &#x9;listener.stopWatchChanged(this, 1);        &#x9;&#xA;        }&#xA;    }&#xA;    &#xA;    public void start() {&#xA;    &#x9;startTime = ticks;&#xA;    &#x9;fromStart=true;&#xA;        lap();&#xA;        fromStart=false;&#xA;        for (StopWatchListener listener : stopWatchListener){&#xA;        &#x9;listener.stopWatchChanged(this, 2);        &#x9;&#xA;        }&#xA;    }&#xA;    public boolean isStarted() {&#xA;    &#x9;return startTime >= 0;&#xA;    }&#xA;    &#xA;    public void stop() {&#xA;    &#x9;stopTime = ticks;&#xA;    &#x9;lap();&#xA;    &#x9;for (StopWatchListener listener : stopWatchListener){&#xA;    &#x9;&#x9;listener.stopWatchChanged(this, 8);        &#x9;&#xA;    &#x9;}&#xA;    }&#xA;    public boolean isStopped() {&#xA;    &#x9;return stopTime >= 0;&#xA;    }&#xA;    &#xA;    public int getTime() {&#xA;        if (isStopped()) {&#xA;            return stopTime - startTime;&#xA;        } else if (isStarted()) {&#xA;            return ticks - startTime;&#xA;        } else {&#xA;            return -1;&#xA;        }&#xA;    }&#xA;    public void lap() {&#xA;    &#x9;if (lapStartTime >= 0) {&#xA;    &#x9;&#x9;lapTime = ticks - lapStartTime;&#xA;    &#x9;}&#xA;    &#x9;lapStartTime = ticks;&#xA;    &#x9;if (!isStopped() &amp;&amp; !fromStart){&#xA;&#x9;    &#x9;for (StopWatchListener listener : stopWatchListener){&#xA;&#x9;        &#x9;listener.stopWatchChanged(this, 4);   &#xA;&#x9;    &#x9;}&#xA;        }&#xA;    }&#xA;    &#xA;    public int getLapTime() {&#xA;        if (lapStartTime >= 0) {&#xA;            return ticks - lapStartTime;&#xA;        } else {&#xA;            return -1;&#xA;        }&#xA;    }&#xA;    public int getLastLapTime() {&#xA;        return lapTime;&#xA;    }&#xA;    &#xA;    &#xA;    public void addStopWatchListener(StopWatchListener listener) {&#xA;    &#x9;stopWatchListener.add(listener);&#xA;    }&#xA;    public void removeStopWatchListener(StopWatchListener listener) {&#xA;    &#x9;stopWatchListener.remove(listener);&#xA;    }&#xA;&#x9;@Override&#xA;&#x9;public void stopWatchChanged(StopWatch stopWatch, int what) {&#xA;&#x9;&#x9;for (StopWatchListener listener : stopWatchListener){&#xA;&#x9;&#x9;&#x9;listener.stopWatchChanged(stopWatch, what);     &#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1456766533890" sizeMeasure="92">
          <edit xsi:type="exercise:StringEdit" storedString="package objectstructures;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collection;&#xA;&#xA;public class StopWatch implements StopWatchListener {&#xA;    private Collection&lt;StopWatchListener> stopWatchListener = new ArrayList&lt;StopWatchListener>();&#xA;    private int ticks = 0;&#xA;    private int startTime = -1;&#xA;    private int stopTime = -1;&#xA;    private int lapStartTime = -1;&#xA;    private int lapTime = -1;&#xA;    private boolean fromStart=false;&#xA;    &#xA;    public int getTicks() {&#xA;        return ticks;&#xA;    }&#xA;    public void tick(int ticks) {&#xA;        this.ticks += ticks;&#xA;        stopWatchChanged(this,1);&#xA;    }&#xA;    &#xA;    public void start() {&#xA;    &#x9;startTime = ticks;&#xA;    &#x9;fromStart=true;&#xA;        lap();&#xA;        fromStart=false;&#xA;        for (StopWatchListener listener : stopWatchListener){&#xA;        &#x9;listener.stopWatchChanged(this, 2);        &#x9;&#xA;        }&#xA;    }&#xA;    public boolean isStarted() {&#xA;    &#x9;return startTime >= 0;&#xA;    }&#xA;    &#xA;    public void stop() {&#xA;    &#x9;stopTime = ticks;&#xA;    &#x9;lap();&#xA;    &#x9;for (StopWatchListener listener : stopWatchListener){&#xA;    &#x9;&#x9;listener.stopWatchChanged(this, 8);        &#x9;&#xA;    &#x9;}&#xA;    }&#xA;    public boolean isStopped() {&#xA;    &#x9;return stopTime >= 0;&#xA;    }&#xA;    &#xA;    public int getTime() {&#xA;        if (isStopped()) {&#xA;            return stopTime - startTime;&#xA;        } else if (isStarted()) {&#xA;            return ticks - startTime;&#xA;        } else {&#xA;            return -1;&#xA;        }&#xA;    }&#xA;    public void lap() {&#xA;    &#x9;if (lapStartTime >= 0) {&#xA;    &#x9;&#x9;lapTime = ticks - lapStartTime;&#xA;    &#x9;}&#xA;    &#x9;lapStartTime = ticks;&#xA;    &#x9;if (!isStopped() &amp;&amp; !fromStart){&#xA;&#x9;    &#x9;for (StopWatchListener listener : stopWatchListener){&#xA;&#x9;        &#x9;listener.stopWatchChanged(this, 4);   &#xA;&#x9;    &#x9;}&#xA;        }&#xA;    }&#xA;    &#xA;    public int getLapTime() {&#xA;        if (lapStartTime >= 0) {&#xA;            return ticks - lapStartTime;&#xA;        } else {&#xA;            return -1;&#xA;        }&#xA;    }&#xA;    public int getLastLapTime() {&#xA;        return lapTime;&#xA;    }&#xA;    &#xA;    &#xA;    public void addStopWatchListener(StopWatchListener listener) {&#xA;    &#x9;stopWatchListener.add(listener);&#xA;    }&#xA;    public void removeStopWatchListener(StopWatchListener listener) {&#xA;    &#x9;stopWatchListener.remove(listener);&#xA;    }&#xA;&#x9;@Override&#xA;&#x9;public void stopWatchChanged(StopWatch stopWatch, int what) {&#xA;&#x9;&#x9;for (StopWatchListener listener : stopWatchListener){&#xA;&#x9;&#x9;&#x9;listener.stopWatchChanged(stopWatch, what);     &#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1456766547523" sizeMeasure="90">
          <edit xsi:type="exercise:StringEdit" storedString="package objectstructures;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collection;&#xA;&#xA;public class StopWatch implements StopWatchListener {&#xA;    private Collection&lt;StopWatchListener> stopWatchListener = new ArrayList&lt;StopWatchListener>();&#xA;    private int ticks = 0;&#xA;    private int startTime = -1;&#xA;    private int stopTime = -1;&#xA;    private int lapStartTime = -1;&#xA;    private int lapTime = -1;&#xA;    private boolean fromStart=false;&#xA;    &#xA;    public int getTicks() {&#xA;        return ticks;&#xA;    }&#xA;    public void tick(int ticks) {&#xA;        this.ticks += ticks;&#xA;        stopWatchChanged(this,1);&#xA;    }&#xA;    &#xA;    public void start() {&#xA;    &#x9;startTime = ticks;&#xA;    &#x9;fromStart=true;&#xA;        lap();&#xA;        fromStart=false;&#xA;        stopWatchChanged(this,2);&#xA;    }&#xA;    public boolean isStarted() {&#xA;    &#x9;return startTime >= 0;&#xA;    }&#xA;    &#xA;    public void stop() {&#xA;    &#x9;stopTime = ticks;&#xA;    &#x9;lap();&#xA;    &#x9;for (StopWatchListener listener : stopWatchListener){&#xA;    &#x9;&#x9;listener.stopWatchChanged(this, 8);        &#x9;&#xA;    &#x9;}&#xA;    }&#xA;    public boolean isStopped() {&#xA;    &#x9;return stopTime >= 0;&#xA;    }&#xA;    &#xA;    public int getTime() {&#xA;        if (isStopped()) {&#xA;            return stopTime - startTime;&#xA;        } else if (isStarted()) {&#xA;            return ticks - startTime;&#xA;        } else {&#xA;            return -1;&#xA;        }&#xA;    }&#xA;    public void lap() {&#xA;    &#x9;if (lapStartTime >= 0) {&#xA;    &#x9;&#x9;lapTime = ticks - lapStartTime;&#xA;    &#x9;}&#xA;    &#x9;lapStartTime = ticks;&#xA;    &#x9;if (!isStopped() &amp;&amp; !fromStart){&#xA;&#x9;    &#x9;for (StopWatchListener listener : stopWatchListener){&#xA;&#x9;        &#x9;listener.stopWatchChanged(this, 4);   &#xA;&#x9;    &#x9;}&#xA;        }&#xA;    }&#xA;    &#xA;    public int getLapTime() {&#xA;        if (lapStartTime >= 0) {&#xA;            return ticks - lapStartTime;&#xA;        } else {&#xA;            return -1;&#xA;        }&#xA;    }&#xA;    public int getLastLapTime() {&#xA;        return lapTime;&#xA;    }&#xA;    &#xA;    &#xA;    public void addStopWatchListener(StopWatchListener listener) {&#xA;    &#x9;stopWatchListener.add(listener);&#xA;    }&#xA;    public void removeStopWatchListener(StopWatchListener listener) {&#xA;    &#x9;stopWatchListener.remove(listener);&#xA;    }&#xA;&#x9;@Override&#xA;&#x9;public void stopWatchChanged(StopWatch stopWatch, int what) {&#xA;&#x9;&#x9;for (StopWatchListener listener : stopWatchListener){&#xA;&#x9;&#x9;&#x9;listener.stopWatchChanged(stopWatch, what);     &#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1456766572020" sizeMeasure="86">
          <edit xsi:type="exercise:StringEdit" storedString="package objectstructures;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collection;&#xA;&#xA;public class StopWatch implements StopWatchListener {&#xA;    private Collection&lt;StopWatchListener> stopWatchListener = new ArrayList&lt;StopWatchListener>();&#xA;    private int ticks = 0;&#xA;    private int startTime = -1;&#xA;    private int stopTime = -1;&#xA;    private int lapStartTime = -1;&#xA;    private int lapTime = -1;&#xA;    private boolean fromStart=false;&#xA;    &#xA;    public int getTicks() {&#xA;        return ticks;&#xA;    }&#xA;    public void tick(int ticks) {&#xA;        this.ticks += ticks;&#xA;        stopWatchChanged(this,1);&#xA;    }&#xA;    &#xA;    public void start() {&#xA;    &#x9;startTime = ticks;&#xA;    &#x9;fromStart=true;&#xA;        lap();&#xA;        fromStart=false;&#xA;        stopWatchChanged(this,2);&#xA;    }&#xA;    public boolean isStarted() {&#xA;    &#x9;return startTime >= 0;&#xA;    }&#xA;    &#xA;    public void stop() {&#xA;    &#x9;stopTime = ticks;&#xA;    &#x9;lap();&#xA;    &#x9;stopWatchChanged(this,8);&#xA;    }&#xA;    public boolean isStopped() {&#xA;    &#x9;return stopTime >= 0;&#xA;    }&#xA;    &#xA;    public int getTime() {&#xA;        if (isStopped()) {&#xA;            return stopTime - startTime;&#xA;        } else if (isStarted()) {&#xA;            return ticks - startTime;&#xA;        } else {&#xA;            return -1;&#xA;        }&#xA;    }&#xA;    public void lap() {&#xA;    &#x9;if (lapStartTime >= 0) {&#xA;    &#x9;&#x9;lapTime = ticks - lapStartTime;&#xA;    &#x9;}&#xA;    &#x9;lapStartTime = ticks;&#xA;    &#x9;if (!isStopped() &amp;&amp; !fromStart){&#xA;&#x9;    &#x9;stopWatchChanged(this,4);&#xA;        }&#xA;    }&#xA;    &#xA;    public int getLapTime() {&#xA;        if (lapStartTime >= 0) {&#xA;            return ticks - lapStartTime;&#xA;        } else {&#xA;            return -1;&#xA;        }&#xA;    }&#xA;    public int getLastLapTime() {&#xA;        return lapTime;&#xA;    }&#xA;    &#xA;    &#xA;    public void addStopWatchListener(StopWatchListener listener) {&#xA;    &#x9;stopWatchListener.add(listener);&#xA;    }&#xA;    public void removeStopWatchListener(StopWatchListener listener) {&#xA;    &#x9;stopWatchListener.remove(listener);&#xA;    }&#xA;&#x9;@Override&#xA;&#x9;public void stopWatchChanged(StopWatch stopWatch, int what) {&#xA;&#x9;&#x9;for (StopWatchListener listener : stopWatchListener){&#xA;&#x9;&#x9;&#x9;listener.stopWatchChanged(stopWatch, what);     &#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
      </proposals>
      <proposals xsi:type="jdt:JdtSourceEditProposal" question="/0/@parts.0/@tasks.1/@q" answer="/0/@parts.0/@tasks.1/@a">
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1456747567199" sizeMeasure="46" warningCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package objectstructures;&#xA;&#xA;import java.util.Collection;&#xA;import java.util.HashMap;&#xA;import java.util.Map;&#xA;&#xA;public class StopWatchManager {&#xA;&#x9;&#xA;&#x9;Map&lt;String, StopWatch> stopWatchMap = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;StopWatch newStopWatch(String name) {&#xA;&#x9;&#x9;StopWatch watch = new StopWatch();&#xA;&#x9;&#x9;stopWatchMap.put(name, watch);&#xA;&#x9;&#x9;return watch;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void removeStopWatch(String name) {&#xA;&#x9;&#x9;stopWatchMap.remove(name);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void tick(int ticks) {&#xA;//&#x9;&#x9;for(String key : map.keySet())&#xA;&#x9;&#x9;for(StopWatch value : stopWatchMap.values()) {&#xA;&#x9;&#x9;&#x9;value.tick(ticks);&#xA;&#x9;&#x9;}&#x9;&#x9;&#xA;&#x9;}&#xA;//&#x9;get watches by giving a name, but also need an index, therefore use map&#xA;&#x9;public StopWatch getStopWatch(String name) {&#xA;&#x9;&#x9;return stopWatchMap.get(name);&#xA;&#x9;}&#xA;&#x9;&#xA;//&#x9;map is also a part of the collection hierarchy&#xA;&#x9;public Collection&lt;StopWatch> getAllWatches() {&#xA;&#x9;&#x9;return (Collection&lt;StopWatch>) stopWatchMap;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public Collection&lt;StopWatch> getAllStartedWatches() {&#xA;&#x9;&#x9;return null;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public Collection&lt;StopWatch> getAllStoppedWatches() {&#xA;&#x9;&#x9;return null;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1456747800308" sizeMeasure="59" warningCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package objectstructures;&#xA;&#xA;import java.util.Collection;&#xA;import java.util.HashMap;&#xA;import java.util.Map;&#xA;&#xA;public class StopWatchManager {&#xA;&#x9;&#xA;&#x9;Map&lt;String, StopWatch> stopWatchMap = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;StopWatch newStopWatch(String name) {&#xA;&#x9;&#x9;StopWatch watch = new StopWatch();&#xA;&#x9;&#x9;stopWatchMap.put(name, watch);&#xA;&#x9;&#x9;return watch;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void removeStopWatch(String name) {&#xA;&#x9;&#x9;stopWatchMap.remove(name);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void tick(int ticks) {&#xA;//&#x9;&#x9;for(String key : map.keySet())&#xA;&#x9;&#x9;for(StopWatch value : stopWatchMap.values()) {&#xA;&#x9;&#x9;&#x9;value.tick(ticks);&#xA;&#x9;&#x9;}&#x9;&#x9;&#xA;&#x9;}&#xA;//&#x9;get watches by giving a name, but also need an index, therefore use map&#xA;&#x9;public StopWatch getStopWatch(String name) {&#xA;&#x9;&#x9;return stopWatchMap.get(name);&#xA;&#x9;}&#xA;&#x9;&#xA;//&#x9;map is also a part of the collection hierarchy&#xA;&#x9;public Collection&lt;StopWatch> getAllWatches() {&#xA;&#x9;&#x9;return (Collection&lt;StopWatch>) stopWatchMap;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public Collection&lt;StopWatch> getAllStartedWatches() {&#xA;&#x9;&#x9;return null;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public Collection&lt;StopWatch> getAllStoppedWatches() {&#xA;&#x9;&#x9;return null;&#xA;&#x9;}&#xA;&#x9;public String toString() {&#xA;&#x9;&#x9;String str = &quot;&quot;;&#xA;&#x9;&#x9;for(String key : stopWatchMap.keySet()) {&#xA;&#x9;&#x9;&#x9;str += key + stopWatchMap.get(key).getTicks() ;&#xA;&#x9;&#x9;}return str;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;StopWatchManager prog = new StopWatchManager();&#xA;&#x9;&#x9;prog.newStopWatch(&quot;en&quot;);&#xA;&#x9;&#x9;prog.newStopWatch(&quot;to&quot;);&#xA;&#x9;&#x9;prog.tick(2);&#xA;&#x9;&#x9;System.out.println();&#xA;&#x9;}&#xA;&#x9;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1456747809631" sizeMeasure="59" warningCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package objectstructures;&#xA;&#xA;import java.util.Collection;&#xA;import java.util.HashMap;&#xA;import java.util.Map;&#xA;&#xA;public class StopWatchManager {&#xA;&#x9;&#xA;&#x9;Map&lt;String, StopWatch> stopWatchMap = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;StopWatch newStopWatch(String name) {&#xA;&#x9;&#x9;StopWatch watch = new StopWatch();&#xA;&#x9;&#x9;stopWatchMap.put(name, watch);&#xA;&#x9;&#x9;return watch;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void removeStopWatch(String name) {&#xA;&#x9;&#x9;stopWatchMap.remove(name);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void tick(int ticks) {&#xA;//&#x9;&#x9;for(String key : map.keySet())&#xA;&#x9;&#x9;for(StopWatch value : stopWatchMap.values()) {&#xA;&#x9;&#x9;&#x9;value.tick(ticks);&#xA;&#x9;&#x9;}&#x9;&#x9;&#xA;&#x9;}&#xA;//&#x9;get watches by giving a name, but also need an index, therefore use map&#xA;&#x9;public StopWatch getStopWatch(String name) {&#xA;&#x9;&#x9;return stopWatchMap.get(name);&#xA;&#x9;}&#xA;&#x9;&#xA;//&#x9;map is also a part of the collection hierarchy&#xA;&#x9;public Collection&lt;StopWatch> getAllWatches() {&#xA;&#x9;&#x9;return (Collection&lt;StopWatch>) stopWatchMap;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public Collection&lt;StopWatch> getAllStartedWatches() {&#xA;&#x9;&#x9;return null;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public Collection&lt;StopWatch> getAllStoppedWatches() {&#xA;&#x9;&#x9;return null;&#xA;&#x9;}&#xA;&#x9;public String toString() {&#xA;&#x9;&#x9;String str = &quot;&quot;;&#xA;&#x9;&#x9;for(String key : stopWatchMap.keySet()) {&#xA;&#x9;&#x9;&#x9;str += key + stopWatchMap.get(key).getTicks() ;&#xA;&#x9;&#x9;}return str;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;StopWatchManager prog = new StopWatchManager();&#xA;&#x9;&#x9;prog.newStopWatch(&quot;en&quot;);&#xA;&#x9;&#x9;prog.newStopWatch(&quot;to&quot;);&#xA;&#x9;&#x9;prog.tick(2);&#xA;&#x9;&#x9;System.out.println(prog.toString());&#xA;&#x9;}&#xA;&#x9;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1456747936773" sizeMeasure="59" warningCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package objectstructures;&#xA;&#xA;import java.util.Collection;&#xA;import java.util.HashMap;&#xA;import java.util.Map;&#xA;&#xA;public class StopWatchManager {&#xA;&#x9;&#xA;&#x9;Map&lt;String, StopWatch> stopWatchMap = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;StopWatch newStopWatch(String name) {&#xA;&#x9;&#x9;StopWatch watch = new StopWatch();&#xA;&#x9;&#x9;stopWatchMap.put(name, watch);&#xA;&#x9;&#x9;return watch;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void removeStopWatch(String name) {&#xA;&#x9;&#x9;stopWatchMap.remove(name);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void tick(int ticks) {&#xA;//&#x9;&#x9;for(String key : map.keySet())&#xA;&#x9;&#x9;for(StopWatch value : stopWatchMap.values()) {&#xA;&#x9;&#x9;&#x9;value.tick(ticks);&#xA;&#x9;&#x9;}&#x9;&#x9;&#xA;&#x9;}&#xA;//&#x9;get watches by giving a name, but also need an index, therefore use map&#xA;&#x9;public StopWatch getStopWatch(String name) {&#xA;&#x9;&#x9;return stopWatchMap.get(name);&#xA;&#x9;}&#xA;&#x9;&#xA;//&#x9;map is also a part of the collection hierarchy&#xA;&#x9;public Collection&lt;StopWatch> getAllWatches() {&#xA;&#x9;&#x9;return (Collection&lt;StopWatch>) stopWatchMap;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public Collection&lt;StopWatch> getAllStartedWatches() {&#xA;&#x9;&#x9;return null;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public Collection&lt;StopWatch> getAllStoppedWatches() {&#xA;&#x9;&#x9;return null;&#xA;&#x9;}&#xA;&#x9;public String toString() {&#xA;&#x9;&#x9;String str = &quot;&quot;;&#xA;&#x9;&#x9;for(String key : stopWatchMap.keySet()) {&#xA;&#x9;&#x9;&#x9;str += key + stopWatchMap.get(key) ;&#xA;&#x9;&#x9;}return str;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;StopWatchManager prog = new StopWatchManager();&#xA;&#x9;&#x9;prog.newStopWatch(&quot;en&quot;);&#xA;&#x9;&#x9;prog.newStopWatch(&quot;to&quot;);&#xA;&#x9;&#x9;prog.tick(2);&#xA;&#x9;&#x9;System.out.println(prog.toString());&#xA;&#x9;}&#xA;&#x9;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1456748032944" sizeMeasure="59" warningCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package objectstructures;&#xA;&#xA;import java.util.Collection;&#xA;import java.util.HashMap;&#xA;import java.util.Map;&#xA;&#xA;public class StopWatchManager {&#xA;&#x9;&#xA;&#x9;Map&lt;String, StopWatch> stopWatchMap = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;StopWatch newStopWatch(String name) {&#xA;&#x9;&#x9;StopWatch watch = new StopWatch();&#xA;&#x9;&#x9;stopWatchMap.put(name, watch);&#xA;&#x9;&#x9;return watch;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void removeStopWatch(String name) {&#xA;&#x9;&#x9;stopWatchMap.remove(name);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void tick(int ticks) {&#xA;//&#x9;&#x9;for(String key : map.keySet())&#xA;&#x9;&#x9;for(StopWatch value : stopWatchMap.values()) {&#xA;&#x9;&#x9;&#x9;value.tick(ticks);&#xA;&#x9;&#x9;}&#x9;&#x9;&#xA;&#x9;}&#xA;//&#x9;get watches by giving a name, but also need an index, therefore use map&#xA;&#x9;public StopWatch getStopWatch(String name) {&#xA;&#x9;&#x9;return stopWatchMap.get(name);&#xA;&#x9;}&#xA;&#x9;&#xA;//&#x9;map is also a part of the collection hierarchy&#xA;&#x9;public Collection&lt;StopWatch> getAllWatches() {&#xA;&#x9;&#x9;return (Collection&lt;StopWatch>) stopWatchMap;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public Collection&lt;StopWatch> getAllStartedWatches() {&#xA;&#x9;&#x9;return null;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public Collection&lt;StopWatch> getAllStoppedWatches() {&#xA;&#x9;&#x9;return null;&#xA;&#x9;}&#xA;&#x9;public String toString() {&#xA;&#x9;&#x9;String str = &quot;&quot;;&#xA;&#x9;&#x9;for(String key : stopWatchMap.keySet()) {&#xA;&#x9;&#x9;&#x9;str += key + stopWatchMap.get(key).getTicks() ;&#xA;&#x9;&#x9;}return str;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;StopWatchManager prog = new StopWatchManager();&#xA;&#x9;&#x9;prog.newStopWatch(&quot;en&quot;);&#xA;&#x9;&#x9;prog.newStopWatch(&quot;to&quot;);&#xA;&#x9;&#x9;prog.tick(2);&#xA;&#x9;&#x9;System.out.println(prog.toString());&#xA;&#x9;}&#xA;&#x9;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1456748371568" sizeMeasure="60" warningCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package objectstructures;&#xA;&#xA;import java.util.Collection;&#xA;import java.util.HashMap;&#xA;import java.util.Map;&#xA;&#xA;public class StopWatchManager {&#xA;&#x9;&#xA;&#x9;Map&lt;String, StopWatch> stopWatchMap = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;StopWatch newStopWatch(String name) {&#xA;&#x9;&#x9;StopWatch watch = new StopWatch();&#xA;&#x9;&#x9;stopWatchMap.put(name, watch);&#xA;&#x9;&#x9;return watch;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void removeStopWatch(String name) {&#xA;&#x9;&#x9;stopWatchMap.remove(name);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void tick(int ticks) {&#xA;//&#x9;&#x9;for(String key : map.keySet())&#xA;&#x9;&#x9;System.out.println(stopWatchMap.values());&#xA;&#x9;&#x9;for(StopWatch value : stopWatchMap.values()) {&#xA;&#x9;&#x9;&#x9;value.tick(ticks);&#xA;&#x9;&#x9;}&#x9;&#x9;&#xA;&#x9;}&#xA;//&#x9;get watches by giving a name, but also need an index, therefore use map&#xA;&#x9;public StopWatch getStopWatch(String name) {&#xA;&#x9;&#x9;return stopWatchMap.get(name);&#xA;&#x9;}&#xA;&#x9;&#xA;//&#x9;map is also a part of the collection hierarchy&#xA;&#x9;public Collection&lt;StopWatch> getAllWatches() {&#xA;&#x9;&#x9;return (Collection&lt;StopWatch>) stopWatchMap;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public Collection&lt;StopWatch> getAllStartedWatches() {&#xA;&#x9;&#x9;return null;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public Collection&lt;StopWatch> getAllStoppedWatches() {&#xA;&#x9;&#x9;return null;&#xA;&#x9;}&#xA;&#x9;public String toString() {&#xA;&#x9;&#x9;String str = &quot;&quot;;&#xA;&#x9;&#x9;for(String key : stopWatchMap.keySet()) {&#xA;&#x9;&#x9;&#x9;str += key + stopWatchMap.get(key).getTicks() ;&#xA;&#x9;&#x9;}return str;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;StopWatchManager prog = new StopWatchManager();&#xA;&#x9;&#x9;prog.newStopWatch(&quot;en&quot;);&#xA;&#x9;&#x9;prog.newStopWatch(&quot;to&quot;);&#xA;&#x9;&#x9;prog.tick(2);&#xA;&#x9;&#x9;System.out.println(prog.toString());&#xA;&#x9;}&#xA;&#x9;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1456748399643" sizeMeasure="61" warningCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package objectstructures;&#xA;&#xA;import java.util.Collection;&#xA;import java.util.HashMap;&#xA;import java.util.Map;&#xA;&#xA;public class StopWatchManager {&#xA;&#x9;&#xA;&#x9;Map&lt;String, StopWatch> stopWatchMap = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;StopWatch newStopWatch(String name) {&#xA;&#x9;&#x9;StopWatch watch = new StopWatch();&#xA;&#x9;&#x9;stopWatchMap.put(name, watch);&#xA;&#x9;&#x9;return watch;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void removeStopWatch(String name) {&#xA;&#x9;&#x9;stopWatchMap.remove(name);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void tick(int ticks) {&#xA;//&#x9;&#x9;for(String key : map.keySet())&#xA;&#x9;&#x9;System.out.println(stopWatchMap.values());&#xA;&#x9;&#x9;for(StopWatch value : stopWatchMap.values()) {&#xA;&#x9;&#x9;&#x9;value.tick(ticks);&#xA;&#x9;&#x9;&#x9;System.out.println(value.getTicks());&#xA;&#x9;&#x9;}&#x9;&#x9;&#xA;&#x9;}&#xA;//&#x9;get watches by giving a name, but also need an index, therefore use map&#xA;&#x9;public StopWatch getStopWatch(String name) {&#xA;&#x9;&#x9;return stopWatchMap.get(name);&#xA;&#x9;}&#xA;&#x9;&#xA;//&#x9;map is also a part of the collection hierarchy&#xA;&#x9;public Collection&lt;StopWatch> getAllWatches() {&#xA;&#x9;&#x9;return (Collection&lt;StopWatch>) stopWatchMap;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public Collection&lt;StopWatch> getAllStartedWatches() {&#xA;&#x9;&#x9;return null;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public Collection&lt;StopWatch> getAllStoppedWatches() {&#xA;&#x9;&#x9;return null;&#xA;&#x9;}&#xA;&#x9;public String toString() {&#xA;&#x9;&#x9;String str = &quot;&quot;;&#xA;&#x9;&#x9;for(String key : stopWatchMap.keySet()) {&#xA;&#x9;&#x9;&#x9;str += key + stopWatchMap.get(key).getTicks() ;&#xA;&#x9;&#x9;}return str;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;StopWatchManager prog = new StopWatchManager();&#xA;&#x9;&#x9;prog.newStopWatch(&quot;en&quot;);&#xA;&#x9;&#x9;prog.newStopWatch(&quot;to&quot;);&#xA;&#x9;&#x9;prog.tick(2);&#xA;&#x9;&#x9;System.out.println(prog.toString());&#xA;&#x9;}&#xA;&#x9;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1456748497918" sizeMeasure="59" warningCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package objectstructures;&#xA;&#xA;import java.util.Collection;&#xA;import java.util.HashMap;&#xA;import java.util.Map;&#xA;&#xA;public class StopWatchManager {&#xA;&#x9;&#xA;&#x9;Map&lt;String, StopWatch> stopWatchMap = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;StopWatch newStopWatch(String name) {&#xA;&#x9;&#x9;StopWatch watch = new StopWatch();&#xA;&#x9;&#x9;stopWatchMap.put(name, watch);&#xA;&#x9;&#x9;return watch;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void removeStopWatch(String name) {&#xA;&#x9;&#x9;stopWatchMap.remove(name);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void tick(int ticks) {&#xA;//&#x9;&#x9;for(String key : map.keySet())&#xA;&#x9;&#x9;for(StopWatch value : stopWatchMap.values()) {&#xA;&#x9;&#x9;&#x9;value.tick(ticks);&#xA;&#x9;&#x9;}&#x9;&#x9;&#xA;&#x9;}&#xA;//&#x9;get watches by giving a name, but also need an index, therefore use map&#xA;&#x9;public StopWatch getStopWatch(String name) {&#xA;&#x9;&#x9;return stopWatchMap.get(name);&#xA;&#x9;}&#xA;&#x9;&#xA;//&#x9;map is also a part of the collection hierarchy&#xA;&#x9;public Collection&lt;StopWatch> getAllWatches() {&#xA;&#x9;&#x9;return (Collection&lt;StopWatch>) stopWatchMap;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public Collection&lt;StopWatch> getAllStartedWatches() {&#xA;&#x9;&#x9;return null;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public Collection&lt;StopWatch> getAllStoppedWatches() {&#xA;&#x9;&#x9;return null;&#xA;&#x9;}&#xA;&#x9;public String toString() {&#xA;&#x9;&#x9;String str = &quot;&quot;;&#xA;&#x9;&#x9;for(String key : stopWatchMap.keySet()) {&#xA;&#x9;&#x9;&#x9;str += key + stopWatchMap.get(key).getTicks() ;&#xA;&#x9;&#x9;}return str;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;StopWatchManager prog = new StopWatchManager();&#xA;&#x9;&#x9;prog.newStopWatch(&quot;en&quot;);&#xA;&#x9;&#x9;prog.newStopWatch(&quot;to&quot;);&#xA;&#x9;&#x9;prog.tick(2);&#xA;&#x9;&#x9;System.out.println(prog.toString());&#xA;&#x9;}&#xA;&#x9;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1456748776569" sizeMeasure="62" warningCount="2">
          <edit xsi:type="exercise:StringEdit" storedString="package objectstructures;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collection;&#xA;import java.util.HashMap;&#xA;import java.util.Map;&#xA;&#xA;public class StopWatchManager {&#xA;&#x9;&#xA;&#x9;Map&lt;String, StopWatch> stopWatchMap = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;StopWatch newStopWatch(String name) {&#xA;&#x9;&#x9;StopWatch watch = new StopWatch();&#xA;&#x9;&#x9;stopWatchMap.put(name, watch);&#xA;&#x9;&#x9;return watch;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void removeStopWatch(String name) {&#xA;&#x9;&#x9;stopWatchMap.remove(name);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void tick(int ticks) {&#xA;//&#x9;&#x9;for(String key : map.keySet())&#xA;&#x9;&#x9;for(StopWatch value : stopWatchMap.values()) {&#xA;&#x9;&#x9;&#x9;value.tick(ticks);&#xA;&#x9;&#x9;}&#x9;&#x9;&#xA;&#x9;}&#xA;//&#x9;get watches by giving a name, but also need an index, therefore use map&#xA;&#x9;public StopWatch getStopWatch(String name) {&#xA;&#x9;&#x9;return stopWatchMap.get(name);&#xA;&#x9;}&#xA;&#x9;&#xA;//&#x9;map is also a part of the collection hierarchy&#xA;&#x9;public Collection&lt;StopWatch> getAllWatches() {&#xA;&#x9;&#x9;return (Collection&lt;StopWatch>) stopWatchMap;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public Collection&lt;StopWatch> getAllStartedWatches() {&#xA;&#x9;&#x9;Collection&lt;StopWatch> stopWatchMap = new ArrayList&lt;>();&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;return null;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public Collection&lt;StopWatch> getAllStoppedWatches() {&#xA;&#x9;&#x9;return null;&#xA;&#x9;}&#xA;&#x9;public String toString() {&#xA;&#x9;&#x9;String str = &quot;&quot;;&#xA;&#x9;&#x9;for(String key : stopWatchMap.keySet()) {&#xA;&#x9;&#x9;&#x9;str += key + stopWatchMap.get(key).getTicks() ;&#xA;&#x9;&#x9;}return str;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;StopWatchManager prog = new StopWatchManager();&#xA;&#x9;&#x9;prog.newStopWatch(&quot;en&quot;);&#xA;&#x9;&#x9;prog.newStopWatch(&quot;to&quot;);&#xA;&#x9;&#x9;prog.tick(2);&#xA;&#x9;&#x9;System.out.println(prog.toString());&#xA;&#x9;}&#xA;&#x9;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1456749007674" sizeMeasure="64" warningCount="2">
          <edit xsi:type="exercise:StringEdit" storedString="package objectstructures;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collection;&#xA;import java.util.HashMap;&#xA;import java.util.Map;&#xA;&#xA;public class StopWatchManager {&#xA;&#x9;&#xA;&#x9;Map&lt;String, StopWatch> stopWatchMap = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;StopWatch newStopWatch(String name) {&#xA;&#x9;&#x9;StopWatch watch = new StopWatch();&#xA;&#x9;&#x9;stopWatchMap.put(name, watch);&#xA;&#x9;&#x9;return watch;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void removeStopWatch(String name) {&#xA;&#x9;&#x9;stopWatchMap.remove(name);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void tick(int ticks) {&#xA;//&#x9;&#x9;for(String key : map.keySet())&#xA;&#x9;&#x9;for(StopWatch value : stopWatchMap.values()) {&#xA;&#x9;&#x9;&#x9;value.tick(ticks);&#xA;&#x9;&#x9;}&#x9;&#x9;&#xA;&#x9;}&#xA;//&#x9;get watches by giving a name, but also need an index, therefore use map&#xA;&#x9;public StopWatch getStopWatch(String name) {&#xA;&#x9;&#x9;return stopWatchMap.get(name);&#xA;&#x9;}&#xA;&#x9;&#xA;//&#x9;map is also a part of the collection hierarchy&#xA;&#x9;public Collection&lt;StopWatch> getAllWatches() {&#xA;&#x9;&#x9;return (Collection&lt;StopWatch>) stopWatchMap;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public Collection&lt;StopWatch> getAllStartedWatches() {&#xA;&#x9;&#x9;Collection&lt;StopWatch> stopWatchMap = new ArrayList&lt;>();&#xA;//&#x9;&#x9;for(){&#xA;//&#x9;&#x9;&#x9;if()&#xA;//&#x9;&#x9;}&#xA;&#x9;&#x9;return null;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public Collection&lt;StopWatch> getAllStoppedWatches() {&#xA;&#x9;&#x9;return null;&#xA;&#x9;}&#xA;&#x9;public String toString() {&#xA;&#x9;&#x9;String str = &quot;&quot;;&#xA;&#x9;&#x9;for(String key : stopWatchMap.keySet()) {&#xA;&#x9;&#x9;&#x9;str += key + stopWatchMap.get(key).getTicks() ;&#xA;&#x9;&#x9;}return str;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;StopWatchManager prog = new StopWatchManager();&#xA;&#x9;&#x9;prog.newStopWatch(&quot;en&quot;);&#xA;&#x9;&#x9;prog.newStopWatch(&quot;to&quot;);&#xA;&#x9;&#x9;prog.tick(2);&#xA;&#x9;&#x9;System.out.println(prog.getAllWatches());&#xA;&#x9;}&#xA;&#x9;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1456749138496" sizeMeasure="66" warningCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package objectstructures;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collection;&#xA;import java.util.HashMap;&#xA;import java.util.Map;&#xA;&#xA;public class StopWatchManager {&#xA;&#x9;&#xA;&#x9;Map&lt;String, StopWatch> stopWatchMap = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;StopWatch newStopWatch(String name) {&#xA;&#x9;&#x9;StopWatch watch = new StopWatch();&#xA;&#x9;&#x9;stopWatchMap.put(name, watch);&#xA;&#x9;&#x9;return watch;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void removeStopWatch(String name) {&#xA;&#x9;&#x9;stopWatchMap.remove(name);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void tick(int ticks) {&#xA;//&#x9;&#x9;for(String key : map.keySet())&#xA;&#x9;&#x9;for(StopWatch value : stopWatchMap.values()) {&#xA;&#x9;&#x9;&#x9;value.tick(ticks);&#xA;&#x9;&#x9;}&#x9;&#x9;&#xA;&#x9;}&#xA;//&#x9;get watches by giving a name, but also need an index, therefore use map&#xA;&#x9;public StopWatch getStopWatch(String name) {&#xA;&#x9;&#x9;return stopWatchMap.get(name);&#xA;&#x9;}&#xA;&#x9;&#xA;//&#x9;map is also a part of the collection hierarchy&#xA;&#x9;public Collection&lt;StopWatch> getAllWatches() {&#xA;&#x9;&#x9;return (Collection&lt;StopWatch>) stopWatchMap;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public Collection&lt;StopWatch> getAllStartedWatches() {&#xA;&#x9;&#x9;Collection&lt;StopWatch> watchCollection = new ArrayList&lt;>();&#xA;&#x9;&#x9;for(StopWatch value : stopWatchMap.values()){&#xA;&#x9;&#x9;&#x9;if(value.isStarted()) {&#xA;&#x9;&#x9;&#x9;&#x9;watchCollection.add(value);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return watchCollection;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public Collection&lt;StopWatch> getAllStoppedWatches() {&#xA;&#x9;&#x9;return null;&#xA;&#x9;}&#xA;&#x9;public String toString() {&#xA;&#x9;&#x9;String str = &quot;&quot;;&#xA;&#x9;&#x9;for(String key : stopWatchMap.keySet()) {&#xA;&#x9;&#x9;&#x9;str += key + stopWatchMap.get(key).getTicks() ;&#xA;&#x9;&#x9;}return str;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;StopWatchManager prog = new StopWatchManager();&#xA;&#x9;&#x9;prog.newStopWatch(&quot;en&quot;);&#xA;&#x9;&#x9;prog.newStopWatch(&quot;to&quot;);&#xA;&#x9;&#x9;prog.tick(2);&#xA;&#x9;&#x9;System.out.println(prog.getAllWatches());&#xA;&#x9;}&#xA;&#x9;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1456749152654" sizeMeasure="66" warningCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package objectstructures;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collection;&#xA;import java.util.HashMap;&#xA;import java.util.Map;&#xA;&#xA;public class StopWatchManager {&#xA;&#x9;&#xA;&#x9;Map&lt;String, StopWatch> stopWatchMap = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;StopWatch newStopWatch(String name) {&#xA;&#x9;&#x9;StopWatch watch = new StopWatch();&#xA;&#x9;&#x9;stopWatchMap.put(name, watch);&#xA;&#x9;&#x9;return watch;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void removeStopWatch(String name) {&#xA;&#x9;&#x9;stopWatchMap.remove(name);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void tick(int ticks) {&#xA;//&#x9;&#x9;for(String key : map.keySet())&#xA;&#x9;&#x9;for(StopWatch value : stopWatchMap.values()) {&#xA;&#x9;&#x9;&#x9;value.tick(ticks);&#xA;&#x9;&#x9;}&#x9;&#x9;&#xA;&#x9;}&#xA;//&#x9;get watches by giving a name, but also need an index, therefore use map&#xA;&#x9;public StopWatch getStopWatch(String name) {&#xA;&#x9;&#x9;return stopWatchMap.get(name);&#xA;&#x9;}&#xA;&#x9;&#xA;//&#x9;map is also a part of the collection hierarchy&#xA;&#x9;public Collection&lt;StopWatch> getAllWatches() {&#xA;&#x9;&#x9;return (Collection&lt;StopWatch>) stopWatchMap;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public Collection&lt;StopWatch> getAllStartedWatches() {&#xA;&#x9;&#x9;Collection&lt;StopWatch> watchCollection = new ArrayList&lt;>();&#xA;&#x9;&#x9;for(StopWatch value : stopWatchMap.values()){&#xA;&#x9;&#x9;&#x9;if(value.isStarted()) {&#xA;&#x9;&#x9;&#x9;&#x9;watchCollection.add(value);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return watchCollection;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public Collection&lt;StopWatch> getAllStoppedWatches() {&#xA;&#x9;&#x9;return null;&#xA;&#x9;}&#xA;&#x9;public String toString() {&#xA;&#x9;&#x9;String str = &quot;&quot;;&#xA;&#x9;&#x9;for(String key : stopWatchMap.keySet()) {&#xA;&#x9;&#x9;&#x9;str += key + stopWatchMap.get(key).getTicks() ;&#xA;&#x9;&#x9;}return str;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;StopWatchManager prog = new StopWatchManager();&#xA;&#x9;&#x9;prog.newStopWatch(&quot;en&quot;);&#xA;&#x9;&#x9;prog.newStopWatch(&quot;to&quot;);&#xA;&#x9;&#x9;prog.tick(2);&#xA;&#x9;&#x9;System.out.println(prog.getAllStartedWatches());&#xA;&#x9;}&#xA;&#x9;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1456749196610" sizeMeasure="68" errorCount="1" warningCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package objectstructures;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collection;&#xA;import java.util.HashMap;&#xA;import java.util.Map;&#xA;&#xA;public class StopWatchManager {&#xA;&#x9;&#xA;&#x9;Map&lt;String, StopWatch> stopWatchMap = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;StopWatch newStopWatch(String name) {&#xA;&#x9;&#x9;StopWatch watch = new StopWatch();&#xA;&#x9;&#x9;stopWatchMap.put(name, watch);&#xA;&#x9;&#x9;return watch;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void removeStopWatch(String name) {&#xA;&#x9;&#x9;stopWatchMap.remove(name);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void tick(int ticks) {&#xA;//&#x9;&#x9;for(String key : map.keySet())&#xA;&#x9;&#x9;for(StopWatch value : stopWatchMap.values()) {&#xA;&#x9;&#x9;&#x9;value.tick(ticks);&#xA;&#x9;&#x9;}&#x9;&#x9;&#xA;&#x9;}&#xA;//&#x9;get watches by giving a name, but also need an index, therefore use map&#xA;&#x9;public StopWatch getStopWatch(String name) {&#xA;&#x9;&#x9;return stopWatchMap.get(name);&#xA;&#x9;}&#xA;&#x9;&#xA;//&#x9;map is also a part of the collection hierarchy&#xA;&#x9;public Collection&lt;StopWatch> getAllWatches() {&#xA;&#x9;&#x9;return (Collection&lt;StopWatch>) stopWatchMap;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public Collection&lt;StopWatch> getAllStartedWatches() {&#xA;&#x9;&#x9;Collection&lt;StopWatch> watchCollection = new ArrayList&lt;>();&#xA;&#x9;&#x9;for(StopWatch value : stopWatchMap.values()){&#xA;&#x9;&#x9;&#x9;if(value.isStarted()) {&#xA;&#x9;&#x9;&#x9;&#x9;watchCollection.add(value);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return watchCollection;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public Collection&lt;StopWatch> getAllStoppedWatches() {&#xA;&#x9;&#x9;return null;&#xA;&#x9;}&#xA;&#x9;public String toString() {&#xA;&#x9;&#x9;String str = &quot;&quot;;&#xA;&#x9;&#x9;for(String key : stopWatchMap.keySet()) {&#xA;&#x9;&#x9;&#x9;str += key + stopWatchMap.get(key).getTicks() ;&#xA;&#x9;&#x9;}return str;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;StopWatchManager prog = new StopWatchManager();&#xA;&#x9;&#x9;prog.newStopWatch(&quot;en&quot;);&#xA;&#x9;&#x9;prog.newStopWatch(&quot;to&quot;);&#xA;&#x9;&#x9;prog.tick(2);&#xA;&#x9;&#x9;prog.start();&#xA;&#x9;&#x9;System.out.println(prog.getAllStartedWatches());&#xA;&#x9;}&#xA;&#xA;&#x9;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1456749234111" sizeMeasure="68" warningCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package objectstructures;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collection;&#xA;import java.util.HashMap;&#xA;import java.util.Map;&#xA;&#xA;public class StopWatchManager {&#xA;&#x9;&#xA;&#x9;Map&lt;String, StopWatch> stopWatchMap = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;StopWatch newStopWatch(String name) {&#xA;&#x9;&#x9;StopWatch watch = new StopWatch();&#xA;&#x9;&#x9;stopWatchMap.put(name, watch);&#xA;&#x9;&#x9;return watch;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void removeStopWatch(String name) {&#xA;&#x9;&#x9;stopWatchMap.remove(name);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void tick(int ticks) {&#xA;//&#x9;&#x9;for(String key : map.keySet())&#xA;&#x9;&#x9;for(StopWatch value : stopWatchMap.values()) {&#xA;&#x9;&#x9;&#x9;value.tick(ticks);&#xA;&#x9;&#x9;&#x9;value.start();&#xA;&#x9;&#x9;}&#x9;&#x9;&#xA;&#x9;}&#xA;//&#x9;get watches by giving a name, but also need an index, therefore use map&#xA;&#x9;public StopWatch getStopWatch(String name) {&#xA;&#x9;&#x9;return stopWatchMap.get(name);&#xA;&#x9;}&#xA;&#x9;&#xA;//&#x9;map is also a part of the collection hierarchy&#xA;&#x9;public Collection&lt;StopWatch> getAllWatches() {&#xA;&#x9;&#x9;return (Collection&lt;StopWatch>) stopWatchMap;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public Collection&lt;StopWatch> getAllStartedWatches() {&#xA;&#x9;&#x9;Collection&lt;StopWatch> watchCollection = new ArrayList&lt;>();&#xA;&#x9;&#x9;for(StopWatch value : stopWatchMap.values()){&#xA;&#x9;&#x9;&#x9;if(value.isStarted()) {&#xA;&#x9;&#x9;&#x9;&#x9;watchCollection.add(value);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return watchCollection;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public Collection&lt;StopWatch> getAllStoppedWatches() {&#xA;&#x9;&#x9;return null;&#xA;&#x9;}&#xA;&#x9;public String toString() {&#xA;&#x9;&#x9;String str = &quot;&quot;;&#xA;&#x9;&#x9;for(String key : stopWatchMap.keySet()) {&#xA;&#x9;&#x9;&#x9;str += key + stopWatchMap.get(key).getTicks() ;&#xA;&#x9;&#x9;}return str;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;StopWatchManager prog = new StopWatchManager();&#xA;&#x9;&#x9;prog.newStopWatch(&quot;en&quot;);&#xA;&#x9;&#x9;prog.newStopWatch(&quot;to&quot;);&#xA;&#x9;&#x9;prog.tick(2);&#xA;&#x9;&#x9;System.out.println(prog.getAllStartedWatches());&#xA;&#x9;}&#xA;&#xA;&#x9;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1456749248352" sizeMeasure="67" warningCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package objectstructures;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collection;&#xA;import java.util.HashMap;&#xA;import java.util.Map;&#xA;&#xA;public class StopWatchManager {&#xA;&#x9;&#xA;&#x9;Map&lt;String, StopWatch> stopWatchMap = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;StopWatch newStopWatch(String name) {&#xA;&#x9;&#x9;StopWatch watch = new StopWatch();&#xA;&#x9;&#x9;stopWatchMap.put(name, watch);&#xA;&#x9;&#x9;return watch;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void removeStopWatch(String name) {&#xA;&#x9;&#x9;stopWatchMap.remove(name);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void tick(int ticks) {&#xA;//&#x9;&#x9;for(String key : map.keySet())&#xA;&#x9;&#x9;for(StopWatch value : stopWatchMap.values()) {&#xA;&#x9;&#x9;&#x9;value.tick(ticks);&#xA;&#x9;&#x9;}&#x9;&#x9;&#xA;&#x9;}&#xA;//&#x9;get watches by giving a name, but also need an index, therefore use map&#xA;&#x9;public StopWatch getStopWatch(String name) {&#xA;&#x9;&#x9;return stopWatchMap.get(name);&#xA;&#x9;}&#xA;&#x9;&#xA;//&#x9;map is also a part of the collection hierarchy&#xA;&#x9;public Collection&lt;StopWatch> getAllWatches() {&#xA;&#x9;&#x9;return (Collection&lt;StopWatch>) stopWatchMap;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public Collection&lt;StopWatch> getAllStartedWatches() {&#xA;&#x9;&#x9;Collection&lt;StopWatch> watchCollection = new ArrayList&lt;>();&#xA;&#x9;&#x9;for(StopWatch value : stopWatchMap.values()){&#xA;&#x9;&#x9;&#x9;if(value.isStarted()) {&#xA;&#x9;&#x9;&#x9;&#x9;watchCollection.add(value);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return watchCollection;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public Collection&lt;StopWatch> getAllStoppedWatches() {&#xA;&#x9;&#x9;return null;&#xA;&#x9;}&#xA;&#x9;public String toString() {&#xA;&#x9;&#x9;String str = &quot;&quot;;&#xA;&#x9;&#x9;for(String key : stopWatchMap.keySet()) {&#xA;&#x9;&#x9;&#x9;str += key + stopWatchMap.get(key).getTicks() ;&#xA;&#x9;&#x9;}return str;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;StopWatchManager prog = new StopWatchManager();&#xA;&#x9;&#x9;prog.newStopWatch(&quot;en&quot;);&#xA;&#x9;&#x9;prog.newStopWatch(&quot;to&quot;);&#xA;&#x9;&#x9;prog.tick(2);&#xA;&#x9;&#x9;System.out.println(prog.getAllStartedWatches());&#xA;&#x9;}&#xA;&#xA;&#x9;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1456749296984" sizeMeasure="73" warningCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package objectstructures;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collection;&#xA;import java.util.HashMap;&#xA;import java.util.Map;&#xA;&#xA;public class StopWatchManager {&#xA;&#x9;&#xA;&#x9;Map&lt;String, StopWatch> stopWatchMap = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;StopWatch newStopWatch(String name) {&#xA;&#x9;&#x9;StopWatch watch = new StopWatch();&#xA;&#x9;&#x9;stopWatchMap.put(name, watch);&#xA;&#x9;&#x9;return watch;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void removeStopWatch(String name) {&#xA;&#x9;&#x9;stopWatchMap.remove(name);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void tick(int ticks) {&#xA;//&#x9;&#x9;for(String key : map.keySet())&#xA;&#x9;&#x9;for(StopWatch value : stopWatchMap.values()) {&#xA;&#x9;&#x9;&#x9;value.tick(ticks);&#xA;&#x9;&#x9;}&#x9;&#x9;&#xA;&#x9;}&#xA;//&#x9;get watches by giving a name, but also need an index, therefore use map&#xA;&#x9;public StopWatch getStopWatch(String name) {&#xA;&#x9;&#x9;return stopWatchMap.get(name);&#xA;&#x9;}&#xA;&#x9;&#xA;//&#x9;map is also a part of the collection hierarchy&#xA;&#x9;public Collection&lt;StopWatch> getAllWatches() {&#xA;&#x9;&#x9;return (Collection&lt;StopWatch>) stopWatchMap;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public Collection&lt;StopWatch> getAllStartedWatches() {&#xA;&#x9;&#x9;Collection&lt;StopWatch> watchCollection = new ArrayList&lt;>();&#xA;&#x9;&#x9;for(StopWatch value : stopWatchMap.values()){&#xA;&#x9;&#x9;&#x9;if(value.isStarted()) {&#xA;&#x9;&#x9;&#x9;&#x9;watchCollection.add(value);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return watchCollection;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public Collection&lt;StopWatch> getAllStoppedWatches() {&#xA;&#x9;&#x9;Collection&lt;StopWatch> watchCollection = new ArrayList&lt;>();&#xA;&#x9;&#x9;for(StopWatch value : stopWatchMap.values()) {&#xA;&#x9;&#x9;&#x9;if(value.isStopped()) {&#xA;&#x9;&#x9;&#x9;&#x9;watchCollection.add(value);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return watchCollection;&#xA;&#x9;}&#xA;&#x9;public String toString() {&#xA;&#x9;&#x9;String str = &quot;&quot;;&#xA;&#x9;&#x9;for(String key : stopWatchMap.keySet()) {&#xA;&#x9;&#x9;&#x9;str += key + stopWatchMap.get(key).getTicks() ;&#xA;&#x9;&#x9;}return str;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;StopWatchManager prog = new StopWatchManager();&#xA;&#x9;&#x9;prog.newStopWatch(&quot;en&quot;);&#xA;&#x9;&#x9;prog.newStopWatch(&quot;to&quot;);&#xA;&#x9;&#x9;prog.tick(2);&#xA;&#x9;&#x9;System.out.println(prog.getAllStartedWatches());&#xA;&#x9;}&#xA;&#xA;&#x9;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1456749354408" sizeMeasure="73">
          <edit xsi:type="exercise:StringEdit" storedString="package objectstructures;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collection;&#xA;import java.util.HashMap;&#xA;import java.util.Map;&#xA;&#xA;public class StopWatchManager {&#xA;&#x9;&#xA;&#x9;Map&lt;String, StopWatch> stopWatchMap = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;StopWatch newStopWatch(String name) {&#xA;&#x9;&#x9;StopWatch watch = new StopWatch();&#xA;&#x9;&#x9;stopWatchMap.put(name, watch);&#xA;&#x9;&#x9;return watch;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void removeStopWatch(String name) {&#xA;&#x9;&#x9;stopWatchMap.remove(name);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void tick(int ticks) {&#xA;//&#x9;&#x9;for(String key : map.keySet())&#xA;&#x9;&#x9;for(StopWatch value : stopWatchMap.values()) {&#xA;&#x9;&#x9;&#x9;value.tick(ticks);&#xA;&#x9;&#x9;}&#x9;&#x9;&#xA;&#x9;}&#xA;//&#x9;get watches by giving a name, but also need an index, therefore use map&#xA;&#x9;public StopWatch getStopWatch(String name) {&#xA;&#x9;&#x9;return stopWatchMap.get(name);&#xA;&#x9;}&#xA;&#x9;&#xA;//&#x9;map is also a part of the collection hierarchy&#xA;&#x9;public Collection&lt;StopWatch> getAllWatches() {&#xA;&#x9;&#x9;return (Collection&lt;StopWatch>) stopWatchMap.values();&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public Collection&lt;StopWatch> getAllStartedWatches() {&#xA;&#x9;&#x9;Collection&lt;StopWatch> watchCollection = new ArrayList&lt;>();&#xA;&#x9;&#x9;for(StopWatch value : stopWatchMap.values()){&#xA;&#x9;&#x9;&#x9;if(value.isStarted()) {&#xA;&#x9;&#x9;&#x9;&#x9;watchCollection.add(value);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return watchCollection;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public Collection&lt;StopWatch> getAllStoppedWatches() {&#xA;&#x9;&#x9;Collection&lt;StopWatch> watchCollection = new ArrayList&lt;>();&#xA;&#x9;&#x9;for(StopWatch value : stopWatchMap.values()) {&#xA;&#x9;&#x9;&#x9;if(value.isStopped()) {&#xA;&#x9;&#x9;&#x9;&#x9;watchCollection.add(value);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return watchCollection;&#xA;&#x9;}&#xA;&#x9;public String toString() {&#xA;&#x9;&#x9;String str = &quot;&quot;;&#xA;&#x9;&#x9;for(String key : stopWatchMap.keySet()) {&#xA;&#x9;&#x9;&#x9;str += key + stopWatchMap.get(key).getTicks() ;&#xA;&#x9;&#x9;}return str;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;StopWatchManager prog = new StopWatchManager();&#xA;&#x9;&#x9;prog.newStopWatch(&quot;en&quot;);&#xA;&#x9;&#x9;prog.newStopWatch(&quot;to&quot;);&#xA;&#x9;&#x9;prog.tick(2);&#xA;&#x9;&#x9;System.out.println(prog.getAllStartedWatches());&#xA;&#x9;}&#xA;&#xA;&#x9;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1456749418575" sizeMeasure="73" errorCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package objectstructures;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collection;&#xA;import java.util.HashMap;&#xA;import java.util.Map;&#xA;&#xA;public class StopWatchManager {&#xA;&#x9;&#xA;&#x9;Map&lt;String, StopWatch> stopWatchMap = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;StopWatch newStopWatch(String name) {&#xA;&#x9;&#x9;StopWatch watch = new StopWatch();&#xA;&#x9;&#x9;stopWatchMap.put(name, watch);&#xA;&#x9;&#x9;return watch;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void removeStopWatch(String name) {&#xA;&#x9;&#x9;stopWatchMap.remove(name);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void tick(int ticks) {&#xA;//&#x9;&#x9;for(String key : map.keySet())&#xA;&#x9;&#x9;for(StopWatch value : stopWatchMap.values()) {&#xA;&#x9;&#x9;&#x9;value.tick(ticks);&#xA;&#x9;&#x9;}&#x9;&#x9;&#xA;&#x9;}&#xA;//&#x9;get watches by giving a name, but also need an index, therefore use map&#xA;&#x9;public StopWatch getStopWatch(String name) {&#xA;&#x9;&#x9;return stopWatchMap.get(name);&#xA;&#x9;}&#xA;&#x9;&#xA;//&#x9;map is also a part of the collection hierarchy&#xA;&#x9;public Collection&lt;StopWatch> getAllWatches() {&#xA;&#x9;&#x9;return (Collection&lt;StopWatch>) stopWatchMap.values();&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public Collection&lt;StopWatch> getStartedWatches() {&#xA;&#x9;&#x9;Collection&lt;StopWatch> watchCollection = new ArrayList&lt;>();&#xA;&#x9;&#x9;for(StopWatch value : stopWatchMap.values()){&#xA;&#x9;&#x9;&#x9;if(value.isStarted()) {&#xA;&#x9;&#x9;&#x9;&#x9;watchCollection.add(value);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return watchCollection;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public Collection&lt;StopWatch> getStoppedWatches() {&#xA;&#x9;&#x9;Collection&lt;StopWatch> watchCollection = new ArrayList&lt;>();&#xA;&#x9;&#x9;for(StopWatch value : stopWatchMap.values()) {&#xA;&#x9;&#x9;&#x9;if(value.isStopped()) {&#xA;&#x9;&#x9;&#x9;&#x9;watchCollection.add(value);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return watchCollection;&#xA;&#x9;}&#xA;&#x9;public String toString() {&#xA;&#x9;&#x9;String str = &quot;&quot;;&#xA;&#x9;&#x9;for(String key : stopWatchMap.keySet()) {&#xA;&#x9;&#x9;&#x9;str += key + stopWatchMap.get(key).getTicks() ;&#xA;&#x9;&#x9;}return str;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;StopWatchManager prog = new StopWatchManager();&#xA;&#x9;&#x9;prog.newStopWatch(&quot;en&quot;);&#xA;&#x9;&#x9;prog.newStopWatch(&quot;to&quot;);&#xA;&#x9;&#x9;prog.tick(2);&#xA;&#x9;&#x9;System.out.println(prog.getAllStartedWatches());&#xA;&#x9;}&#xA;&#xA;&#x9;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1456749452947" sizeMeasure="74" errorCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package objectstructures;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collection;&#xA;import java.util.HashMap;&#xA;import java.util.Map;&#xA;&#xA;public class StopWatchManager {&#xA;&#x9;&#xA;&#x9;Map&lt;String, StopWatch> stopWatchMap = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;StopWatch newStopWatch(String name) {&#xA;&#x9;&#x9;StopWatch watch = new StopWatch();&#xA;&#x9;&#x9;stopWatchMap.put(name, watch);&#xA;&#x9;&#x9;return watch;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void removeStopWatch(String name) {&#xA;&#x9;&#x9;stopWatchMap.remove(name);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void tick(int ticks) {&#xA;//&#x9;&#x9;for(String key : map.keySet())&#xA;&#x9;&#x9;for(StopWatch value : stopWatchMap.values()) {&#xA;&#x9;&#x9;&#x9;value.tick(ticks);&#xA;&#x9;&#x9;}&#x9;&#x9;&#xA;&#x9;}&#xA;//&#x9;get watches by giving a name, but also need an index, therefore use map&#xA;&#x9;public StopWatch getStopWatch(String name) {&#xA;&#x9;&#x9;return stopWatchMap.get(name);&#xA;&#x9;}&#xA;&#x9;&#xA;//&#x9;map is also a part of the collection hierarchy&#xA;&#x9;public Collection&lt;StopWatch> getAllWatches() {&#xA;&#x9;&#x9;return (Collection&lt;StopWatch>) stopWatchMap.values();&#xA;//&#x9;&#x9;hashmap have key and value, collection only has &quot;one&quot; value&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public Collection&lt;StopWatch> getStartedWatches() {&#xA;&#x9;&#x9;Collection&lt;StopWatch> watchCollection = new ArrayList&lt;>();&#xA;&#x9;&#x9;for(StopWatch value : stopWatchMap.values()){&#xA;&#x9;&#x9;&#x9;if(value.isStarted()) {&#xA;&#x9;&#x9;&#x9;&#x9;watchCollection.add(value);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return watchCollection;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public Collection&lt;StopWatch> getStoppedWatches() {&#xA;&#x9;&#x9;Collection&lt;StopWatch> watchCollection = new ArrayList&lt;>();&#xA;&#x9;&#x9;for(StopWatch value : stopWatchMap.values()) {&#xA;&#x9;&#x9;&#x9;if(value.isStopped()) {&#xA;&#x9;&#x9;&#x9;&#x9;watchCollection.add(value);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return watchCollection;&#xA;&#x9;}&#xA;&#x9;public String toString() {&#xA;&#x9;&#x9;String str = &quot;&quot;;&#xA;&#x9;&#x9;for(String key : stopWatchMap.keySet()) {&#xA;&#x9;&#x9;&#x9;str += key + stopWatchMap.get(key).getTicks() ;&#xA;&#x9;&#x9;}return str;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;StopWatchManager prog = new StopWatchManager();&#xA;&#x9;&#x9;prog.newStopWatch(&quot;en&quot;);&#xA;&#x9;&#x9;prog.newStopWatch(&quot;to&quot;);&#xA;&#x9;&#x9;prog.tick(2);&#xA;&#x9;&#x9;System.out.println(prog.getAllStartedWatches());&#xA;&#x9;}&#xA;&#xA;&#x9;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1456750135955" sizeMeasure="74">
          <edit xsi:type="exercise:StringEdit" storedString="package objectstructures;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collection;&#xA;import java.util.HashMap;&#xA;import java.util.Map;&#xA;&#xA;public class StopWatchManager {&#xA;&#x9;&#xA;&#x9;Map&lt;String, StopWatch> stopWatchMap = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;StopWatch newStopWatch(String name) {&#xA;&#x9;&#x9;StopWatch watch = new StopWatch();&#xA;&#x9;&#x9;stopWatchMap.put(name, watch);&#xA;&#x9;&#x9;return watch;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void removeStopWatch(String name) {&#xA;&#x9;&#x9;stopWatchMap.remove(name);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void tick(int ticks) {&#xA;//&#x9;&#x9;for(String key : map.keySet())&#xA;&#x9;&#x9;for(StopWatch value : stopWatchMap.values()) {&#xA;&#x9;&#x9;&#x9;value.tick(ticks);&#xA;&#x9;&#x9;}&#x9;&#x9;&#xA;&#x9;}&#xA;//&#x9;get watches by giving a name, but also need an index, therefore use map&#xA;&#x9;public StopWatch getStopWatch(String name) {&#xA;&#x9;&#x9;return stopWatchMap.get(name);&#xA;&#x9;}&#xA;&#x9;&#xA;//&#x9;map is also a part of the collection hierarchy&#xA;&#x9;public Collection&lt;StopWatch> getAllWatches() {&#xA;&#x9;&#x9;return (Collection&lt;StopWatch>) stopWatchMap.values();&#xA;//&#x9;&#x9;hashmap have key and value, collection only has &quot;one&quot; value&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public Collection&lt;StopWatch> getStartedWatches() {&#xA;&#x9;&#x9;Collection&lt;StopWatch> watchCollection = new ArrayList&lt;>();&#xA;&#x9;&#x9;for(StopWatch value : stopWatchMap.values()){&#xA;&#x9;&#x9;&#x9;if(value.isStarted()) {&#xA;&#x9;&#x9;&#x9;&#x9;watchCollection.add(value);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return watchCollection;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public Collection&lt;StopWatch> getStoppedWatches() {&#xA;&#x9;&#x9;Collection&lt;StopWatch> watchCollection = new ArrayList&lt;>();&#xA;&#x9;&#x9;for(StopWatch value : stopWatchMap.values()) {&#xA;&#x9;&#x9;&#x9;if(value.isStopped()) {&#xA;&#x9;&#x9;&#x9;&#x9;watchCollection.add(value);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return watchCollection;&#xA;&#x9;}&#xA;&#x9;public String toString() {&#xA;&#x9;&#x9;String str = &quot;&quot;;&#xA;&#x9;&#x9;for(String key : stopWatchMap.keySet()) {&#xA;&#x9;&#x9;&#x9;str += key + stopWatchMap.get(key).getTicks() ;&#xA;&#x9;&#x9;}return str;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;StopWatchManager prog = new StopWatchManager();&#xA;&#x9;&#x9;prog.newStopWatch(&quot;en&quot;);&#xA;&#x9;&#x9;prog.newStopWatch(&quot;to&quot;);&#xA;&#x9;&#x9;prog.tick(2);&#xA;&#x9;&#x9;System.out.println(prog.getStartedWatches());&#xA;&#x9;}&#xA;&#xA;&#x9;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1456750144485" sizeMeasure="67">
          <edit xsi:type="exercise:StringEdit" storedString="package objectstructures;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collection;&#xA;import java.util.HashMap;&#xA;import java.util.Map;&#xA;&#xA;public class StopWatchManager {&#xA;&#x9;&#xA;&#x9;Map&lt;String, StopWatch> stopWatchMap = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;StopWatch newStopWatch(String name) {&#xA;&#x9;&#x9;StopWatch watch = new StopWatch();&#xA;&#x9;&#x9;stopWatchMap.put(name, watch);&#xA;&#x9;&#x9;return watch;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void removeStopWatch(String name) {&#xA;&#x9;&#x9;stopWatchMap.remove(name);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void tick(int ticks) {&#xA;//&#x9;&#x9;for(String key : map.keySet())&#xA;&#x9;&#x9;for(StopWatch value : stopWatchMap.values()) {&#xA;&#x9;&#x9;&#x9;value.tick(ticks);&#xA;&#x9;&#x9;}&#x9;&#x9;&#xA;&#x9;}&#xA;//&#x9;get watches by giving a name, but also need an index, therefore use map&#xA;&#x9;public StopWatch getStopWatch(String name) {&#xA;&#x9;&#x9;return stopWatchMap.get(name);&#xA;&#x9;}&#xA;&#x9;&#xA;//&#x9;map is also a part of the collection hierarchy&#xA;&#x9;public Collection&lt;StopWatch> getAllWatches() {&#xA;&#x9;&#x9;return (Collection&lt;StopWatch>) stopWatchMap.values();&#xA;//&#x9;&#x9;hashmap have key and value, collection only has &quot;one&quot; value&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public Collection&lt;StopWatch> getStartedWatches() {&#xA;&#x9;&#x9;Collection&lt;StopWatch> watchCollection = new ArrayList&lt;>();&#xA;&#x9;&#x9;for(StopWatch value : stopWatchMap.values()){&#xA;&#x9;&#x9;&#x9;if(value.isStarted()) {&#xA;&#x9;&#x9;&#x9;&#x9;watchCollection.add(value);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return watchCollection;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public Collection&lt;StopWatch> getStoppedWatches() {&#xA;&#x9;&#x9;Collection&lt;StopWatch> watchCollection = new ArrayList&lt;>();&#xA;&#x9;&#x9;for(StopWatch value : stopWatchMap.values()) {&#xA;&#x9;&#x9;&#x9;if(value.isStopped()) {&#xA;&#x9;&#x9;&#x9;&#x9;watchCollection.add(value);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return watchCollection;&#xA;&#x9;}&#xA;&#x9;public String toString() {&#xA;&#x9;&#x9;String str = &quot;&quot;;&#xA;&#x9;&#x9;for(String key : stopWatchMap.keySet()) {&#xA;&#x9;&#x9;&#x9;str += key + stopWatchMap.get(key).getTicks() ;&#xA;&#x9;&#x9;}return str;&#xA;&#x9;}&#xA;&#x9;&#xA;&#xA;&#x9;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1456758448507" sizeMeasure="73">
          <edit xsi:type="exercise:StringEdit" storedString="package objectstructures;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collection;&#xA;import java.util.HashMap;&#xA;import java.util.Map;&#xA;&#xA;public class StopWatchManager {&#xA;    private Collection&lt;StopWatchListener> stopWatchListener = new ArrayList&lt;StopWatchListener>();&#xA;&#x9;private Map&lt;String, StopWatch> stopWatchMap = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;StopWatch newStopWatch(String name) {&#xA;&#x9;&#x9;StopWatch watch = new StopWatch();&#xA;&#x9;&#x9;stopWatchMap.put(name, watch);&#xA;&#x9;&#x9;return watch;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void removeStopWatch(String name) {&#xA;&#x9;&#x9;stopWatchMap.remove(name);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void tick(int ticks) {&#xA;//&#x9;&#x9;for(String key : map.keySet())&#xA;&#x9;&#x9;for(StopWatch value : stopWatchMap.values()) {&#xA;&#x9;&#x9;&#x9;value.tick(ticks);&#xA;&#x9;&#x9;}&#x9;&#x9;&#xA;&#x9;}&#xA;//&#x9;get watches by giving a name, but also need an index, therefore use map&#xA;&#x9;public StopWatch getStopWatch(String name) {&#xA;&#x9;&#x9;return stopWatchMap.get(name);&#xA;&#x9;}&#xA;&#x9;&#xA;//&#x9;map is also a part of the collection hierarchy&#xA;&#x9;public Collection&lt;StopWatch> getAllWatches() {&#xA;&#x9;&#x9;return (Collection&lt;StopWatch>) stopWatchMap.values();&#xA;//&#x9;&#x9;hashmap have key and value, collection only has &quot;one&quot; value&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public Collection&lt;StopWatch> getStartedWatches() {&#xA;&#x9;&#x9;Collection&lt;StopWatch> watchCollection = new ArrayList&lt;>();&#xA;&#x9;&#x9;for(StopWatch value : stopWatchMap.values()){&#xA;&#x9;&#x9;&#x9;if(value.isStarted()) {&#xA;&#x9;&#x9;&#x9;&#x9;watchCollection.add(value);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return watchCollection;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public Collection&lt;StopWatch> getStoppedWatches() {&#xA;&#x9;&#x9;Collection&lt;StopWatch> watchCollection = new ArrayList&lt;>();&#xA;&#x9;&#x9;for(StopWatch value : stopWatchMap.values()) {&#xA;&#x9;&#x9;&#x9;if(value.isStopped()) {&#xA;&#x9;&#x9;&#x9;&#x9;watchCollection.add(value);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return watchCollection;&#xA;&#x9;}&#xA;&#x9;public String toString() {&#xA;&#x9;&#x9;String str = &quot;&quot;;&#xA;&#x9;&#x9;for(String key : stopWatchMap.keySet()) {&#xA;&#x9;&#x9;&#x9;str += key + stopWatchMap.get(key).getTicks() ;&#xA;&#x9;&#x9;}return str;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void addStopWatchListener(StopWatchListener listener) {&#xA;    &#x9;stopWatchListener.add(listener);&#xA;    }&#xA;    public void removeStopWatchListener(StopWatchListener listener) {&#xA;    &#x9;stopWatchListener.remove(listener);&#xA;    }&#xA;&#xA;&#x9;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1456758572799" sizeMeasure="77">
          <edit xsi:type="exercise:StringEdit" storedString="package objectstructures;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collection;&#xA;import java.util.HashMap;&#xA;import java.util.Map;&#xA;&#xA;public class StopWatchManager {&#xA;    private Collection&lt;StopWatchListener> stopWatchListener = new ArrayList&lt;StopWatchListener>();&#xA;&#x9;private Map&lt;String, StopWatch> stopWatchMap = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;StopWatch newStopWatch(String name) {&#xA;&#x9;&#x9;StopWatch watch = new StopWatch();&#xA;&#x9;&#x9;stopWatchMap.put(name, watch);&#xA;&#x9;&#x9;return watch;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void removeStopWatch(String name) {&#xA;&#x9;&#x9;stopWatchMap.remove(name);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void tick(int ticks) {&#xA;//&#x9;&#x9;for(String key : map.keySet())&#xA;&#x9;&#x9;for(StopWatch value : stopWatchMap.values()) {&#xA;&#x9;&#x9;&#x9;value.tick(ticks);&#xA;&#x9;&#x9;&#x9;for (StopWatchListener listener : stopWatchListener){&#xA;&#x9;        listener.stopWatchChanged(value, 1);     &#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#x9;&#x9;&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;//&#x9;get watches by giving a name, but also need an index, therefore use map&#xA;&#x9;public StopWatch getStopWatch(String name) {&#xA;&#x9;&#x9;return stopWatchMap.get(name);&#xA;&#x9;}&#xA;&#x9;&#xA;//&#x9;map is also a part of the collection hierarchy&#xA;&#x9;public Collection&lt;StopWatch> getAllWatches() {&#xA;&#x9;&#x9;return (Collection&lt;StopWatch>) stopWatchMap.values();&#xA;//&#x9;&#x9;hashmap have key and value, collection only has &quot;one&quot; value&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public Collection&lt;StopWatch> getStartedWatches() {&#xA;&#x9;&#x9;Collection&lt;StopWatch> watchCollection = new ArrayList&lt;>();&#xA;&#x9;&#x9;for(StopWatch value : stopWatchMap.values()){&#xA;&#x9;&#x9;&#x9;if(value.isStarted()) {&#xA;&#x9;&#x9;&#x9;&#x9;watchCollection.add(value);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return watchCollection;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public Collection&lt;StopWatch> getStoppedWatches() {&#xA;&#x9;&#x9;Collection&lt;StopWatch> watchCollection = new ArrayList&lt;>();&#xA;&#x9;&#x9;for(StopWatch value : stopWatchMap.values()) {&#xA;&#x9;&#x9;&#x9;if(value.isStopped()) {&#xA;&#x9;&#x9;&#x9;&#x9;watchCollection.add(value);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return watchCollection;&#xA;&#x9;}&#xA;&#x9;public String toString() {&#xA;&#x9;&#x9;String str = &quot;&quot;;&#xA;&#x9;&#x9;for(String key : stopWatchMap.keySet()) {&#xA;&#x9;&#x9;&#x9;str += key + stopWatchMap.get(key).getTicks() ;&#xA;&#x9;&#x9;}return str;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void addStopWatchListener(StopWatchListener listener) {&#xA;    &#x9;stopWatchListener.add(listener);&#xA;    }&#xA;    public void removeStopWatchListener(StopWatchListener listener) {&#xA;    &#x9;stopWatchListener.remove(listener);&#xA;    }&#xA;&#xA;&#x9;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1456758577830" sizeMeasure="77">
          <edit xsi:type="exercise:StringEdit" storedString="package objectstructures;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collection;&#xA;import java.util.HashMap;&#xA;import java.util.Map;&#xA;&#xA;public class StopWatchManager {&#xA;    private Collection&lt;StopWatchListener> stopWatchListener = new ArrayList&lt;StopWatchListener>();&#xA;&#x9;private Map&lt;String, StopWatch> stopWatchMap = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;StopWatch newStopWatch(String name) {&#xA;&#x9;&#x9;StopWatch watch = new StopWatch();&#xA;&#x9;&#x9;stopWatchMap.put(name, watch);&#xA;&#x9;&#x9;return watch;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void removeStopWatch(String name) {&#xA;&#x9;&#x9;stopWatchMap.remove(name);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void tick(int ticks) {&#xA;//&#x9;&#x9;for(String key : map.keySet())&#xA;&#x9;&#x9;for(StopWatch value : stopWatchMap.values()) {&#xA;&#x9;&#x9;&#x9;value.tick(ticks);&#xA;&#x9;&#x9;&#x9;for (StopWatchListener listener : stopWatchListener){&#xA;&#x9;&#x9;&#x9;&#x9;listener.stopWatchChanged(value, 1);     &#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#x9;&#x9;&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;//&#x9;get watches by giving a name, but also need an index, therefore use map&#xA;&#x9;public StopWatch getStopWatch(String name) {&#xA;&#x9;&#x9;return stopWatchMap.get(name);&#xA;&#x9;}&#xA;&#x9;&#xA;//&#x9;map is also a part of the collection hierarchy&#xA;&#x9;public Collection&lt;StopWatch> getAllWatches() {&#xA;&#x9;&#x9;return (Collection&lt;StopWatch>) stopWatchMap.values();&#xA;//&#x9;&#x9;hashmap have key and value, collection only has &quot;one&quot; value&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public Collection&lt;StopWatch> getStartedWatches() {&#xA;&#x9;&#x9;Collection&lt;StopWatch> watchCollection = new ArrayList&lt;>();&#xA;&#x9;&#x9;for(StopWatch value : stopWatchMap.values()){&#xA;&#x9;&#x9;&#x9;if(value.isStarted()) {&#xA;&#x9;&#x9;&#x9;&#x9;watchCollection.add(value);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return watchCollection;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public Collection&lt;StopWatch> getStoppedWatches() {&#xA;&#x9;&#x9;Collection&lt;StopWatch> watchCollection = new ArrayList&lt;>();&#xA;&#x9;&#x9;for(StopWatch value : stopWatchMap.values()) {&#xA;&#x9;&#x9;&#x9;if(value.isStopped()) {&#xA;&#x9;&#x9;&#x9;&#x9;watchCollection.add(value);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return watchCollection;&#xA;&#x9;}&#xA;&#x9;public String toString() {&#xA;&#x9;&#x9;String str = &quot;&quot;;&#xA;&#x9;&#x9;for(String key : stopWatchMap.keySet()) {&#xA;&#x9;&#x9;&#x9;str += key + stopWatchMap.get(key).getTicks() ;&#xA;&#x9;&#x9;}return str;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void addStopWatchListener(StopWatchListener listener) {&#xA;    &#x9;stopWatchListener.add(listener);&#xA;    }&#xA;    public void removeStopWatchListener(StopWatchListener listener) {&#xA;    &#x9;stopWatchListener.remove(listener);&#xA;    }&#xA;&#xA;&#x9;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1456758677212" sizeMeasure="75">
          <edit xsi:type="exercise:StringEdit" storedString="package objectstructures;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collection;&#xA;import java.util.HashMap;&#xA;import java.util.Map;&#xA;&#xA;public class StopWatchManager {&#xA;    private Collection&lt;StopWatchListener> stopWatchListener = new ArrayList&lt;StopWatchListener>();&#xA;&#x9;private Map&lt;String, StopWatch> stopWatchMap = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;StopWatch newStopWatch(String name) {&#xA;&#x9;&#x9;StopWatch watch = new StopWatch();&#xA;&#x9;&#x9;stopWatchMap.put(name, watch);&#xA;&#x9;&#x9;return watch;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void removeStopWatch(String name) {&#xA;&#x9;&#x9;stopWatchMap.remove(name);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void tick(int ticks) {&#xA;//&#x9;&#x9;for(String key : map.keySet())&#xA;&#x9;&#x9;for(StopWatch value : stopWatchMap.values()) {&#xA;&#x9;&#x9;&#x9;value.tick(ticks);&#xA;&#x9;&#x9;&#x9;for (StopWatchListener listener : stopWatchListener){&#xA;&#x9;&#x9;&#x9;&#x9;listener.stopWatchChanged(value, 1);     &#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#x9;&#x9;&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;//&#x9;get watches by giving a name, but also need an index, therefore use map&#xA;&#x9;public StopWatch getStopWatch(String name) {&#xA;&#x9;&#x9;return stopWatchMap.get(name);&#xA;&#x9;}&#xA;&#x9;&#xA;//&#x9;map is also a part of the collection hierarchy&#xA;&#x9;public Collection&lt;StopWatch> getAllWatches() {&#xA;&#x9;&#x9;return (Collection&lt;StopWatch>) stopWatchMap.values();&#xA;//&#x9;&#x9;hashmap have key and value, collection only has &quot;one&quot; value&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public Collection&lt;StopWatch> getStartedWatches() {&#xA;&#x9;&#x9;Collection&lt;StopWatch> watchCollection = new ArrayList&lt;>();&#xA;&#x9;&#x9;for(StopWatch value : stopWatchMap.values()){&#xA;&#x9;&#x9;&#x9;if(value.isStarted()) {&#xA;&#x9;&#x9;&#x9;&#x9;watchCollection.add(value);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return watchCollection;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public Collection&lt;StopWatch> getStoppedWatches() {&#xA;&#x9;&#x9;Collection&lt;StopWatch> watchCollection = new ArrayList&lt;>();&#xA;&#x9;&#x9;for(StopWatch value : stopWatchMap.values()) {&#xA;&#x9;&#x9;&#x9;if(value.isStopped()) {&#xA;&#x9;&#x9;&#x9;&#x9;watchCollection.add(value);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return watchCollection;&#xA;&#x9;}&#xA;&#x9;public String toString() {&#xA;&#x9;&#x9;String str = &quot;&quot;;&#xA;&#x9;&#x9;for(String key : stopWatchMap.keySet()) {&#xA;&#x9;&#x9;&#x9;str += key + stopWatchMap.get(key).getTicks() ;&#xA;&#x9;&#x9;}return str;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void addStopWatchListener(StopWatchListener listener) {&#xA;    &#x9;stopWatchListener.add(listener);&#xA;    }&#xA;    public void removeStopWatchListener(StopWatchListener listener) {&#xA;    &#x9;stopWatchListener.remove(listener);&#xA;    }&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1456759076619" sizeMeasure="82">
          <edit xsi:type="exercise:StringEdit" storedString="package objectstructures;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collection;&#xA;import java.util.HashMap;&#xA;import java.util.Map;&#xA;&#xA;public class StopWatchManager {&#xA;    private Collection&lt;StopWatchListener> stopWatchListener = new ArrayList&lt;StopWatchListener>();&#xA;&#x9;private Map&lt;String, StopWatch> stopWatchMap = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;StopWatch newStopWatch(String name) {&#xA;&#x9;&#x9;StopWatch watch = new StopWatch();&#xA;&#x9;&#x9;stopWatchMap.put(name, watch);&#xA;&#x9;&#x9;return watch;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void removeStopWatch(String name) {&#xA;&#x9;&#x9;stopWatchMap.remove(name);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void tick(int ticks) {&#xA;//&#x9;&#x9;for(String key : map.keySet())&#xA;&#x9;&#x9;for(StopWatch value : stopWatchMap.values()) {&#xA;&#x9;&#x9;&#x9;value.tick(ticks);&#xA;&#x9;&#x9;&#x9;for (StopWatchListener listener : stopWatchListener){&#xA;&#x9;&#x9;&#x9;&#x9;listener.stopWatchChanged(value, 1);     &#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#x9;&#x9;&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;//&#x9;get watches by giving a name, but also need an index, therefore use map&#xA;&#x9;public StopWatch getStopWatch(String name) {&#xA;&#x9;&#x9;return stopWatchMap.get(name);&#xA;&#x9;}&#xA;&#x9;&#xA;//&#x9;map is also a part of the collection hierarchy&#xA;&#x9;public Collection&lt;StopWatch> getAllWatches() {&#xA;&#x9;&#x9;return (Collection&lt;StopWatch>) stopWatchMap.values();&#xA;//&#x9;&#x9;hashmap have key and value, collection only has &quot;one&quot; value&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public Collection&lt;StopWatch> getStartedWatches() {&#xA;&#x9;&#x9;Collection&lt;StopWatch> watchCollection = new ArrayList&lt;>();&#xA;&#x9;&#x9;for(StopWatch value : stopWatchMap.values()){&#xA;&#x9;&#x9;&#x9;if(value.isStarted()) {&#xA;&#x9;&#x9;&#x9;&#x9;watchCollection.add(value);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return watchCollection;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public Collection&lt;StopWatch> getStoppedWatches() {&#xA;&#x9;&#x9;Collection&lt;StopWatch> watchCollection = new ArrayList&lt;>();&#xA;&#x9;&#x9;for(StopWatch value : stopWatchMap.values()) {&#xA;&#x9;&#x9;&#x9;if(value.isStopped()) {&#xA;&#x9;&#x9;&#x9;&#x9;watchCollection.add(value);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return watchCollection;&#xA;&#x9;}&#xA;&#x9;public String toString() {&#xA;&#x9;&#x9;String str = &quot;&quot;;&#xA;&#x9;&#x9;for(String key : stopWatchMap.keySet()) {&#xA;&#x9;&#x9;&#x9;str += key + stopWatchMap.get(key).getTicks() ;&#xA;&#x9;&#x9;}return str;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void addStopWatchListener(StopWatchListener listener) {&#xA;    &#x9;stopWatchListener.add(listener);&#xA;    }&#xA;    public void removeStopWatchListener(StopWatchListener listener) {&#xA;    &#x9;stopWatchListener.remove(listener);&#xA;    }&#xA;    public static void main(String[] args) {&#xA;&#x9;&#x9;StopWatchManager manager = new StopWatchManager();&#xA;&#x9;&#x9;manager.newStopWatch(&quot;SW 1&quot;);&#xA;&#x9;&#x9;manager.addStopWatchListener(new StopWatchListener());&#xA;&#x9;&#x9;manager.getStopWatch(&quot;SW 1&quot;).start();&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1456759144084" sizeMeasure="83">
          <edit xsi:type="exercise:StringEdit" storedString="package objectstructures;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collection;&#xA;import java.util.HashMap;&#xA;import java.util.Map;&#xA;&#xA;public class StopWatchManager {&#xA;    private Collection&lt;StopWatchListener> stopWatchListener = new ArrayList&lt;StopWatchListener>();&#xA;&#x9;private Map&lt;String, StopWatch> stopWatchMap = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;StopWatch newStopWatch(String name) {&#xA;&#x9;&#x9;StopWatch watch = new StopWatch();&#xA;&#x9;&#x9;stopWatchMap.put(name, watch);&#xA;&#x9;&#x9;return watch;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void removeStopWatch(String name) {&#xA;&#x9;&#x9;stopWatchMap.remove(name);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void tick(int ticks) {&#xA;//&#x9;&#x9;for(String key : map.keySet())&#xA;&#x9;&#x9;for(StopWatch value : stopWatchMap.values()) {&#xA;&#x9;&#x9;&#x9;value.tick(ticks);&#xA;&#x9;&#x9;&#x9;for (StopWatchListener listener : stopWatchListener){&#xA;&#x9;&#x9;&#x9;&#x9;listener.stopWatchChanged(value, 1);     &#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#x9;&#x9;&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;//&#x9;get watches by giving a name, but also need an index, therefore use map&#xA;&#x9;public StopWatch getStopWatch(String name) {&#xA;&#x9;&#x9;return stopWatchMap.get(name);&#xA;&#x9;}&#xA;&#x9;&#xA;//&#x9;map is also a part of the collection hierarchy&#xA;&#x9;public Collection&lt;StopWatch> getAllWatches() {&#xA;&#x9;&#x9;return (Collection&lt;StopWatch>) stopWatchMap.values();&#xA;//&#x9;&#x9;hashmap have key and value, collection only has &quot;one&quot; value&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public Collection&lt;StopWatch> getStartedWatches() {&#xA;&#x9;&#x9;Collection&lt;StopWatch> watchCollection = new ArrayList&lt;>();&#xA;&#x9;&#x9;for(StopWatch value : stopWatchMap.values()){&#xA;&#x9;&#x9;&#x9;if(value.isStarted()) {&#xA;&#x9;&#x9;&#x9;&#x9;watchCollection.add(value);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return watchCollection;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public Collection&lt;StopWatch> getStoppedWatches() {&#xA;&#x9;&#x9;Collection&lt;StopWatch> watchCollection = new ArrayList&lt;>();&#xA;&#x9;&#x9;for(StopWatch value : stopWatchMap.values()) {&#xA;&#x9;&#x9;&#x9;if(value.isStopped()) {&#xA;&#x9;&#x9;&#x9;&#x9;watchCollection.add(value);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return watchCollection;&#xA;&#x9;}&#xA;&#x9;public String toString() {&#xA;&#x9;&#x9;String str = &quot;&quot;;&#xA;&#x9;&#x9;for(String key : stopWatchMap.keySet()) {&#xA;&#x9;&#x9;&#x9;str += key + stopWatchMap.get(key).getTicks() ;&#xA;&#x9;&#x9;}return str;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void addStopWatchListener(StopWatchListener listener) {&#xA;    &#x9;stopWatchListener.add(listener);&#xA;    }&#xA;    public void removeStopWatchListener(StopWatchListener listener) {&#xA;    &#x9;stopWatchListener.remove(listener);&#xA;    }&#xA;    public static void main(String[] args) {&#xA;&#x9;&#x9;StopWatchManager manager = new StopWatchManager();&#xA;&#x9;&#x9;manager.newStopWatch(&quot;SW 1&quot;);&#xA;&#x9;&#x9;manager.addStopWatchListener(new StopWatchListener());&#xA;&#x9;&#x9;manager.tick(2);&#xA;&#x9;&#x9;manager.getStopWatch(&quot;SW 1&quot;).start();&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1456759798600" sizeMeasure="87" errorCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package objectstructures;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collection;&#xA;import java.util.HashMap;&#xA;import java.util.Map;&#xA;&#xA;public class StopWatchManager {&#xA;    private Collection&lt;StopWatchListener> stopWatchListener = new ArrayList&lt;StopWatchListener>();&#xA;&#x9;private Map&lt;String, StopWatch> stopWatchMap = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;StopWatch newStopWatch(String name) {&#xA;&#x9;&#x9;StopWatch watch = new StopWatch();&#xA;&#x9;&#x9;stopWatchMap.put(name, watch);&#xA;&#x9;&#x9;return watch;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public Collection&lt;StopWatchListener> getListener() {&#xA;&#x9;&#x9;return stopWatchListener;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void removeStopWatch(String name) {&#xA;&#x9;&#x9;stopWatchMap.remove(name);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void tick(int ticks) {&#xA;//&#x9;&#x9;for(String key : map.keySet())&#xA;&#x9;&#x9;for(StopWatch value : stopWatchMap.values()) {&#xA;&#x9;&#x9;&#x9;value.tick(ticks);&#xA;&#x9;&#x9;&#x9;for (StopWatchListener listener : stopWatchListener){&#xA;&#x9;&#x9;&#x9;&#x9;listener.stopWatchChanged(value, 1);     &#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#x9;&#x9;&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;//&#x9;get watches by giving a name, but also need an index, therefore use map&#xA;&#x9;public StopWatch getStopWatch(String name) {&#xA;&#x9;&#x9;return stopWatchMap.get(name);&#xA;&#x9;}&#xA;&#x9;&#xA;//&#x9;map is also a part of the collection hierarchy&#xA;&#x9;public Collection&lt;StopWatch> getAllWatches() {&#xA;&#x9;&#x9;return (Collection&lt;StopWatch>) stopWatchMap.values();&#xA;//&#x9;&#x9;hashmap have key and value, collection only has &quot;one&quot; value&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public Collection&lt;StopWatch> getStartedWatches() {&#xA;&#x9;&#x9;Collection&lt;StopWatch> watchCollection = new ArrayList&lt;>();&#xA;&#x9;&#x9;for(StopWatch value : stopWatchMap.values()){&#xA;&#x9;&#x9;&#x9;if(value.isStarted()) {&#xA;&#x9;&#x9;&#x9;&#x9;watchCollection.add(value);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return watchCollection;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public Collection&lt;StopWatch> getStoppedWatches() {&#xA;&#x9;&#x9;Collection&lt;StopWatch> watchCollection = new ArrayList&lt;>();&#xA;&#x9;&#x9;for(StopWatch value : stopWatchMap.values()) {&#xA;&#x9;&#x9;&#x9;if(value.isStopped()) {&#xA;&#x9;&#x9;&#x9;&#x9;watchCollection.add(value);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return watchCollection;&#xA;&#x9;}&#xA;&#x9;public String toString() {&#xA;&#x9;&#x9;String str = &quot;&quot;;&#xA;&#x9;&#x9;for(String key : stopWatchMap.keySet()) {&#xA;&#x9;&#x9;&#x9;str += key + stopWatchMap.get(key).getTicks() ;&#xA;&#x9;&#x9;}return str;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void addStopWatchListener(StopWatchListener listener) {&#xA;    &#x9;stopWatchListener.add(listener);&#xA;    }&#xA;    public void removeStopWatchListener(StopWatchListener listener) {&#xA;    &#x9;stopWatchListener.remove(listener);&#xA;    }&#xA;    public static void main(String[] args) {&#xA;&#x9;&#x9;StopWatchManager manager = new StopWatchManager();&#xA;&#x9;&#x9;manager.newStopWatch(&quot;SW 1&quot;);&#xA;&#x9;&#x9;manager.addStopWatchListener(new StopWatchListener());&#xA;&#x9;&#x9;manager.tick(2);&#xA;&#x9;&#x9;manager.getStopWatch(&quot;SW 1&quot;).start();&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1456765909736" sizeMeasure="86">
          <edit xsi:type="exercise:StringEdit" storedString="package objectstructures;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collection;&#xA;import java.util.HashMap;&#xA;import java.util.Map;&#xA;&#xA;public class StopWatchManager implements StopWatchListener{&#xA;    private Collection&lt;StopWatchListener> stopWatchListener = new ArrayList&lt;StopWatchListener>();&#xA;&#x9;private Map&lt;String, StopWatch> stopWatchMap = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;StopWatch newStopWatch(String name) {&#xA;&#x9;&#x9;StopWatch watch = new StopWatch();&#xA;&#x9;&#x9;stopWatchMap.put(name, watch);&#xA;&#x9;&#x9;stopWatchMap.get(name).addStopWatchListener(this);&#xA;&#x9;&#x9;return watch;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public Collection&lt;StopWatchListener> getListener() {&#xA;&#x9;&#x9;return stopWatchListener;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void removeStopWatch(String name) {&#xA;&#x9;&#x9;stopWatchMap.remove(name);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void tick(int ticks) {&#xA;//&#x9;&#x9;for(String key : map.keySet())&#xA;&#x9;&#x9;for(StopWatch value : stopWatchMap.values()) {&#xA;&#x9;&#x9;&#x9;value.tick(ticks);&#xA;&#x9;&#x9;&#x9;for (StopWatchListener listener : stopWatchListener){&#xA;&#x9;&#x9;&#x9;&#x9;listener.stopWatchChanged(value, 1);     &#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#x9;&#x9;&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;//&#x9;get watches by giving a name, but also need an index, therefore use map&#xA;&#x9;public StopWatch getStopWatch(String name) {&#xA;&#x9;&#x9;return stopWatchMap.get(name);&#xA;&#x9;}&#xA;&#x9;&#xA;//&#x9;map is also a part of the collection hierarchy&#xA;&#x9;public Collection&lt;StopWatch> getAllWatches() {&#xA;&#x9;&#x9;return (Collection&lt;StopWatch>) stopWatchMap.values();&#xA;//&#x9;&#x9;hashmap have key and value, collection only has &quot;one&quot; value&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public Collection&lt;StopWatch> getStartedWatches() {&#xA;&#x9;&#x9;Collection&lt;StopWatch> watchCollection = new ArrayList&lt;>();&#xA;&#x9;&#x9;for(StopWatch value : stopWatchMap.values()){&#xA;&#x9;&#x9;&#x9;if(value.isStarted()) {&#xA;&#x9;&#x9;&#x9;&#x9;watchCollection.add(value);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return watchCollection;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public Collection&lt;StopWatch> getStoppedWatches() {&#xA;&#x9;&#x9;Collection&lt;StopWatch> watchCollection = new ArrayList&lt;>();&#xA;&#x9;&#x9;for(StopWatch value : stopWatchMap.values()) {&#xA;&#x9;&#x9;&#x9;if(value.isStopped()) {&#xA;&#x9;&#x9;&#x9;&#x9;watchCollection.add(value);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return watchCollection;&#xA;&#x9;}&#xA;&#x9;public String toString() {&#xA;&#x9;&#x9;String str = &quot;&quot;;&#xA;&#x9;&#x9;for(String key : stopWatchMap.keySet()) {&#xA;&#x9;&#x9;&#x9;str += key + stopWatchMap.get(key).getTicks() ;&#xA;&#x9;&#x9;}return str;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void addStopWatchListener(StopWatchListener listener) {&#xA;    &#x9;stopWatchListener.add(listener);&#xA;    }&#xA;    public void removeStopWatchListener(StopWatchListener listener) {&#xA;    &#x9;stopWatchListener.remove(listener);&#xA;    }&#xA;  &#xA;&#xA;&#x9;@Override&#xA;&#x9;public void stopWatchChanged(StopWatch stopWatch, int what) {&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1456766002461" sizeMeasure="88" errorCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package objectstructures;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collection;&#xA;import java.util.HashMap;&#xA;import java.util.Map;&#xA;&#xA;public class StopWatchManager implements StopWatchListener{&#xA;    private Collection&lt;StopWatchListener> stopWatchListener = new ArrayList&lt;StopWatchListener>();&#xA;&#x9;private Map&lt;String, StopWatch> stopWatchMap = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;StopWatch newStopWatch(String name) {&#xA;&#x9;&#x9;StopWatch watch = new StopWatch();&#xA;&#x9;&#x9;stopWatchMap.put(name, watch);&#xA;&#x9;&#x9;stopWatchMap.get(name).addStopWatchListener(this); //make stopwatchmanager a listener of all stopwatch&#xA;&#x9;&#x9;return watch;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public Collection&lt;StopWatchListener> getListener() {&#xA;&#x9;&#x9;return stopWatchListener;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void removeStopWatch(String name) {&#xA;&#x9;&#x9;stopWatchMap.remove(name);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void tick(int ticks) {&#xA;//&#x9;&#x9;for(String key : map.keySet())&#xA;&#x9;&#x9;for(StopWatch value : stopWatchMap.values()) {&#xA;&#x9;&#x9;&#x9;value.tick(ticks);&#xA;&#x9;&#x9;&#x9;for (StopWatchListener listener : stopWatchListener){&#xA;&#x9;&#x9;&#x9;&#x9;listener.stopWatchChanged(value, 1);     &#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#x9;&#x9;&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;//&#x9;get watches by giving a name, but also need an index, therefore use map&#xA;&#x9;public StopWatch getStopWatch(String name) {&#xA;&#x9;&#x9;return stopWatchMap.get(name);&#xA;&#x9;}&#xA;&#x9;&#xA;//&#x9;map is also a part of the collection hierarchy&#xA;&#x9;public Collection&lt;StopWatch> getAllWatches() {&#xA;&#x9;&#x9;return (Collection&lt;StopWatch>) stopWatchMap.values();&#xA;//&#x9;&#x9;hashmap have key and value, collection only has &quot;one&quot; value&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public Collection&lt;StopWatch> getStartedWatches() {&#xA;&#x9;&#x9;Collection&lt;StopWatch> watchCollection = new ArrayList&lt;>();&#xA;&#x9;&#x9;for(StopWatch value : stopWatchMap.values()){&#xA;&#x9;&#x9;&#x9;if(value.isStarted()) {&#xA;&#x9;&#x9;&#x9;&#x9;watchCollection.add(value);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return watchCollection;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public Collection&lt;StopWatch> getStoppedWatches() {&#xA;&#x9;&#x9;Collection&lt;StopWatch> watchCollection = new ArrayList&lt;>();&#xA;&#x9;&#x9;for(StopWatch value : stopWatchMap.values()) {&#xA;&#x9;&#x9;&#x9;if(value.isStopped()) {&#xA;&#x9;&#x9;&#x9;&#x9;watchCollection.add(value);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return watchCollection;&#xA;&#x9;}&#xA;&#x9;public String toString() {&#xA;&#x9;&#x9;String str = &quot;&quot;;&#xA;&#x9;&#x9;for(String key : stopWatchMap.keySet()) {&#xA;&#x9;&#x9;&#x9;str += key + stopWatchMap.get(key).getTicks() ;&#xA;&#x9;&#x9;}return str;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void addStopWatchListener(StopWatchListener listener) {&#xA;    &#x9;stopWatchListener.add(listener);&#xA;    }&#xA;    public void removeStopWatchListener(StopWatchListener listener) {&#xA;    &#x9;stopWatchListener.remove(listener);&#xA;    }&#xA;  &#xA;&#xA;&#x9;@Override&#xA;&#x9;public void stopWatchChanged(StopWatch stopWatch, int what) {&#xA;&#x9;&#x9;for (StopWatchListener listener : stopWatchListener){&#xA;&#x9;&#x9;&#x9;listener.stopWatchChanged(value, what);     &#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1456766075376" sizeMeasure="90">
          <edit xsi:type="exercise:StringEdit" storedString="package objectstructures;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collection;&#xA;import java.util.HashMap;&#xA;import java.util.Map;&#xA;&#xA;public class StopWatchManager implements StopWatchListener{&#xA;    private Collection&lt;StopWatchListener> stopWatchListener = new ArrayList&lt;StopWatchListener>();&#xA;&#x9;private Map&lt;String, StopWatch> stopWatchMap = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;StopWatch newStopWatch(String name) {&#xA;&#x9;&#x9;StopWatch watch = new StopWatch();&#xA;&#x9;&#x9;stopWatchMap.put(name, watch);&#xA;&#x9;&#x9;stopWatchMap.get(name).addStopWatchListener(this); //make stopwatchmanager a listener of all stopwatch&#xA;&#x9;&#x9;return watch;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public Collection&lt;StopWatchListener> getListener() {&#xA;&#x9;&#x9;return stopWatchListener;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void removeStopWatch(String name) {&#xA;&#x9;&#x9;stopWatchMap.remove(name);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void tick(int ticks) {&#xA;//&#x9;&#x9;for(String key : map.keySet())&#xA;&#x9;&#x9;for(StopWatch value : stopWatchMap.values()) {&#xA;&#x9;&#x9;&#x9;value.tick(ticks);&#xA;&#x9;&#x9;&#x9;for (StopWatchListener listener : stopWatchListener){&#xA;&#x9;&#x9;&#x9;&#x9;listener.stopWatchChanged(value, 1);     &#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#x9;&#x9;&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;//&#x9;get watches by giving a name, but also need an index, therefore use map&#xA;&#x9;public StopWatch getStopWatch(String name) {&#xA;&#x9;&#x9;return stopWatchMap.get(name);&#xA;&#x9;}&#xA;&#x9;&#xA;//&#x9;map is also a part of the collection hierarchy&#xA;&#x9;public Collection&lt;StopWatch> getAllWatches() {&#xA;&#x9;&#x9;return (Collection&lt;StopWatch>) stopWatchMap.values();&#xA;//&#x9;&#x9;hashmap have key and value, collection only has &quot;one&quot; value&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public Collection&lt;StopWatch> getStartedWatches() {&#xA;&#x9;&#x9;Collection&lt;StopWatch> watchCollection = new ArrayList&lt;>();&#xA;&#x9;&#x9;for(StopWatch value : stopWatchMap.values()){&#xA;&#x9;&#x9;&#x9;if(value.isStarted()) {&#xA;&#x9;&#x9;&#x9;&#x9;watchCollection.add(value);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return watchCollection;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public Collection&lt;StopWatch> getStoppedWatches() {&#xA;&#x9;&#x9;Collection&lt;StopWatch> watchCollection = new ArrayList&lt;>();&#xA;&#x9;&#x9;for(StopWatch value : stopWatchMap.values()) {&#xA;&#x9;&#x9;&#x9;if(value.isStopped()) {&#xA;&#x9;&#x9;&#x9;&#x9;watchCollection.add(value);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return watchCollection;&#xA;&#x9;}&#xA;&#x9;public String toString() {&#xA;&#x9;&#x9;String str = &quot;&quot;;&#xA;&#x9;&#x9;for(String key : stopWatchMap.keySet()) {&#xA;&#x9;&#x9;&#x9;str += key + stopWatchMap.get(key).getTicks() ;&#xA;&#x9;&#x9;}return str;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void addStopWatchListener(StopWatchListener listener) {&#xA;    &#x9;stopWatchListener.add(listener);&#xA;    }&#xA;    public void removeStopWatchListener(StopWatchListener listener) {&#xA;    &#x9;stopWatchListener.remove(listener);&#xA;    }&#xA;  &#xA;&#xA;&#x9;@Override&#xA;&#x9;public void stopWatchChanged(StopWatch stopWatch, int what) {&#xA;&#x9;&#x9;for(StopWatch value : stopWatchMap.values()) {&#xA;&#x9;&#x9;&#x9;for (StopWatchListener listener : stopWatchListener){&#xA;&#x9;&#x9;&#x9;&#x9;listener.stopWatchChanged(value, 1);     &#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1456766165454" sizeMeasure="86">
          <edit xsi:type="exercise:StringEdit" storedString="package objectstructures;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collection;&#xA;import java.util.HashMap;&#xA;import java.util.Map;&#xA;&#xA;public class StopWatchManager implements StopWatchListener{&#xA;    private Collection&lt;StopWatchListener> stopWatchListener = new ArrayList&lt;StopWatchListener>();&#xA;&#x9;private Map&lt;String, StopWatch> stopWatchMap = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;StopWatch newStopWatch(String name) {&#xA;&#x9;&#x9;StopWatch watch = new StopWatch();&#xA;&#x9;&#x9;stopWatchMap.put(name, watch);&#xA;&#x9;&#x9;stopWatchMap.get(name).addStopWatchListener(this); //make stopwatchmanager a listener of all stopwatch&#xA;&#x9;&#x9;return watch;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public Collection&lt;StopWatchListener> getListener() {&#xA;&#x9;&#x9;return stopWatchListener;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void removeStopWatch(String name) {&#xA;&#x9;&#x9;stopWatchMap.remove(name);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void tick(int ticks) {&#xA;//&#x9;&#x9;for(String key : map.keySet())&#xA;&#x9;&#x9;for(StopWatch value : stopWatchMap.values()) {&#xA;&#x9;&#x9;&#x9;value.tick(ticks);&#xA;&#x9;&#x9;&#x9;stopWatchChanged(value,1);&#xA;&#x9;&#x9;}&#x9;&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;//&#x9;get watches by giving a name, but also need an index, therefore use map&#xA;&#x9;public StopWatch getStopWatch(String name) {&#xA;&#x9;&#x9;return stopWatchMap.get(name);&#xA;&#x9;}&#xA;&#x9;&#xA;//&#x9;map is also a part of the collection hierarchy&#xA;&#x9;public Collection&lt;StopWatch> getAllWatches() {&#xA;&#x9;&#x9;return (Collection&lt;StopWatch>) stopWatchMap.values();&#xA;//&#x9;&#x9;hashmap have key and value, collection only has &quot;one&quot; value&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public Collection&lt;StopWatch> getStartedWatches() {&#xA;&#x9;&#x9;Collection&lt;StopWatch> watchCollection = new ArrayList&lt;>();&#xA;&#x9;&#x9;for(StopWatch value : stopWatchMap.values()){&#xA;&#x9;&#x9;&#x9;if(value.isStarted()) {&#xA;&#x9;&#x9;&#x9;&#x9;watchCollection.add(value);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return watchCollection;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public Collection&lt;StopWatch> getStoppedWatches() {&#xA;&#x9;&#x9;Collection&lt;StopWatch> watchCollection = new ArrayList&lt;>();&#xA;&#x9;&#x9;for(StopWatch value : stopWatchMap.values()) {&#xA;&#x9;&#x9;&#x9;if(value.isStopped()) {&#xA;&#x9;&#x9;&#x9;&#x9;watchCollection.add(value);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return watchCollection;&#xA;&#x9;}&#xA;&#x9;public String toString() {&#xA;&#x9;&#x9;String str = &quot;&quot;;&#xA;&#x9;&#x9;for(String key : stopWatchMap.keySet()) {&#xA;&#x9;&#x9;&#x9;str += key + stopWatchMap.get(key).getTicks() ;&#xA;&#x9;&#x9;}return str;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void addStopWatchListener(StopWatchListener listener) {&#xA;    &#x9;stopWatchListener.add(listener);&#xA;    }&#xA;    public void removeStopWatchListener(StopWatchListener listener) {&#xA;    &#x9;stopWatchListener.remove(listener);&#xA;    }&#xA;  &#xA;&#xA;&#x9;@Override&#xA;&#x9;public void stopWatchChanged(StopWatch stopWatch, int what) {&#xA;&#x9;&#x9;for (StopWatchListener listener : stopWatchListener){&#xA;&#x9;&#x9;&#x9;listener.stopWatchChanged(stopWatch, what);     &#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1456766308758" sizeMeasure="85">
          <edit xsi:type="exercise:StringEdit" storedString="package objectstructures;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collection;&#xA;import java.util.HashMap;&#xA;import java.util.Map;&#xA;&#xA;public class StopWatchManager implements StopWatchListener{&#xA;    private Collection&lt;StopWatchListener> stopWatchListener = new ArrayList&lt;StopWatchListener>();&#xA;&#x9;private Map&lt;String, StopWatch> stopWatchMap = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;StopWatch newStopWatch(String name) {&#xA;&#x9;&#x9;StopWatch watch = new StopWatch();&#xA;&#x9;&#x9;stopWatchMap.put(name, watch);&#xA;&#x9;&#x9;stopWatchMap.get(name).addStopWatchListener(this); //make stopwatchmanager a listener of all stopwatch&#xA;&#x9;&#x9;return watch;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public Collection&lt;StopWatchListener> getListener() {&#xA;&#x9;&#x9;return stopWatchListener;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void removeStopWatch(String name) {&#xA;&#x9;&#x9;stopWatchMap.remove(name);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void tick(int ticks) {&#xA;//&#x9;&#x9;for(String key : map.keySet())&#xA;&#x9;&#x9;for(StopWatch value : stopWatchMap.values()) {&#xA;&#x9;&#x9;&#x9;value.tick(ticks);&#xA;&#x9;&#x9;}&#x9;&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;//&#x9;get watches by giving a name, but also need an index, therefore use map&#xA;&#x9;public StopWatch getStopWatch(String name) {&#xA;&#x9;&#x9;return stopWatchMap.get(name);&#xA;&#x9;}&#xA;&#x9;&#xA;//&#x9;map is also a part of the collection hierarchy&#xA;&#x9;public Collection&lt;StopWatch> getAllWatches() {&#xA;&#x9;&#x9;return (Collection&lt;StopWatch>) stopWatchMap.values();&#xA;//&#x9;&#x9;hashmap have key and value, collection only has &quot;one&quot; value&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public Collection&lt;StopWatch> getStartedWatches() {&#xA;&#x9;&#x9;Collection&lt;StopWatch> watchCollection = new ArrayList&lt;>();&#xA;&#x9;&#x9;for(StopWatch value : stopWatchMap.values()){&#xA;&#x9;&#x9;&#x9;if(value.isStarted()) {&#xA;&#x9;&#x9;&#x9;&#x9;watchCollection.add(value);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return watchCollection;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public Collection&lt;StopWatch> getStoppedWatches() {&#xA;&#x9;&#x9;Collection&lt;StopWatch> watchCollection = new ArrayList&lt;>();&#xA;&#x9;&#x9;for(StopWatch value : stopWatchMap.values()) {&#xA;&#x9;&#x9;&#x9;if(value.isStopped()) {&#xA;&#x9;&#x9;&#x9;&#x9;watchCollection.add(value);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return watchCollection;&#xA;&#x9;}&#xA;&#x9;public String toString() {&#xA;&#x9;&#x9;String str = &quot;&quot;;&#xA;&#x9;&#x9;for(String key : stopWatchMap.keySet()) {&#xA;&#x9;&#x9;&#x9;str += key + stopWatchMap.get(key).getTicks() ;&#xA;&#x9;&#x9;}return str;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void addStopWatchListener(StopWatchListener listener) {&#xA;    &#x9;stopWatchListener.add(listener);&#xA;    }&#xA;    public void removeStopWatchListener(StopWatchListener listener) {&#xA;    &#x9;stopWatchListener.remove(listener);&#xA;    }&#xA;  &#xA;&#xA;&#x9;@Override&#xA;&#x9;public void stopWatchChanged(StopWatch stopWatch, int what) {&#xA;&#x9;&#x9;for (StopWatchListener listener : stopWatchListener){&#xA;&#x9;&#x9;&#x9;listener.stopWatchChanged(stopWatch, what);     &#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1456766451966" sizeMeasure="85">
          <edit xsi:type="exercise:StringEdit" storedString="package objectstructures;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collection;&#xA;import java.util.HashMap;&#xA;import java.util.Map;&#xA;&#xA;public class StopWatchManager implements StopWatchListener{&#xA;    private Collection&lt;StopWatchListener> stopWatchListener = new ArrayList&lt;StopWatchListener>();&#xA;&#x9;private Map&lt;String, StopWatch> stopWatchMap = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;StopWatch newStopWatch(String name) {&#xA;&#x9;&#x9;StopWatch watch = new StopWatch();&#xA;&#x9;&#x9;stopWatchMap.put(name, watch);&#xA;&#x9;&#x9;stopWatchMap.get(name).addStopWatchListener(this); //make stopwatchmanager a listener of all stopwatch, so that everytime stopwatch changes, it will report to manager&#xA;&#x9;&#x9;return watch;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public Collection&lt;StopWatchListener> getListener() {&#xA;&#x9;&#x9;return stopWatchListener;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void removeStopWatch(String name) {&#xA;&#x9;&#x9;stopWatchMap.remove(name);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void tick(int ticks) {&#xA;//&#x9;&#x9;for(String key : map.keySet())&#xA;&#x9;&#x9;for(StopWatch value : stopWatchMap.values()) {&#xA;&#x9;&#x9;&#x9;value.tick(ticks);&#xA;&#x9;&#x9;}&#x9;&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;//&#x9;get watches by giving a name, but also need an index, therefore use map&#xA;&#x9;public StopWatch getStopWatch(String name) {&#xA;&#x9;&#x9;return stopWatchMap.get(name);&#xA;&#x9;}&#xA;&#x9;&#xA;//&#x9;map is also a part of the collection hierarchy&#xA;&#x9;public Collection&lt;StopWatch> getAllWatches() {&#xA;&#x9;&#x9;return (Collection&lt;StopWatch>) stopWatchMap.values();&#xA;//&#x9;&#x9;hashmap have key and value, collection only has &quot;one&quot; value&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public Collection&lt;StopWatch> getStartedWatches() {&#xA;&#x9;&#x9;Collection&lt;StopWatch> watchCollection = new ArrayList&lt;>();&#xA;&#x9;&#x9;for(StopWatch value : stopWatchMap.values()){&#xA;&#x9;&#x9;&#x9;if(value.isStarted()) {&#xA;&#x9;&#x9;&#x9;&#x9;watchCollection.add(value);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return watchCollection;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public Collection&lt;StopWatch> getStoppedWatches() {&#xA;&#x9;&#x9;Collection&lt;StopWatch> watchCollection = new ArrayList&lt;>();&#xA;&#x9;&#x9;for(StopWatch value : stopWatchMap.values()) {&#xA;&#x9;&#x9;&#x9;if(value.isStopped()) {&#xA;&#x9;&#x9;&#x9;&#x9;watchCollection.add(value);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return watchCollection;&#xA;&#x9;}&#xA;&#x9;public String toString() {&#xA;&#x9;&#x9;String str = &quot;&quot;;&#xA;&#x9;&#x9;for(String key : stopWatchMap.keySet()) {&#xA;&#x9;&#x9;&#x9;str += key + stopWatchMap.get(key).getTicks() ;&#xA;&#x9;&#x9;}return str;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public void addStopWatchListener(StopWatchListener listener) {&#xA;    &#x9;stopWatchListener.add(listener);&#xA;    }&#xA;    public void removeStopWatchListener(StopWatchListener listener) {&#xA;    &#x9;stopWatchListener.remove(listener);&#xA;    }&#xA;  &#xA;&#xA;&#x9;@Override&#xA;&#x9;public void stopWatchChanged(StopWatch stopWatch, int what) {&#xA;&#x9;&#x9;for (StopWatchListener listener : stopWatchListener){&#xA;&#x9;&#x9;&#x9;listener.stopWatchChanged(stopWatch, what);     &#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
      </proposals>
      <proposals xsi:type="junit:JunitTestProposal" question="/0/@parts.0/@tasks.2/@q" answer="/0/@parts.0/@tasks.2/@a" completion="0.375">
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1456747519368" completion="0.0" failureCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1456747574278" completion="0.0" failureCount="2"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1456748447580" completion="0.3333333333333333" successCount="1" failureCount="2"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1456749313151" completion="0.25" successCount="1" failureCount="2" errorCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1456749354702" completion="0.4" successCount="2" failureCount="2" errorCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1456749357113" completion="0.3333333333333333" successCount="2" failureCount="2" errorCount="2"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1456749418895" completion="0.42857142857142855" successCount="3" failureCount="2" errorCount="2"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1456750989603" completion="0.375" successCount="3" failureCount="2" errorCount="3"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1456758573121" completion="0.4444444444444444" successCount="4" failureCount="2" errorCount="3"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1456758603620" completion="0.4" successCount="4" failureCount="3" errorCount="3"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1456759808574" completion="0.36363636363636365" successCount="4" failureCount="4" errorCount="3"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1456759823418" completion="0.3333333333333333" successCount="4" failureCount="5" errorCount="3"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1456765910058" completion="0.3076923076923077" successCount="4" failureCount="6" errorCount="3"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1456766165788" completion="0.2857142857142857" successCount="4" failureCount="7" errorCount="3"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1456766309007" completion="0.3333333333333333" successCount="5" failureCount="7" errorCount="3"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1456766366849" completion="0.375" successCount="6" failureCount="7" errorCount="3"/>
      </proposals>
    </proposals>
    <proposals exercisePart="/0/@parts.1">
      <proposals xsi:type="workbench:DebugEventProposal" question="/0/@parts.1/@tasks.0/@q" answer="/0/@parts.1/@tasks.0/@a" completion="0.0" performedCount="28">
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
      </proposals>
      <proposals xsi:type="workbench:CommandExecutionProposal" question="/0/@parts.1/@tasks.1/@q" answer="/0/@parts.1/@tasks.1/@a" completion="0.0" performedCount="47">
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
      </proposals>
      <proposals xsi:type="workbench:CommandExecutionProposal" question="/0/@parts.1/@tasks.2/@q" answer="/0/@parts.1/@tasks.2/@a" completion="0.0" performedCount="1">
        <attempts timestamp="-1" completion="0.0"/>
      </proposals>
      <proposals xsi:type="workbench:PartTaskProposal" question="/0/@parts.1/@tasks.3/@q" answer="/0/@parts.1/@tasks.3/@a" completion="0.0" performedCount="5">
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
        <attempts timestamp="-1" completion="0.0"/>
      </proposals>
    </proposals>
  </exercise:ExerciseProposals>
</xmi:XMI>
