<?xml version="1.0" encoding="UTF-8"?>
<xmi:XMI xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:exercise="platform:/plugin/no.hal.learning.exercise.model/model/exercise.ecore" xmlns:jdt="platform:/plugin/no.hal.learning.exercise.jdt/model/jdt-exercise.ecore" xmlns:junit="platform:/plugin/no.hal.learning.exercise.junit/model/junit-exercise.ecore" xmlns:workbench="platform:/plugin/no.hal.learning.exercise.workbench/model/workbench-exercise.ecore">
  <exercise:Exercise>
    <parts xsi:type="exercise:ExercisePart" title="Employee">
      <tasks xsi:type="exercise:Task">
        <q xsi:type="exercise:StringQuestion" question="Write source code for the Employee Interface."/>
        <a xsi:type="jdt:JdtSourceEditAnswer" className="delegation.office.Employee"/>
      </tasks>
      <tasks xsi:type="exercise:Task">
        <q xsi:type="exercise:StringQuestion" question="Write source code for the Clerk Class."/>
        <a xsi:type="jdt:JdtSourceEditAnswer" className="delegation.office.Clerk"/>
      </tasks>
      <tasks xsi:type="exercise:Task">
        <q xsi:type="exercise:StringQuestion" question="Run the Clerk JUnit test."/>
        <a xsi:type="junit:JunitTestAnswer" testRunName="delegation.office.ClerkTest"/>
      </tasks>
      <tasks xsi:type="exercise:Task">
        <q xsi:type="exercise:StringQuestion" question="Write source code for the Printer Class."/>
        <a xsi:type="jdt:JdtSourceEditAnswer" className="delegation.office.Printer"/>
      </tasks>
      <tasks xsi:type="exercise:Task">
        <q xsi:type="exercise:StringQuestion" question="Run the Printer JUnit test."/>
        <a xsi:type="junit:JunitTestAnswer" testRunName="delegation.office.PrinterTest"/>
      </tasks>
      <tasks xsi:type="exercise:Task">
        <q xsi:type="exercise:StringQuestion" question="Write source code for the Manager Class."/>
        <a xsi:type="jdt:JdtSourceEditAnswer" className="delegation.office.Manager"/>
      </tasks>
      <tasks xsi:type="exercise:Task">
        <q xsi:type="exercise:StringQuestion" question="Run the Manager JUnit test."/>
        <a xsi:type="junit:JunitTestAnswer" testRunName="delegation.office.ManagerTest"/>
      </tasks>
    </parts>
    <parts xsi:type="exercise:ExercisePart" title="Tool usage">
      <tasks xsi:type="exercise:Task">
        <q xsi:type="exercise:StringQuestion" question="Use breakpoints to debug code."/>
        <a xsi:type="workbench:DebugEventAnswer" action="suspend.breakpoint"/>
      </tasks>
      <tasks xsi:type="exercise:Task">
        <q xsi:type="exercise:StringQuestion" question="Use the debug command Step Over"/>
        <a xsi:type="workbench:CommandExecutionAnswer" elementId="org.eclipse.debug.ui.commands.StepOver" action="executeSuccess"/>
      </tasks>
      <tasks xsi:type="exercise:Task">
        <q xsi:type="exercise:StringQuestion" question="Use the debug command Step Into"/>
        <a xsi:type="workbench:CommandExecutionAnswer" elementId="org.eclipse.debug.ui.commands.StepInto" action="executeSuccess"/>
      </tasks>
      <tasks xsi:type="exercise:Task">
        <q xsi:type="exercise:StringQuestion" question="Use the Variables view"/>
        <a xsi:type="workbench:PartTaskAnswer" elementId="org.eclipse.debug.ui.VariableView" action="activated"/>
      </tasks>
      <tasks xsi:type="exercise:Task">
        <q xsi:type="exercise:StringQuestion" question="Run the Printer class."/>
        <a xsi:type="jdt:JdtLaunchAnswer" className="delegation.office.Printer"/>
      </tasks>
      <tasks xsi:type="exercise:Task">
        <q xsi:type="exercise:StringQuestion" question="Run the Manager class."/>
        <a xsi:type="jdt:JdtLaunchAnswer" className="delegation.office.Manager"/>
      </tasks>
      <tasks xsi:type="exercise:Task">
        <q xsi:type="exercise:StringQuestion" question="Run the Clerk class."/>
        <a xsi:type="jdt:JdtLaunchAnswer" className="delegation.office.Clerk"/>
      </tasks>
    </parts>
  </exercise:Exercise>
  <exercise:ExerciseProposals exercise="/0">
    <proposals exercisePart="/0/@parts.0">
      <proposals xsi:type="jdt:JdtSourceEditProposal" question="/0/@parts.0/@tasks.0/@q" answer="/0/@parts.0/@tasks.0/@a">
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457893168255" sizeMeasure="5">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;public interface Employee {&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457893289508" sizeMeasure="11">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.function.BinaryOperator;&#xA;&#xA;public interface Employee {&#xA;&#xA;&#x9;public double doCalculations(BinaryOperator&lt;Double> operation, double value1, double value2);&#xA;&#x9;public void printDocument(String document);&#xA;&#x9;public int getTaskCount();&#xA;&#x9;public int getResourceCount();&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457893908684" sizeMeasure="11">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.function.BinaryOperator;&#xA;&#xA;public interface Employee {&#xA;&#xA;&#x9;double doCalculations(BinaryOperator&lt;Double> operation, double value1, double value2);&#xA;&#x9;void printDocument(String document);&#xA;&#x9;int getTaskCount();&#xA;&#x9;int getResourceCount();&#xA;}&#xA;"/>
        </attempts>
      </proposals>
      <proposals xsi:type="jdt:JdtSourceEditProposal" question="/0/@parts.0/@tasks.1/@q" answer="/0/@parts.0/@tasks.1/@a">
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457893299250" sizeMeasure="5">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;public class Clerk {&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457893579648" sizeMeasure="36">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.function.BinaryOperator;&#xA;&#xA;public class Clerk implements Employee{&#xA;&#xA;&#x9;public Clerk(Printer printer){&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public double doCalculations(BinaryOperator&lt;Double> operation, double value1, double value2) {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;return 0;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void printDocument(String document) {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getTaskCount() {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;return 0;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getResourceCount() {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;return 0;&#xA;&#x9;}&#xA;&#x9;&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457893920841" sizeMeasure="35">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.function.BinaryOperator;&#xA;&#xA;public class Clerk implements Employee{&#xA;&#xA;&#x9;public Clerk(Printer printer){&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public double doCalculations(BinaryOperator&lt;Double> operation, double value1, double value2) {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;return 0;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void printDocument(String document) {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getTaskCount() {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;return 0;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getResourceCount() {&#xA;&#x9;&#x9;return 1;&#xA;&#x9;}&#xA;&#x9;&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457894151245" sizeMeasure="35" errorCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.function.BinaryOperator;&#xA;&#xA;public class Clerk implements Employee{&#xA;&#xA;&#x9;Printer printer;&#xA;&#x9;public Clerk(Printer printer){&#xA;&#x9;&#x9;this.printer = printer;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public double doCalculations(BinaryOperator&lt;Double> operation, double value1, double value2) {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;return 0;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void printDocument(String document) {&#xA;&#x9;&#x9;printer.printDocument(document, employee);&#x9;&#x9;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getTaskCount() {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;return 0;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getResourceCount() {&#xA;&#x9;&#x9;return 1;&#xA;&#x9;}&#xA;&#x9;&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457894351002" sizeMeasure="35">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.function.BinaryOperator;&#xA;&#xA;public class Clerk implements Employee{&#xA;&#xA;&#x9;private int taskCount;&#xA;&#x9;Printer printer;&#xA;&#x9;public Clerk(Printer printer){&#xA;&#x9;&#x9;this.printer = printer;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public double doCalculations(BinaryOperator&lt;Double> operation, double value1, double value2) {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;return 0;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void printDocument(String document) {&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getTaskCount() {&#xA;&#x9;&#x9;return taskCount;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getResourceCount() {&#xA;&#x9;&#x9;return 1;&#xA;&#x9;}&#xA;&#x9;&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457894883492" sizeMeasure="34">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.function.BinaryOperator;&#xA;&#xA;public class Clerk implements Employee{&#xA;&#xA;&#x9;private int taskCount;&#xA;&#x9;Printer printer;&#xA;&#x9;public Clerk(Printer printer){&#xA;&#x9;&#x9;this.printer = printer;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public double doCalculations(BinaryOperator&lt;Double> operation, double value1, double value2) {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;return 0;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void printDocument(String document) {&#xA;&#x9;&#x9;printer.printDocument(document, this);&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getTaskCount() {&#xA;&#x9;&#x9;return taskCount;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getResourceCount() {&#xA;&#x9;&#x9;return 1;&#xA;&#x9;}&#xA;&#x9;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457895110509" sizeMeasure="35">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.function.BinaryOperator;&#xA;&#xA;public class Clerk implements Employee{&#xA;&#xA;&#x9;private int taskCount = 0;&#xA;&#x9;Printer printer;&#xA;&#x9;&#xA;&#x9;public Clerk(Printer printer){&#xA;&#x9;&#x9;this.printer = printer;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public double doCalculations(BinaryOperator&lt;Double> operation, double value1, double value2) {&#xA;&#x9;&#x9;return 0;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void printDocument(String document) {&#xA;&#x9;&#x9;printer.printDocument(document, this);&#xA;&#x9;&#x9;taskCount ++;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getTaskCount() {&#xA;&#x9;&#x9;return taskCount;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getResourceCount() {&#xA;&#x9;&#x9;return 1;&#xA;&#x9;}&#xA;&#x9;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457895343465" sizeMeasure="37" errorCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.function.BinaryOperator;&#xA;&#xA;public class Clerk implements Employee{&#xA;&#xA;&#x9;private int taskCount = 0;&#xA;&#x9;Printer printer;&#xA;&#x9;&#xA;&#x9;public Clerk(Printer printer){&#xA;&#x9;&#x9;this.printer = printer;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public double doCalculations(BinaryOperator&lt;Double> operation, double value1, double value2) {&#xA;&#x9;&#x9;double calculation;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;return calculation;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void printDocument(String document) {&#xA;&#x9;&#x9;printer.printDocument(document, this); //delegate to Printer to print a document&#xA;&#x9;&#x9;taskCount ++;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getTaskCount() {&#xA;&#x9;&#x9;return taskCount;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getResourceCount() {&#xA;&#x9;&#x9;return 1;&#xA;&#x9;}&#xA;&#x9;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457895353401" sizeMeasure="37">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.function.BinaryOperator;&#xA;&#xA;public class Clerk implements Employee{&#xA;&#xA;&#x9;private int taskCount = 0;&#xA;&#x9;Printer printer;&#xA;&#x9;&#xA;&#x9;public Clerk(Printer printer){&#xA;&#x9;&#x9;this.printer = printer;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public double doCalculations(BinaryOperator&lt;Double> operation, double value1, double value2) {&#xA;&#x9;&#x9;double calculation = 0;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;return calculation;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void printDocument(String document) {&#xA;&#x9;&#x9;printer.printDocument(document, this); //delegate to Printer to print a document&#xA;&#x9;&#x9;taskCount ++;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getTaskCount() {&#xA;&#x9;&#x9;return taskCount;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getResourceCount() {&#xA;&#x9;&#x9;return 1;&#xA;&#x9;}&#xA;&#x9;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457895952821" sizeMeasure="37">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.function.BinaryOperator;&#xA;&#xA;public class Clerk implements Employee{&#xA;&#xA;&#x9;private int taskCount = 0;&#xA;&#x9;Printer printer;&#xA;&#x9;&#xA;&#x9;public Clerk(Printer printer){&#xA;&#x9;&#x9;this.printer = printer;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public double doCalculations(BinaryOperator&lt;Double> operation, double value1, double value2) {&#xA;&#x9;&#x9;double calculation = 0;&#xA;&#x9;&#x9;taskCount ++;&#xA;&#x9;&#x9;return calculation;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void printDocument(String document) {&#xA;&#x9;&#x9;printer.printDocument(document, this); //delegate to Printer to print a document&#xA;&#x9;&#x9;taskCount ++;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getTaskCount() {&#xA;&#x9;&#x9;return taskCount;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getResourceCount() {&#xA;&#x9;&#x9;return 1;&#xA;&#x9;}&#xA;&#x9;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457896746522" sizeMeasure="38">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.function.BinaryOperator;&#xA;&#xA;public class Clerk implements Employee{&#xA;&#xA;&#x9;private int taskCount = 0;&#xA;&#x9;Printer printer;&#xA;&#x9;&#xA;&#x9;public Clerk(Printer printer){&#xA;&#x9;&#x9;this.printer = printer;&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public double doCalculations(BinaryOperator&lt;Double> operation, double value1, double value2) {&#xA;&#x9;&#x9;double calculation = 0;&#xA;&#x9;&#x9;taskCount ++;&#xA;&#x9;&#x9;return calculation;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void printDocument(String document) {&#xA;&#x9;&#x9;printer.printDocument(document, this); //delegate to Printer to print a document&#xA;&#x9;&#x9;taskCount ++;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getTaskCount() {&#xA;&#x9;&#x9;return taskCount;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getResourceCount() {&#xA;&#x9;&#x9;return 1;&#xA;&#x9;}&#xA;&#x9;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457896891402" sizeMeasure="40">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.function.BinaryOperator;&#xA;&#xA;public class Clerk implements Employee{&#xA;&#xA;&#x9;private int taskCount = 0;&#xA;&#x9;Printer printer;&#xA;&#x9;&#xA;&#x9;public Clerk(Printer printer){&#xA;&#x9;&#x9;this.printer = printer;&#xA;&#x9;&#x9;if(printer.getPrintHistory(this) == null){&#xA;&#x9;&#x9;&#x9;System.out.println(&quot;the size is 0&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public double doCalculations(BinaryOperator&lt;Double> operation, double value1, double value2) {&#xA;&#x9;&#x9;double calculation = 0;&#xA;&#x9;&#x9;taskCount ++;&#xA;&#x9;&#x9;return calculation;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void printDocument(String document) {&#xA;&#x9;&#x9;printer.printDocument(document, this); //delegate to Printer to print a document&#xA;&#x9;&#x9;taskCount ++;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getTaskCount() {&#xA;&#x9;&#x9;return taskCount;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getResourceCount() {&#xA;&#x9;&#x9;return 1;&#xA;&#x9;}&#xA;&#x9;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457896930323" sizeMeasure="40">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.function.BinaryOperator;&#xA;&#xA;public class Clerk implements Employee{&#xA;&#xA;&#x9;private int taskCount = 0;&#xA;&#x9;Printer printer;&#xA;&#x9;&#xA;&#x9;public Clerk(Printer printer){&#xA;&#x9;&#x9;this.printer = printer;&#xA;&#x9;&#x9;if(printer.getPrintHistory(this) == null){&#xA;&#x9;&#x9;&#x9;printer.printDocument(&quot;&quot;, this);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public double doCalculations(BinaryOperator&lt;Double> operation, double value1, double value2) {&#xA;&#x9;&#x9;double calculation = 0;&#xA;&#x9;&#x9;taskCount ++;&#xA;&#x9;&#x9;return calculation;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void printDocument(String document) {&#xA;&#x9;&#x9;printer.printDocument(document, this); //delegate to Printer to print a document&#xA;&#x9;&#x9;taskCount ++;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getTaskCount() {&#xA;&#x9;&#x9;return taskCount;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getResourceCount() {&#xA;&#x9;&#x9;return 1;&#xA;&#x9;}&#xA;&#x9;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457897048122" sizeMeasure="41">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.HashMap;&#xA;import java.util.function.BinaryOperator;&#xA;&#xA;public class Clerk implements Employee{&#xA;&#xA;&#x9;private int taskCount = 0;&#xA;&#x9;Printer printer;&#xA;&#x9;&#xA;&#x9;public Clerk(Printer printer){&#xA;&#x9;&#x9;this.printer = printer;&#xA;&#x9;&#x9;if(printer.getPrintHistory(this) == null){&#xA;&#x9;&#x9;&#x9;printer.printHistory = new HashMap&lt;>();&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public double doCalculations(BinaryOperator&lt;Double> operation, double value1, double value2) {&#xA;&#x9;&#x9;double calculation = 0;&#xA;&#x9;&#x9;taskCount ++;&#xA;&#x9;&#x9;return calculation;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void printDocument(String document) {&#xA;&#x9;&#x9;printer.printDocument(document, this); //delegate to Printer to print a document&#xA;&#x9;&#x9;taskCount ++;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getTaskCount() {&#xA;&#x9;&#x9;return taskCount;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getResourceCount() {&#xA;&#x9;&#x9;return 1;&#xA;&#x9;}&#xA;&#x9;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457897227434" sizeMeasure="42" warningCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.HashMap;&#xA;import java.util.function.BinaryOperator;&#xA;&#xA;public class Clerk implements Employee{&#xA;&#xA;&#x9;private int taskCount = 0;&#xA;&#x9;Printer printer;&#xA;&#x9;&#xA;&#x9;public Clerk(Printer printer){&#xA;&#x9;&#x9;this.printer = printer;&#xA;&#x9;&#x9;if(!printer.printHistory.containsKey(this)){&#xA;&#x9;&#x9;&#x9;printer.printHistory.put(this, new ArrayList&lt;String>());&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public double doCalculations(BinaryOperator&lt;Double> operation, double value1, double value2) {&#xA;&#x9;&#x9;double calculation = 0;&#xA;&#x9;&#x9;taskCount ++;&#xA;&#x9;&#x9;return calculation;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void printDocument(String document) {&#xA;&#x9;&#x9;printer.printDocument(document, this); //delegate to Printer to print a document&#xA;&#x9;&#x9;taskCount ++;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getTaskCount() {&#xA;&#x9;&#x9;return taskCount;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getResourceCount() {&#xA;&#x9;&#x9;return 1;&#xA;&#x9;}&#xA;&#x9;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457897232277" sizeMeasure="41">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.function.BinaryOperator;&#xA;&#xA;public class Clerk implements Employee{&#xA;&#xA;&#x9;private int taskCount = 0;&#xA;&#x9;Printer printer;&#xA;&#x9;&#xA;&#x9;public Clerk(Printer printer){&#xA;&#x9;&#x9;this.printer = printer;&#xA;&#x9;&#x9;if(!printer.printHistory.containsKey(this)){&#xA;&#x9;&#x9;&#x9;printer.printHistory.put(this, new ArrayList&lt;String>());&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public double doCalculations(BinaryOperator&lt;Double> operation, double value1, double value2) {&#xA;&#x9;&#x9;double calculation = 0;&#xA;&#x9;&#x9;taskCount ++;&#xA;&#x9;&#x9;return calculation;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void printDocument(String document) {&#xA;&#x9;&#x9;printer.printDocument(document, this); //delegate to Printer to print a document&#xA;&#x9;&#x9;taskCount ++;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getTaskCount() {&#xA;&#x9;&#x9;return taskCount;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getResourceCount() {&#xA;&#x9;&#x9;return 1;&#xA;&#x9;}&#xA;&#x9;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457899578214" sizeMeasure="39">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.function.BinaryOperator;&#xA;&#xA;public class Clerk implements Employee{&#xA;&#xA;&#x9;private int taskCount = 0;&#xA;&#x9;Printer printer;&#xA;&#x9;&#xA;&#x9;public Clerk(Printer printer){&#xA;&#x9;&#x9;this.printer = printer;&#xA;&#x9;&#x9;if(!printer.printHistory.containsKey(this)){&#xA;&#x9;&#x9;&#x9;printer.printHistory.put(this, new ArrayList&lt;String>());&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public double doCalculations(BinaryOperator&lt;Double> operation, double value1, double value2) {&#xA;&#x9;&#x9;return operation.apply(value1, value2);&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void printDocument(String document) {&#xA;&#x9;&#x9;printer.printDocument(document, this); //delegate to Printer to print a document&#xA;&#x9;&#x9;taskCount ++;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getTaskCount() {&#xA;&#x9;&#x9;return taskCount;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getResourceCount() {&#xA;&#x9;&#x9;return 1;&#xA;&#x9;}&#xA;&#x9;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457899601742" sizeMeasure="40">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.function.BinaryOperator;&#xA;&#xA;public class Clerk implements Employee{&#xA;&#xA;&#x9;private int taskCount = 0;&#xA;&#x9;Printer printer;&#xA;&#x9;&#xA;&#x9;public Clerk(Printer printer){&#xA;&#x9;&#x9;this.printer = printer;&#xA;&#x9;&#x9;if(!printer.printHistory.containsKey(this)){&#xA;&#x9;&#x9;&#x9;printer.printHistory.put(this, new ArrayList&lt;String>());&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;@Override&#xA;&#x9;public double doCalculations(BinaryOperator&lt;Double> operation, double value1, double value2) {&#xA;&#x9;&#x9;taskCount ++;&#xA;&#x9;&#x9;return operation.apply(value1, value2);&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void printDocument(String document) {&#xA;&#x9;&#x9;printer.printDocument(document, this); //delegate to Printer to print a document&#xA;&#x9;&#x9;taskCount ++;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getTaskCount() {&#xA;&#x9;&#x9;return taskCount;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getResourceCount() {&#xA;&#x9;&#x9;return 1;&#xA;&#x9;}&#xA;&#x9;&#xA;}&#xA;"/>
        </attempts>
      </proposals>
      <proposals xsi:type="junit:JunitTestProposal" question="/0/@parts.0/@tasks.2/@q" answer="/0/@parts.0/@tasks.2/@a" completion="0.8571428571428571">
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457895445049" completion="1.0" successCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457895453818" completion="1.0" successCount="2"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457899588798" completion="0.6666666666666666" successCount="2" failureCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457899602026" completion="0.75" successCount="3" failureCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457899603821" completion="0.8" successCount="4" failureCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457899606904" completion="0.8333333333333334" successCount="5" failureCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457899609719" completion="0.8571428571428571" successCount="6" failureCount="1"/>
      </proposals>
      <proposals xsi:type="jdt:JdtSourceEditProposal" question="/0/@parts.0/@tasks.3/@q" answer="/0/@parts.0/@tasks.3/@a">
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457893336986" sizeMeasure="5">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;public class Printer {&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457893922343" sizeMeasure="15">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.List;&#xA;&#xA;public class Printer {&#xA;&#xA;&#x9;List&lt;String> printHistory = new ArrayList&lt;String>();&#xA;&#x9;public void printDocument(String document, Employee employee){&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#x9;public List&lt;String> getPrintHistory(Employee employee){&#xA;&#x9;&#x9;return printHistory;&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457893943639" sizeMeasure="36">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.List;&#xA;import java.util.function.BinaryOperator;&#xA;&#xA;public class Printer implements Employee{&#xA;&#xA;&#x9;List&lt;String> printHistory = new ArrayList&lt;String>();&#xA;&#x9;public void printDocument(String document, Employee employee){&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#x9;public List&lt;String> getPrintHistory(Employee employee){&#xA;&#x9;&#x9;return printHistory;&#xA;&#x9;}&#xA;&#x9;@Override&#xA;&#x9;public double doCalculations(BinaryOperator&lt;Double> operation, double value1, double value2) {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;return 0;&#xA;&#x9;}&#xA;&#x9;@Override&#xA;&#x9;public void printDocument(String document) {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#x9;@Override&#xA;&#x9;public int getTaskCount() {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;return 0;&#xA;&#x9;}&#xA;&#x9;@Override&#xA;&#x9;public int getResourceCount() {&#xA;&#x9;&#x9;// TODO Auto-generated method stub&#xA;&#x9;&#x9;return 0;&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457894068776" sizeMeasure="15">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.List;&#xA;&#xA;public class Printer {&#xA;&#xA;&#x9;List&lt;String> printHistory = new ArrayList&lt;String>();&#xA;&#x9;public void printDocument(String document, Employee employee){&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#x9;public List&lt;String> getPrintHistory(Employee employee){&#xA;&#x9;&#x9;return printHistory;&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457894581937" sizeMeasure="16">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.List;&#xA;&#xA;public class Printer {&#xA;&#xA;&#x9;List&lt;String> printHistory = new ArrayList&lt;String>();&#xA;&#x9;public void printDocument(String document, Employee employee){&#xA;&#x9;&#x9;System.out.println(document);&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#x9;public List&lt;String> getPrintHistory(Employee employee){&#xA;&#x9;&#x9;return printHistory;&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457894841368" sizeMeasure="23">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.HashMap;&#xA;import java.util.List;&#xA;import java.util.Map;&#xA;&#xA;public class Printer {&#xA;&#xA;&#x9;private Map&lt;Employee, ArrayList&lt;String>> printHistory = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;public void printDocument(String document, Employee employee){&#xA;&#x9;&#x9;System.out.println(document);&#xA;&#x9;&#x9;if(!printHistory.containsKey(employee)){&#xA;&#x9;&#x9;&#x9;printHistory.put(employee, new ArrayList&lt;String>());&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;printHistory.get(employee).add(document);&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#x9;public List&lt;String> getPrintHistory(Employee employee){&#xA;&#x9;&#x9;return printHistory.get(employee);&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457895577763" sizeMeasure="23">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.HashMap;&#xA;import java.util.List;&#xA;import java.util.Map;&#xA;&#xA;public class Printer {&#xA;&#xA;&#x9;private Map&lt;Employee, ArrayList&lt;String>> printHistory = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;public void printDocument(String document, Employee employee){&#xA;&#x9;&#x9;System.out.println(document);&#xA;//&#x9;&#x9;if(!printHistory.containsKey(employee)){&#xA;//&#x9;&#x9;&#x9;printHistory.put(employee, new ArrayList&lt;String>());&#xA;//&#x9;&#x9;}&#xA;&#x9;&#x9;printHistory.get(employee).add(document);&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#x9;public List&lt;String> getPrintHistory(Employee employee){&#xA;&#x9;&#x9;return printHistory.get(employee);&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457895644035" sizeMeasure="23">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.HashMap;&#xA;import java.util.List;&#xA;import java.util.Map;&#xA;&#xA;public class Printer {&#xA;&#xA;&#x9;private Map&lt;Employee, ArrayList&lt;String>> printHistory = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;public void printDocument(String document, Employee employee){&#xA;&#x9;&#x9;System.out.println(document);&#xA;&#x9;&#x9;if(!printHistory.containsKey(employee)){&#xA;&#x9;&#x9;&#x9;printHistory.put(employee, new ArrayList&lt;String>());&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;printHistory.get(employee).add(document);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public List&lt;String> getPrintHistory(Employee employee){&#xA;&#x9;&#x9;return printHistory.get(employee);&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457896148546" sizeMeasure="31">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.HashMap;&#xA;import java.util.List;&#xA;import java.util.Map;&#xA;&#xA;public class Printer {&#xA;&#xA;&#x9;private Map&lt;Employee, ArrayList&lt;String>> printHistory = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;public void printDocument(String document, Employee employee){&#xA;&#x9;&#x9;System.out.println(document);&#xA;&#x9;&#x9;if(!printHistory.containsKey(employee)){&#xA;&#x9;&#x9;&#x9;printHistory.put(employee, new ArrayList&lt;String>());&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;printHistory.get(employee).add(document);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public List&lt;String> getPrintHistory(Employee employee){&#xA;&#x9;&#x9;return printHistory.get(employee);&#xA;&#x9;}&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;Printer printer = new Printer();&#xA;&#x9;&#x9;Clerk clerk1 = new Clerk(printer);&#xA;//&#x9;&#x9;Clerk clerk2 = new Clerk(printer);&#xA;&#x9;&#x9;printer.printDocument(&quot;dokument1&quot;, clerk1);&#xA;&#x9;&#x9;printer.printDocument(&quot;dokument2&quot;, clerk1);&#xA;&#x9;&#x9;System.out.println(printer.printHistory.size());&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457896162489" sizeMeasure="31">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.HashMap;&#xA;import java.util.List;&#xA;import java.util.Map;&#xA;&#xA;public class Printer {&#xA;&#xA;&#x9;private Map&lt;Employee, ArrayList&lt;String>> printHistory = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;public void printDocument(String document, Employee employee){&#xA;&#x9;&#x9;System.out.println(document);&#xA;&#x9;&#x9;if(!printHistory.containsKey(employee)){&#xA;&#x9;&#x9;&#x9;printHistory.put(employee, new ArrayList&lt;String>());&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;printHistory.get(employee).add(document);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public List&lt;String> getPrintHistory(Employee employee){&#xA;&#x9;&#x9;return printHistory.get(employee);&#xA;&#x9;}&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;Printer printer = new Printer();&#xA;&#x9;&#x9;Clerk clerk1 = new Clerk(printer);&#xA;//&#x9;&#x9;Clerk clerk2 = new Clerk(printer);&#xA;&#x9;&#x9;printer.printDocument(&quot;dokument1&quot;, clerk1);&#xA;//&#x9;&#x9;printer.printDocument(&quot;dokument2&quot;, clerk1);&#xA;&#x9;&#x9;System.out.println(printer.printHistory.size());&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457896193466" sizeMeasure="31">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.HashMap;&#xA;import java.util.List;&#xA;import java.util.Map;&#xA;&#xA;public class Printer {&#xA;&#xA;&#x9;private Map&lt;Employee, ArrayList&lt;String>> printHistory = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;public void printDocument(String document, Employee employee){&#xA;&#x9;&#x9;System.out.println(document);&#xA;//&#x9;&#x9;if(!printHistory.containsKey(employee)){&#xA;//&#x9;&#x9;&#x9;printHistory.put(employee, new ArrayList&lt;String>());&#xA;//&#x9;&#x9;}&#xA;&#x9;&#x9;printHistory.get(employee).add(document);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public List&lt;String> getPrintHistory(Employee employee){&#xA;&#x9;&#x9;return printHistory.get(employee);&#xA;&#x9;}&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;Printer printer = new Printer();&#xA;&#x9;&#x9;Clerk clerk1 = new Clerk(printer);&#xA;//&#x9;&#x9;Clerk clerk2 = new Clerk(printer);&#xA;&#x9;&#x9;printer.printDocument(&quot;dokument1&quot;, clerk1);&#xA;&#x9;&#x9;printer.printDocument(&quot;dokument2&quot;, clerk1);&#xA;&#x9;&#x9;System.out.println(printer.printHistory.size());&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457896238766" sizeMeasure="31">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.HashMap;&#xA;import java.util.List;&#xA;import java.util.Map;&#xA;&#xA;public class Printer {&#xA;&#xA;&#x9;private Map&lt;Employee, ArrayList&lt;String>> printHistory = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;public void printDocument(String document, Employee employee){&#xA;&#x9;&#x9;System.out.println(document);&#xA;&#x9;&#x9;if(!printHistory.containsKey(employee)){&#xA;&#x9;&#x9;&#x9;printHistory.put(employee, new ArrayList&lt;String>());&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;printHistory.get(employee).add(document);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public List&lt;String> getPrintHistory(Employee employee){&#xA;&#x9;&#x9;return printHistory.get(employee);&#xA;&#x9;}&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;Printer printer = new Printer();&#xA;&#x9;&#x9;Clerk clerk1 = new Clerk(printer);&#xA;//&#x9;&#x9;Clerk clerk2 = new Clerk(printer);&#xA;&#x9;&#x9;printer.printDocument(&quot;dokument1&quot;, clerk1);&#xA;&#x9;&#x9;printer.printDocument(&quot;dokument2&quot;, clerk1);&#xA;&#x9;&#x9;System.out.println(printer.printHistory.size());&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457896248970" sizeMeasure="31">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.HashMap;&#xA;import java.util.List;&#xA;import java.util.Map;&#xA;&#xA;public class Printer {&#xA;&#xA;&#x9;private Map&lt;Employee, ArrayList&lt;String>> printHistory = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;public void printDocument(String document, Employee employee){&#xA;&#x9;&#x9;System.out.println(document);&#xA;&#x9;&#x9;if(!printHistory.containsKey(employee)){&#xA;&#x9;&#x9;&#x9;printHistory.put(employee, new ArrayList&lt;String>());&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;printHistory.get(employee).add(document);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public List&lt;String> getPrintHistory(Employee employee){&#xA;&#x9;&#x9;return printHistory.get(employee);&#xA;&#x9;}&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;Printer printer = new Printer();&#xA;&#x9;&#x9;Clerk clerk1 = new Clerk(printer);&#xA;//&#x9;&#x9;Clerk clerk2 = new Clerk(printer);&#xA;&#x9;&#x9;printer.printDocument(&quot;dokument1&quot;, clerk1);&#xA;&#x9;&#x9;printer.printDocument(&quot;dokument2&quot;, clerk1);&#xA;&#x9;&#x9;System.out.println(printer.printHistory);&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457896295518" sizeMeasure="32">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.HashMap;&#xA;import java.util.List;&#xA;import java.util.Map;&#xA;&#xA;public class Printer {&#xA;&#xA;&#x9;private Map&lt;Employee, ArrayList&lt;String>> printHistory = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;public void printDocument(String document, Employee employee){&#xA;&#x9;&#x9;System.out.println(document);&#xA;&#x9;&#x9;if(!printHistory.containsKey(employee)){&#xA;&#x9;&#x9;&#x9;printHistory.put(employee, new ArrayList&lt;String>());&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;printHistory.get(employee).add(document);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public List&lt;String> getPrintHistory(Employee employee){&#xA;&#x9;&#x9;return printHistory.get(employee);&#xA;&#x9;}&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;Printer printer = new Printer();&#xA;&#x9;&#x9;Clerk clerk1 = new Clerk(printer);&#xA;//&#x9;&#x9;Clerk clerk2 = new Clerk(printer);&#xA;&#x9;&#x9;printer.printDocument(&quot;dokument1&quot;, clerk1);&#xA;&#x9;&#x9;printer.printDocument(&quot;dokument2&quot;, clerk1);&#x9;&#x9;&#xA;&#x9;&#x9;printer.printDocument(&quot;dokument3&quot;, clerk1);&#xA;&#x9;&#x9;System.out.println(printer.printHistory);&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457896309080" sizeMeasure="32">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.HashMap;&#xA;import java.util.List;&#xA;import java.util.Map;&#xA;&#xA;public class Printer {&#xA;&#xA;&#x9;private Map&lt;Employee, ArrayList&lt;String>> printHistory = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;public void printDocument(String document, Employee employee){&#xA;//&#x9;&#x9;System.out.println(document);&#xA;&#x9;&#x9;if(!printHistory.containsKey(employee)){&#xA;&#x9;&#x9;&#x9;printHistory.put(employee, new ArrayList&lt;String>());&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;printHistory.get(employee).add(document);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public List&lt;String> getPrintHistory(Employee employee){&#xA;&#x9;&#x9;return printHistory.get(employee);&#xA;&#x9;}&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;Printer printer = new Printer();&#xA;&#x9;&#x9;Clerk clerk1 = new Clerk(printer);&#xA;//&#x9;&#x9;Clerk clerk2 = new Clerk(printer);&#xA;&#x9;&#x9;printer.printDocument(&quot;dokument1&quot;, clerk1);&#xA;&#x9;&#x9;printer.printDocument(&quot;dokument2&quot;, clerk1);&#x9;&#x9;&#xA;&#x9;&#x9;printer.printDocument(&quot;dokument3&quot;, clerk1);&#xA;&#x9;&#x9;System.out.println(printer.printHistory.size());&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457896321631" sizeMeasure="32">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.HashMap;&#xA;import java.util.List;&#xA;import java.util.Map;&#xA;&#xA;public class Printer {&#xA;&#xA;&#x9;private Map&lt;Employee, ArrayList&lt;String>> printHistory = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;public void printDocument(String document, Employee employee){&#xA;//&#x9;&#x9;System.out.println(document);&#xA;&#x9;&#x9;if(!printHistory.containsKey(employee)){&#xA;&#x9;&#x9;&#x9;printHistory.put(employee, new ArrayList&lt;String>());&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;printHistory.get(employee).add(document);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public List&lt;String> getPrintHistory(Employee employee){&#xA;&#x9;&#x9;return printHistory.get(employee);&#xA;&#x9;}&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;Printer printer = new Printer();&#xA;&#x9;&#x9;Clerk clerk1 = new Clerk(printer);&#xA;//&#x9;&#x9;Clerk clerk2 = new Clerk(printer);&#xA;&#x9;&#x9;printer.printDocument(&quot;dokument1&quot;, clerk1);&#xA;&#x9;&#x9;printer.printDocument(&quot;dokument2&quot;, clerk1);&#x9;&#x9;&#xA;&#x9;&#x9;printer.printDocument(&quot;dokument3&quot;, clerk1);&#xA;&#x9;&#x9;System.out.println(printer.printHistory);&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457896392597" sizeMeasure="32">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.HashMap;&#xA;import java.util.List;&#xA;import java.util.Map;&#xA;&#xA;public class Printer {&#xA;&#xA;&#x9;private Map&lt;Employee, ArrayList&lt;String>> printHistory = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;public void printDocument(String document, Employee employee){&#xA;//&#x9;&#x9;System.out.println(document);&#xA;&#x9;&#x9;if(!printHistory.containsKey(employee)){&#xA;&#x9;&#x9;&#x9;printHistory.put(employee, new ArrayList&lt;String>());&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;printHistory.get(employee).add(document);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public List&lt;String> getPrintHistory(Employee employee){&#xA;&#x9;&#x9;return printHistory.get(employee);&#xA;&#x9;}&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;Printer printer = new Printer();&#xA;&#x9;&#x9;Clerk clerk1 = new Clerk(printer);&#xA;&#x9;&#x9;Clerk clerk2 = new Clerk(printer);&#xA;&#x9;&#x9;printer.printDocument(&quot;dokument1&quot;, clerk1);&#xA;&#x9;&#x9;printer.printDocument(&quot;dokument2&quot;, clerk1);&#x9;&#x9;&#xA;&#x9;&#x9;printer.printDocument(&quot;dokument3&quot;, clerk2);&#xA;&#x9;&#x9;System.out.println(printer.printHistory);&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457896522800" sizeMeasure="32" errorCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.HashMap;&#xA;import java.util.List;&#xA;import java.util.Map;&#xA;&#xA;public class Printer {&#xA;&#xA;&#x9;private Map&lt;Employee, ArrayList&lt;String>> printHistory = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;public void printDocument(String document, Employee employee){&#xA;//&#x9;&#x9;System.out.println(document);&#xA;&#x9;&#x9;if(!printHistory.containsKey(employee)){&#xA;&#x9;&#x9;&#x9;printHistory.put(employee, new ArrayList&lt;String>());&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;printHistory.get(employee).add(document);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public List&lt;String> getPrintHistory(Employee employee){&#xA;&#x9;&#x9;return printHistory.get(employee);&#xA;&#x9;}&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;Printer printer = new Printer();&#xA;&#x9;&#x9;Clerk clerk1 = new Clerk(printer);&#xA;&#x9;&#x9;Clerk clerk2 = new Clerk(printer);&#xA;&#x9;&#x9;printer.printDocument(&quot;dokument1&quot;, clerk1);&#xA;&#x9;&#x9;printer.printDocument(&quot;dokument2&quot;, clerk1);&#x9;&#x9;&#xA;&#x9;&#x9;printer.printDocument(&quot;dokument3&quot;, clerk2);&#xA;&#x9;&#x9;System.out.println(printer.getPrintHistory);&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457896544229" sizeMeasure="32">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.HashMap;&#xA;import java.util.List;&#xA;import java.util.Map;&#xA;&#xA;public class Printer {&#xA;&#xA;&#x9;private Map&lt;Employee, ArrayList&lt;String>> printHistory = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;public void printDocument(String document, Employee employee){&#xA;//&#x9;&#x9;System.out.println(document);&#xA;&#x9;&#x9;if(!printHistory.containsKey(employee)){&#xA;&#x9;&#x9;&#x9;printHistory.put(employee, new ArrayList&lt;String>());&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;printHistory.get(employee).add(document);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public List&lt;String> getPrintHistory(Employee employee){&#xA;&#x9;&#x9;return printHistory.get(employee);&#xA;&#x9;}&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;Printer printer = new Printer();&#xA;&#x9;&#x9;Clerk clerk1 = new Clerk(printer);&#xA;&#x9;&#x9;Clerk clerk2 = new Clerk(printer);&#xA;&#x9;&#x9;printer.printDocument(&quot;dokument1&quot;, clerk1);&#xA;&#x9;&#x9;printer.printDocument(&quot;dokument2&quot;, clerk1);&#x9;&#x9;&#xA;&#x9;&#x9;printer.printDocument(&quot;dokument3&quot;, clerk2);&#xA;&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1));&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457896549024" sizeMeasure="32">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.HashMap;&#xA;import java.util.List;&#xA;import java.util.Map;&#xA;&#xA;public class Printer {&#xA;&#xA;&#x9;private Map&lt;Employee, ArrayList&lt;String>> printHistory = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;public void printDocument(String document, Employee employee){&#xA;//&#x9;&#x9;System.out.println(document);&#xA;&#x9;&#x9;if(!printHistory.containsKey(employee)){&#xA;&#x9;&#x9;&#x9;printHistory.put(employee, new ArrayList&lt;String>());&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;printHistory.get(employee).add(document);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public List&lt;String> getPrintHistory(Employee employee){&#xA;&#x9;&#x9;return printHistory.get(employee);&#xA;&#x9;}&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;Printer printer = new Printer();&#xA;&#x9;&#x9;Clerk clerk1 = new Clerk(printer);&#xA;&#x9;&#x9;Clerk clerk2 = new Clerk(printer);&#xA;&#x9;&#x9;printer.printDocument(&quot;dokument1&quot;, clerk1);&#xA;&#x9;&#x9;printer.printDocument(&quot;dokument2&quot;, clerk1);&#x9;&#x9;&#xA;&#x9;&#x9;printer.printDocument(&quot;dokument3&quot;, clerk2);&#xA;&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk2));&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457896558285" sizeMeasure="32">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.HashMap;&#xA;import java.util.List;&#xA;import java.util.Map;&#xA;&#xA;public class Printer {&#xA;&#xA;&#x9;private Map&lt;Employee, ArrayList&lt;String>> printHistory = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;public void printDocument(String document, Employee employee){&#xA;//&#x9;&#x9;System.out.println(document);&#xA;&#x9;&#x9;if(!printHistory.containsKey(employee)){&#xA;&#x9;&#x9;&#x9;printHistory.put(employee, new ArrayList&lt;String>());&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;printHistory.get(employee).add(document);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public List&lt;String> getPrintHistory(Employee employee){&#xA;&#x9;&#x9;return printHistory.get(employee);&#xA;&#x9;}&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;Printer printer = new Printer();&#xA;&#x9;&#x9;Clerk clerk1 = new Clerk(printer);&#xA;&#x9;&#x9;Clerk clerk2 = new Clerk(printer);&#xA;&#x9;&#x9;printer.printDocument(&quot;dokument1&quot;, clerk1);&#xA;&#x9;&#x9;printer.printDocument(&quot;dokument2&quot;, clerk1);&#x9;&#x9;&#xA;&#x9;&#x9;printer.printDocument(&quot;dokument3&quot;, clerk2);&#xA;&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1).size());&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457896569024" sizeMeasure="32">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.HashMap;&#xA;import java.util.List;&#xA;import java.util.Map;&#xA;&#xA;public class Printer {&#xA;&#xA;&#x9;private Map&lt;Employee, ArrayList&lt;String>> printHistory = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;public void printDocument(String document, Employee employee){&#xA;//&#x9;&#x9;System.out.println(document);&#xA;&#x9;&#x9;if(!printHistory.containsKey(employee)){&#xA;&#x9;&#x9;&#x9;printHistory.put(employee, new ArrayList&lt;String>());&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;printHistory.get(employee).add(document);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public List&lt;String> getPrintHistory(Employee employee){&#xA;&#x9;&#x9;return printHistory.get(employee);&#xA;&#x9;}&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;Printer printer = new Printer();&#xA;&#x9;&#x9;Clerk clerk1 = new Clerk(printer);&#xA;&#x9;&#x9;Clerk clerk2 = new Clerk(printer);&#xA;&#x9;&#x9;printer.printDocument(&quot;dokument1&quot;, clerk1);&#xA;&#x9;&#x9;printer.printDocument(&quot;dokument1&quot;, clerk1);&#x9;&#x9;&#xA;&#x9;&#x9;printer.printDocument(&quot;dokument3&quot;, clerk2);&#xA;&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1).size());&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457896572866" sizeMeasure="32">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.HashMap;&#xA;import java.util.List;&#xA;import java.util.Map;&#xA;&#xA;public class Printer {&#xA;&#xA;&#x9;private Map&lt;Employee, ArrayList&lt;String>> printHistory = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;public void printDocument(String document, Employee employee){&#xA;//&#x9;&#x9;System.out.println(document);&#xA;&#x9;&#x9;if(!printHistory.containsKey(employee)){&#xA;&#x9;&#x9;&#x9;printHistory.put(employee, new ArrayList&lt;String>());&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;printHistory.get(employee).add(document);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public List&lt;String> getPrintHistory(Employee employee){&#xA;&#x9;&#x9;return printHistory.get(employee);&#xA;&#x9;}&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;Printer printer = new Printer();&#xA;&#x9;&#x9;Clerk clerk1 = new Clerk(printer);&#xA;&#x9;&#x9;Clerk clerk2 = new Clerk(printer);&#xA;&#x9;&#x9;printer.printDocument(&quot;dokument1&quot;, clerk1);&#xA;&#x9;&#x9;printer.printDocument(&quot;dokument2&quot;, clerk1);&#x9;&#x9;&#xA;&#x9;&#x9;printer.printDocument(&quot;dokument3&quot;, clerk2);&#xA;&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1).size());&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457896643350" sizeMeasure="32">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.HashMap;&#xA;import java.util.List;&#xA;import java.util.Map;&#xA;&#xA;public class Printer {&#xA;&#xA;&#x9;private Map&lt;Employee, ArrayList&lt;String>> printHistory = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;public void printDocument(String document, Employee employee){&#xA;&#x9;&#x9;System.out.println(document);&#xA;&#x9;&#x9;if(!printHistory.containsKey(employee)){&#xA;&#x9;&#x9;&#x9;printHistory.put(employee, new ArrayList&lt;String>());&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;printHistory.get(employee).add(document);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public List&lt;String> getPrintHistory(Employee employee){&#xA;&#x9;&#x9;return printHistory.get(employee);&#xA;&#x9;}&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;Printer printer = new Printer();&#xA;&#x9;&#x9;Clerk clerk1 = new Clerk(printer);&#xA;&#x9;&#x9;Clerk clerk2 = new Clerk(printer);&#xA;&#x9;&#x9;printer.printDocument(&quot;dokument1&quot;, clerk1);&#xA;&#x9;&#x9;printer.printDocument(&quot;dokument2&quot;, clerk1);&#x9;&#x9;&#xA;&#x9;&#x9;printer.printDocument(&quot;dokument3&quot;, clerk2);&#xA;&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1).size());&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457896684994" sizeMeasure="32">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.HashMap;&#xA;import java.util.List;&#xA;import java.util.Map;&#xA;&#xA;public class Printer {&#xA;&#xA;&#x9;private Map&lt;Employee, ArrayList&lt;String>> printHistory = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;public void printDocument(String document, Employee employee){&#xA;&#x9;&#x9;System.out.println(document);&#xA;&#x9;&#x9;if(!printHistory.containsKey(employee)){&#xA;&#x9;&#x9;&#x9;printHistory.put(employee, new ArrayList&lt;String>());&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;printHistory.get(employee).add(document);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public List&lt;String> getPrintHistory(Employee employee){&#xA;&#x9;&#x9;return printHistory.get(employee);&#xA;&#x9;}&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;Printer printer = new Printer();&#xA;&#x9;&#x9;Clerk clerk1 = new Clerk(printer);&#xA;&#x9;&#x9;Clerk clerk2 = new Clerk(printer);&#xA;//&#x9;&#x9;printer.printDocument(&quot;dokument1&quot;, clerk1);&#xA;//&#x9;&#x9;printer.printDocument(&quot;dokument2&quot;, clerk1);&#x9;&#x9;&#xA;&#x9;&#x9;printer.printDocument(&quot;dokument3&quot;, clerk2);&#xA;&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1).size());&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457896986897" sizeMeasure="32">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.HashMap;&#xA;import java.util.List;&#xA;import java.util.Map;&#xA;&#xA;public class Printer {&#xA;&#xA;&#x9;public Map&lt;Employee, ArrayList&lt;String>> printHistory = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;public void printDocument(String document, Employee employee){&#xA;&#x9;&#x9;System.out.println(document);&#xA;&#x9;&#x9;if(!printHistory.containsKey(employee)){&#xA;&#x9;&#x9;&#x9;printHistory.put(employee, new ArrayList&lt;String>());&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;printHistory.get(employee).add(document);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public List&lt;String> getPrintHistory(Employee employee){&#xA;&#x9;&#x9;return printHistory.get(employee);&#xA;&#x9;}&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;Printer printer = new Printer();&#xA;&#x9;&#x9;Clerk clerk1 = new Clerk(printer);&#xA;&#x9;&#x9;Clerk clerk2 = new Clerk(printer);&#xA;//&#x9;&#x9;printer.printDocument(&quot;dokument1&quot;, clerk1);&#xA;//&#x9;&#x9;printer.printDocument(&quot;dokument2&quot;, clerk1);&#x9;&#x9;&#xA;&#x9;&#x9;printer.printDocument(&quot;dokument3&quot;, clerk2);&#xA;&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1).size());&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457897069491" sizeMeasure="32" warningCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.HashMap;&#xA;import java.util.List;&#xA;import java.util.Map;&#xA;&#xA;public class Printer {&#xA;&#xA;&#x9;public Map&lt;Employee, ArrayList&lt;String>> printHistory;&#xA;&#x9;&#xA;&#x9;public void printDocument(String document, Employee employee){&#xA;&#x9;&#x9;System.out.println(document);&#xA;&#x9;&#x9;if(!printHistory.containsKey(employee)){&#xA;&#x9;&#x9;&#x9;printHistory.put(employee, new ArrayList&lt;String>());&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;printHistory.get(employee).add(document);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public List&lt;String> getPrintHistory(Employee employee){&#xA;&#x9;&#x9;return printHistory.get(employee);&#xA;&#x9;}&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;Printer printer = new Printer();&#xA;&#x9;&#x9;Clerk clerk1 = new Clerk(printer);&#xA;&#x9;&#x9;Clerk clerk2 = new Clerk(printer);&#xA;//&#x9;&#x9;printer.printDocument(&quot;dokument1&quot;, clerk1);&#xA;//&#x9;&#x9;printer.printDocument(&quot;dokument2&quot;, clerk1);&#x9;&#x9;&#xA;&#x9;&#x9;printer.printDocument(&quot;dokument3&quot;, clerk2);&#xA;&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1).size());&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457897076671" sizeMeasure="32">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;//import java.util.HashMap;&#xA;import java.util.List;&#xA;import java.util.Map;&#xA;&#xA;public class Printer {&#xA;&#xA;&#x9;public Map&lt;Employee, ArrayList&lt;String>> printHistory;&#xA;&#x9;&#xA;&#x9;public void printDocument(String document, Employee employee){&#xA;&#x9;&#x9;System.out.println(document);&#xA;&#x9;&#x9;if(!printHistory.containsKey(employee)){&#xA;&#x9;&#x9;&#x9;printHistory.put(employee, new ArrayList&lt;String>());&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;printHistory.get(employee).add(document);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public List&lt;String> getPrintHistory(Employee employee){&#xA;&#x9;&#x9;return printHistory.get(employee);&#xA;&#x9;}&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;Printer printer = new Printer();&#xA;&#x9;&#x9;Clerk clerk1 = new Clerk(printer);&#xA;&#x9;&#x9;Clerk clerk2 = new Clerk(printer);&#xA;//&#x9;&#x9;printer.printDocument(&quot;dokument1&quot;, clerk1);&#xA;//&#x9;&#x9;printer.printDocument(&quot;dokument2&quot;, clerk1);&#x9;&#x9;&#xA;&#x9;&#x9;printer.printDocument(&quot;dokument3&quot;, clerk2);&#xA;&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1).size());&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457897155649" sizeMeasure="32">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.HashMap;&#xA;import java.util.List;&#xA;import java.util.Map;&#xA;&#xA;public class Printer {&#xA;&#xA;&#x9;public Map&lt;Employee, ArrayList&lt;String>> printHistory = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;public void printDocument(String document, Employee employee){&#xA;&#x9;&#x9;System.out.println(document);&#xA;&#x9;&#x9;if(!printHistory.containsKey(employee)){&#xA;&#x9;&#x9;&#x9;printHistory.put(employee, new ArrayList&lt;String>());&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;printHistory.get(employee).add(document);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public List&lt;String> getPrintHistory(Employee employee){&#xA;&#x9;&#x9;return printHistory.get(employee);&#xA;&#x9;}&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;Printer printer = new Printer();&#xA;&#x9;&#x9;Clerk clerk1 = new Clerk(printer);&#xA;&#x9;&#x9;Clerk clerk2 = new Clerk(printer);&#xA;//&#x9;&#x9;printer.printDocument(&quot;dokument1&quot;, clerk1);&#xA;//&#x9;&#x9;printer.printDocument(&quot;dokument2&quot;, clerk1);&#x9;&#x9;&#xA;&#x9;&#x9;printer.printDocument(&quot;dokument3&quot;, clerk2);&#xA;&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1));&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457897168919" sizeMeasure="32" warningCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.HashMap;&#xA;import java.util.List;&#xA;import java.util.Map;&#xA;&#xA;public class Printer {&#xA;&#xA;&#x9;public Map&lt;Employee, ArrayList&lt;String>> printHistory = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;public void printDocument(String document, Employee employee){&#xA;&#x9;&#x9;System.out.println(document);&#xA;&#x9;&#x9;if(!printHistory.containsKey(employee)){&#xA;&#x9;&#x9;&#x9;printHistory.put(employee, new ArrayList&lt;String>());&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;printHistory.get(employee).add(document);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public List&lt;String> getPrintHistory(Employee employee){&#xA;&#x9;&#x9;return printHistory.get(employee);&#xA;&#x9;}&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;Printer printer = new Printer();&#xA;&#x9;&#x9;Clerk clerk1 = new Clerk(printer);&#xA;&#x9;&#x9;Clerk clerk2 = new Clerk(printer);&#xA;//&#x9;&#x9;printer.printDocument(&quot;dokument1&quot;, clerk1);&#xA;//&#x9;&#x9;printer.printDocument(&quot;dokument2&quot;, clerk1);&#x9;&#x9;&#xA;&#x9;&#x9;printer.printDocument(&quot;dokument3&quot;, clerk2);&#xA;&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk2));&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457897176587" sizeMeasure="32">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.HashMap;&#xA;import java.util.List;&#xA;import java.util.Map;&#xA;&#xA;public class Printer {&#xA;&#xA;&#x9;public Map&lt;Employee, ArrayList&lt;String>> printHistory = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;public void printDocument(String document, Employee employee){&#xA;&#x9;&#x9;System.out.println(document);&#xA;&#x9;&#x9;if(!printHistory.containsKey(employee)){&#xA;&#x9;&#x9;&#x9;printHistory.put(employee, new ArrayList&lt;String>());&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;printHistory.get(employee).add(document);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public List&lt;String> getPrintHistory(Employee employee){&#xA;&#x9;&#x9;return printHistory.get(employee);&#xA;&#x9;}&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;Printer printer = new Printer();&#xA;&#x9;&#x9;Clerk clerk1 = new Clerk(printer);&#xA;&#x9;&#x9;Clerk clerk2 = new Clerk(printer);&#xA;&#x9;&#x9;printer.printDocument(&quot;dokument1&quot;, clerk1);&#xA;&#x9;&#x9;printer.printDocument(&quot;dokument2&quot;, clerk1);&#x9;&#x9;&#xA;&#x9;&#x9;printer.printDocument(&quot;dokument3&quot;, clerk2);&#xA;&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1));&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457897233979" sizeMeasure="30">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.HashMap;&#xA;import java.util.List;&#xA;import java.util.Map;&#xA;&#xA;public class Printer {&#xA;&#xA;&#x9;public Map&lt;Employee, ArrayList&lt;String>> printHistory = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;public void printDocument(String document, Employee employee){&#xA;&#x9;&#x9;System.out.println(document);&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;printHistory.get(employee).add(document);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public List&lt;String> getPrintHistory(Employee employee){&#xA;&#x9;&#x9;return printHistory.get(employee);&#xA;&#x9;}&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;Printer printer = new Printer();&#xA;&#x9;&#x9;Clerk clerk1 = new Clerk(printer);&#xA;&#x9;&#x9;Clerk clerk2 = new Clerk(printer);&#xA;&#x9;&#x9;printer.printDocument(&quot;dokument1&quot;, clerk1);&#xA;&#x9;&#x9;printer.printDocument(&quot;dokument2&quot;, clerk1);&#x9;&#x9;&#xA;&#x9;&#x9;printer.printDocument(&quot;dokument3&quot;, clerk2);&#xA;&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1));&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457897246443" sizeMeasure="30">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.HashMap;&#xA;import java.util.List;&#xA;import java.util.Map;&#xA;&#xA;public class Printer {&#xA;&#xA;&#x9;public Map&lt;Employee, ArrayList&lt;String>> printHistory = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;public void printDocument(String document, Employee employee){&#xA;&#x9;&#x9;System.out.println(document);&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;printHistory.get(employee).add(document);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public List&lt;String> getPrintHistory(Employee employee){&#xA;&#x9;&#x9;return printHistory.get(employee);&#xA;&#x9;}&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;Printer printer = new Printer();&#xA;&#x9;&#x9;Clerk clerk1 = new Clerk(printer);&#xA;&#x9;&#x9;Clerk clerk2 = new Clerk(printer);&#xA;//&#x9;&#x9;printer.printDocument(&quot;dokument1&quot;, clerk1);&#xA;//&#x9;&#x9;printer.printDocument(&quot;dokument2&quot;, clerk1);&#x9;&#x9;&#xA;&#x9;&#x9;printer.printDocument(&quot;dokument3&quot;, clerk2);&#xA;&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1).size());&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457897636542" sizeMeasure="29">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.HashMap;&#xA;import java.util.List;&#xA;import java.util.Map;&#xA;&#xA;public class Printer {&#xA;&#xA;&#x9;public Map&lt;Employee, ArrayList&lt;String>> printHistory = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;public void printDocument(String document, Employee employee){&#xA;&#x9;&#x9;System.out.println(document);&#xA;&#x9;&#x9;printHistory.get(employee).add(document);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public List&lt;String> getPrintHistory(Employee employee){&#xA;&#x9;&#x9;return printHistory.get(employee);&#xA;&#x9;}&#xA;&#x9;public static void main(String[] args) {&#xA;&#x9;&#x9;Printer printer = new Printer();&#xA;&#x9;&#x9;Clerk clerk1 = new Clerk(printer);&#xA;&#x9;&#x9;Clerk clerk2 = new Clerk(printer);&#xA;//&#x9;&#x9;printer.printDocument(&quot;dokument1&quot;, clerk1);&#xA;//&#x9;&#x9;printer.printDocument(&quot;dokument2&quot;, clerk1);&#x9;&#x9;&#xA;&#x9;&#x9;printer.printDocument(&quot;dokument3&quot;, clerk2);&#xA;&#x9;&#x9;System.out.println(printer.getPrintHistory(clerk1).size());&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457897644143" sizeMeasure="20">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.HashMap;&#xA;import java.util.List;&#xA;import java.util.Map;&#xA;&#xA;public class Printer {&#xA;&#xA;&#x9;public Map&lt;Employee, ArrayList&lt;String>> printHistory = new HashMap&lt;>();&#xA;&#x9;&#xA;&#x9;public void printDocument(String document, Employee employee){&#xA;&#x9;&#x9;System.out.println(document);&#xA;&#x9;&#x9;printHistory.get(employee).add(document);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;public List&lt;String> getPrintHistory(Employee employee){&#xA;&#x9;&#x9;return printHistory.get(employee);&#xA;&#x9;}&#xA;}&#xA;"/>
        </attempts>
      </proposals>
      <proposals xsi:type="junit:JunitTestProposal" question="/0/@parts.0/@tasks.4/@q" answer="/0/@parts.0/@tasks.4/@a" completion="0.375">
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457895471753" completion="0.0" errorCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457895473000" completion="0.0" errorCount="2"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457895474083" completion="0.3333333333333333" successCount="1" errorCount="2"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457895492031" completion="0.25" successCount="1" errorCount="3"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457895550288" completion="0.2" successCount="1" errorCount="4"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457895578068" completion="0.16666666666666666" successCount="1" errorCount="5"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457897252442" completion="0.2857142857142857" successCount="2" errorCount="5"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457897256821" completion="0.375" successCount="3" errorCount="5"/>
      </proposals>
      <proposals xsi:type="jdt:JdtSourceEditProposal" question="/0/@parts.0/@tasks.5/@q" answer="/0/@parts.0/@tasks.5/@a">
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457898078903" sizeMeasure="5">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;public class Manager {&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457898262297" sizeMeasure="36">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.Collection;&#xA;import java.util.function.BinaryOperator;&#xA;&#xA;public class Manager implements Employee{&#xA;&#xA;&#x9;private int taskCount;&#xA;&#x9;public Manager(Collection&lt;Employee> employees){&#xA;&#x9;&#x9;if(employees.isEmpty()){&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;There is no employee&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;@Override&#xA;&#x9;public double doCalculations(BinaryOperator&lt;Double> operation, double value1, double value2) {&#xA;&#x9;&#x9;taskCount ++;&#xA;&#x9;&#x9;return 0;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void printDocument(String document) {&#xA;&#x9;&#x9;taskCount ++;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getTaskCount() {&#xA;&#x9;&#x9;return taskCount;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getResourceCount() {&#xA;&#x9;&#x9;return 0;&#xA;&#x9;}&#xA;&#x9;&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457898409175" sizeMeasure="40" errorCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collection;&#xA;import java.util.function.BinaryOperator;&#xA;&#xA;public class Manager implements Employee{&#xA;&#xA;&#x9;private int taskCount;&#xA;&#x9;private Collection&lt;Employee> employees = new ArrayList&lt;Employee>();&#xA;&#x9;public Manager(Collection&lt;Employee> employees){&#xA;&#x9;&#x9;if(employees.isEmpty()){&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;There is no employee&quot;);&#xA;&#x9;&#x9;} else{&#xA;&#x9;&#x9;&#x9;this.employees.addAll(employees);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;@Override&#xA;&#x9;public double doCalculations(BinaryOperator&lt;Double> operation, double value1, double value2) {&#xA;&#x9;&#x9;taskCount ++;&#xA;&#x9;&#x9;return 0;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void printDocument(String document) {&#xA;&#x9;&#x9;taskCount ++;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getTaskCount() {&#xA;&#x9;&#x9;return taskCount;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getResourceCount() {&#xA;&#x9;&#x9;return 1+;&#xA;&#x9;}&#xA;&#x9;&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457898433345" sizeMeasure="40">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collection;&#xA;import java.util.function.BinaryOperator;&#xA;&#xA;public class Manager implements Employee{&#xA;&#xA;&#x9;private int taskCount;&#xA;&#x9;private Collection&lt;Employee> employees = new ArrayList&lt;Employee>();&#xA;&#x9;public Manager(Collection&lt;Employee> employees){&#xA;&#x9;&#x9;if(employees.isEmpty()){&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;There is no employee.&quot;);&#xA;&#x9;&#x9;} else{&#xA;&#x9;&#x9;&#x9;this.employees.addAll(employees);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;@Override&#xA;&#x9;public double doCalculations(BinaryOperator&lt;Double> operation, double value1, double value2) {&#xA;&#x9;&#x9;taskCount ++;&#xA;&#x9;&#x9;return 0;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void printDocument(String document) {&#xA;&#x9;&#x9;taskCount ++;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getTaskCount() {&#xA;&#x9;&#x9;return taskCount;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getResourceCount() {&#xA;&#x9;&#x9;return 1 + employees.size();&#xA;&#x9;}&#xA;&#x9;&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457899278080" sizeMeasure="45">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collection;&#xA;import java.util.function.BinaryOperator;&#xA;&#xA;public class Manager implements Employee{&#xA;&#xA;&#x9;private int taskCount;&#xA;&#x9;private Collection&lt;Employee> employees = new ArrayList&lt;Employee>();&#xA;&#x9;private int index = 0;&#xA;&#x9;&#xA;&#x9;public Manager(Collection&lt;Employee> employees){&#xA;&#x9;&#x9;if(employees.isEmpty()){&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;There is no employee.&quot;);&#xA;&#x9;&#x9;} else{&#xA;&#x9;&#x9;&#x9;this.employees.addAll(employees);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;@Override&#xA;&#x9;public double doCalculations(BinaryOperator&lt;Double> operation, double value1, double value2) {&#xA;&#x9;&#x9;taskCount ++;&#xA;&#x9;&#x9;return 0;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void printDocument(String document) {&#xA;&#x9;&#x9;taskCount ++;&#xA;&#x9;&#x9;if(index &lt; employees.size()){&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getTaskCount() {&#xA;&#x9;&#x9;return taskCount;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getResourceCount() {&#xA;&#x9;&#x9;return 1 + employees.size();&#xA;&#x9;}&#xA;&#x9;&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457899588468" sizeMeasure="49">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collection;&#xA;import java.util.function.BinaryOperator;&#xA;&#xA;public class Manager implements Employee{&#xA;&#xA;&#x9;private int taskCount;&#xA;&#x9;private Collection&lt;Employee> employees = new ArrayList&lt;Employee>();&#xA;&#x9;private int index = 0;&#xA;&#x9;&#xA;&#x9;public Manager(Collection&lt;Employee> employees){&#xA;&#x9;&#x9;if(employees.isEmpty()){&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;There is no employee.&quot;);&#xA;&#x9;&#x9;} else{&#xA;&#x9;&#x9;&#x9;this.employees.addAll(employees);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;@Override&#xA;&#x9;public double doCalculations(BinaryOperator&lt;Double> operation, double value1, double value2) {&#xA;&#x9;&#x9;taskCount ++;&#xA;&#x9;&#x9;return 0;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void printDocument(String document) {&#xA;&#x9;&#x9;taskCount ++;&#xA;&#x9;&#x9;if(index &lt; employees.size()){&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getTaskCount() {&#xA;&#x9;&#x9;return taskCount;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getResourceCount() {&#xA;&#x9;&#x9;return 1 + employees.size();&#xA;&#x9;}&#xA;//&#x9;public static void main(String[] args) {&#xA;//&#x9;&#x9;Collection&lt;Employee>&#xA;//&#x9;&#x9;Manager manager = new Manager();&#xA;//&#x9;&#x9;&#xA;//&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457899986198" sizeMeasure="50">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collection;&#xA;import java.util.function.BinaryOperator;&#xA;&#xA;public class Manager implements Employee{&#xA;&#xA;&#x9;private int taskCount;&#xA;&#x9;private Collection&lt;Employee> employees = new ArrayList&lt;>();&#xA;&#x9;private int index = 0;&#xA;&#x9;&#xA;&#x9;public Manager(Collection&lt;Employee> employees){&#xA;&#x9;&#x9;if(employees.isEmpty()){&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;There is no employee.&quot;);&#xA;&#x9;&#x9;} else{&#xA;&#x9;&#x9;&#x9;this.employees.addAll(employees);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;@Override&#xA;&#x9;public double doCalculations(BinaryOperator&lt;Double> operation, double value1, double value2) {&#xA;&#x9;&#x9;taskCount ++;&#xA;&#x9;&#x9;return 0;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void printDocument(String document) {&#xA;&#x9;&#x9;taskCount ++;&#xA;&#x9;&#x9;if(index &lt; employees.size()){&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;index++;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getTaskCount() {&#xA;&#x9;&#x9;return taskCount;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getResourceCount() {&#xA;&#x9;&#x9;return 1 + employees.size();&#xA;&#x9;}&#xA;//&#x9;public static void main(String[] args) {&#xA;//&#x9;&#x9;Collection&lt;Employee>&#xA;//&#x9;&#x9;Manager manager = new Manager();&#xA;//&#x9;&#x9;&#xA;//&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457900115477" sizeMeasure="50" errorCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collection;&#xA;import java.util.function.BinaryOperator;&#xA;&#xA;public class Manager implements Employee{&#xA;&#xA;&#x9;private int taskCount;&#xA;&#x9;Collection&lt;Employee> employees = new ArrayList&lt;>();&#xA;&#x9;private int index = 0;&#xA;&#x9;&#xA;&#x9;public Manager(Collection&lt;Employee> employees){&#xA;&#x9;&#x9;if(employees.isEmpty()){&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;There is no employee.&quot;);&#xA;&#x9;&#x9;} else{&#xA;&#x9;&#x9;&#x9;this.employees.addAll(employees);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;@Override&#xA;&#x9;public double doCalculations(BinaryOperator&lt;Double> operation, double value1, double value2) {&#xA;&#x9;&#x9;taskCount ++;&#xA;&#x9;&#x9;return 0;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void printDocument(String document) {&#xA;&#x9;&#x9;taskCount ++;&#xA;&#x9;&#x9;if(index &lt; employees.size()){&#xA;&#x9;&#x9;&#x9;employees.get(index);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;index++;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getTaskCount() {&#xA;&#x9;&#x9;return taskCount;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getResourceCount() {&#xA;&#x9;&#x9;return 1 + employees.size();&#xA;&#x9;}&#xA;//&#x9;public static void main(String[] args) {&#xA;//&#x9;&#x9;Collection&lt;Employee>&#xA;//&#x9;&#x9;Manager manager = new Manager();&#xA;//&#x9;&#x9;&#xA;//&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457900344533" sizeMeasure="50" warningCount="2">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collection;&#xA;import java.util.Collections;&#xA;import java.util.function.BinaryOperator;&#xA;&#xA;public class Manager implements Employee{&#xA;&#xA;&#x9;private int taskCount;&#xA;&#x9;Collection&lt;Employee> employees = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;private int index = 0;&#xA;&#x9;&#xA;&#x9;public Manager(Collection&lt;Employee> employees){&#xA;&#x9;&#x9;if(employees.isEmpty()){&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;There is no employee.&quot;);&#xA;&#x9;&#x9;} else{&#xA;&#x9;&#x9;&#x9;this.employees.addAll(employees);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;@Override&#xA;&#x9;public double doCalculations(BinaryOperator&lt;Double> operation, double value1, double value2) {&#xA;&#x9;&#x9;taskCount ++;&#xA;&#x9;&#x9;return 0;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void printDocument(String document) {&#xA;&#x9;&#x9;taskCount ++;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;index++;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getTaskCount() {&#xA;&#x9;&#x9;return taskCount;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getResourceCount() {&#xA;&#x9;&#x9;return 1 + employees.size();&#xA;&#x9;}&#xA;//&#x9;public static void main(String[] args) {&#xA;//&#x9;&#x9;Collection&lt;Employee>&#xA;//&#x9;&#x9;Manager manager = new Manager();&#xA;//&#x9;&#x9;&#xA;//&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457900352012" sizeMeasure="49" warningCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collection;&#xA;import java.util.function.BinaryOperator;&#xA;&#xA;public class Manager implements Employee{&#xA;&#xA;&#x9;private int taskCount;&#xA;&#x9;Collection&lt;Employee> employees = new ArrayList&lt;>();&#xA;&#x9;&#xA;&#x9;private int index = 0;&#xA;&#x9;&#xA;&#x9;public Manager(Collection&lt;Employee> employees){&#xA;&#x9;&#x9;if(employees.isEmpty()){&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;There is no employee.&quot;);&#xA;&#x9;&#x9;} else{&#xA;&#x9;&#x9;&#x9;this.employees.addAll(employees);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;@Override&#xA;&#x9;public double doCalculations(BinaryOperator&lt;Double> operation, double value1, double value2) {&#xA;&#x9;&#x9;taskCount ++;&#xA;&#x9;&#x9;return 0;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void printDocument(String document) {&#xA;&#x9;&#x9;taskCount ++;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;index++;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getTaskCount() {&#xA;&#x9;&#x9;return taskCount;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getResourceCount() {&#xA;&#x9;&#x9;return 1 + employees.size();&#xA;&#x9;}&#xA;//&#x9;public static void main(String[] args) {&#xA;//&#x9;&#x9;Collection&lt;Employee>&#xA;//&#x9;&#x9;Manager manager = new Manager();&#xA;//&#x9;&#x9;&#xA;//&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457901132657" sizeMeasure="47" warningCount="1">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collection;&#xA;import java.util.Iterator;&#xA;import java.util.function.BinaryOperator;&#xA;&#xA;public class Manager implements Employee{&#xA;&#xA;&#x9;private int taskCount;&#xA;&#x9;Collection&lt;Employee> employees = new ArrayList&lt;Employee>();&#xA;&#x9;&#x9;&#xA;&#x9;public Manager(Collection&lt;Employee> employees){&#xA;&#x9;&#x9;if(employees.isEmpty()){&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;There is no employee.&quot;);&#xA;&#x9;&#x9;} else{&#xA;&#x9;&#x9;&#x9;this.employees.addAll(employees);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;@Override&#xA;&#x9;public double doCalculations(BinaryOperator&lt;Double> operation, double value1, double value2) {&#xA;&#x9;&#x9;taskCount ++;&#xA;&#x9;&#x9;return 0;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void printDocument(String document) {&#xA;&#x9;&#x9;taskCount ++;&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getTaskCount() {&#xA;&#x9;&#x9;return taskCount;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getResourceCount() {&#xA;&#x9;&#x9;return 1 + employees.size();&#xA;&#x9;}&#xA;//&#x9;public static void main(String[] args) {&#xA;//&#x9;&#x9;Collection&lt;Employee>&#xA;//&#x9;&#x9;Manager manager = new Manager();&#xA;//&#x9;&#x9;&#xA;//&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457901145587" sizeMeasure="46">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collection;&#xA;import java.util.function.BinaryOperator;&#xA;&#xA;public class Manager implements Employee{&#xA;&#xA;&#x9;private int taskCount;&#xA;&#x9;Collection&lt;Employee> employees = new ArrayList&lt;Employee>();&#xA;&#x9;&#x9;&#xA;&#x9;public Manager(Collection&lt;Employee> employees){&#xA;&#x9;&#x9;if(employees.isEmpty()){&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;There is no employee.&quot;);&#xA;&#x9;&#x9;} else{&#xA;&#x9;&#x9;&#x9;this.employees.addAll(employees);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;@Override&#xA;&#x9;public double doCalculations(BinaryOperator&lt;Double> operation, double value1, double value2) {&#xA;&#x9;&#x9;taskCount ++;&#xA;&#x9;&#x9;return 0;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void printDocument(String document) {&#xA;&#x9;&#x9;taskCount ++;&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getTaskCount() {&#xA;&#x9;&#x9;return taskCount;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getResourceCount() {&#xA;&#x9;&#x9;return 1 + employees.size();&#xA;&#x9;}&#xA;//&#x9;public static void main(String[] args) {&#xA;//&#x9;&#x9;Collection&lt;Employee>&#xA;//&#x9;&#x9;Manager manager = new Manager();&#xA;//&#x9;&#x9;&#xA;//&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457901418427" sizeMeasure="53">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collection;&#xA;import java.util.function.BinaryOperator;&#xA;&#xA;public class Manager implements Employee{&#xA;&#xA;&#x9;private int taskCount;&#xA;&#x9;Collection&lt;Employee> employees = new ArrayList&lt;Employee>();&#xA;&#x9;private int index = 0;&#xA;&#x9;&#x9;&#xA;&#x9;public Manager(Collection&lt;Employee> employees){&#xA;&#x9;&#x9;if(employees.isEmpty()){&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;There is no employee.&quot;);&#xA;&#x9;&#x9;} else{&#xA;&#x9;&#x9;&#x9;this.employees.addAll(employees);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;@Override&#xA;&#x9;public double doCalculations(BinaryOperator&lt;Double> operation, double value1, double value2) {&#xA;&#x9;&#x9;taskCount ++;&#xA;&#x9;&#x9;return 0;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void printDocument(String document) {&#xA;&#x9;&#x9;for(Employee employee : employees){&#xA;&#x9;&#x9;&#x9;if(index == taskCount &amp;&amp; index &lt; employees.size()){&#xA;&#x9;&#x9;&#x9;&#x9;index ++;&#xA;&#x9;&#x9;&#x9;&#x9;employee.printDocument(document);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;taskCount ++;&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getTaskCount() {&#xA;&#x9;&#x9;return taskCount;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getResourceCount() {&#xA;&#x9;&#x9;return 1 + employees.size();&#xA;&#x9;}&#xA;//&#x9;public static void main(String[] args) {&#xA;//&#x9;&#x9;Collection&lt;Employee>&#xA;//&#x9;&#x9;Manager manager = new Manager();&#xA;//&#x9;&#x9;&#xA;//&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457901493587" sizeMeasure="60">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collection;&#xA;import java.util.function.BinaryOperator;&#xA;&#xA;public class Manager implements Employee{&#xA;&#xA;&#x9;private int taskCount;&#xA;&#x9;Collection&lt;Employee> employees = new ArrayList&lt;Employee>();&#xA;&#x9;private int index = 0;&#xA;&#x9;&#x9;&#xA;&#x9;public Manager(Collection&lt;Employee> employees){&#xA;&#x9;&#x9;if(employees.isEmpty()){&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;There is no employee.&quot;);&#xA;&#x9;&#x9;} else{&#xA;&#x9;&#x9;&#x9;this.employees.addAll(employees);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;@Override&#xA;&#x9;public double doCalculations(BinaryOperator&lt;Double> operation, double value1, double value2) {&#xA;&#x9;&#x9;double calculation = 0;&#xA;&#x9;&#x9;for(Employee employee : employees){&#xA;&#x9;&#x9;&#x9;if(index == taskCount &amp;&amp; index &lt; employees.size()){&#xA;&#x9;&#x9;&#x9;&#x9;index ++;&#xA;&#x9;&#x9;&#x9;&#x9;calculation = employee.doCalculations(operation, value1, value2);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;taskCount ++;&#xA;&#x9;&#x9;return calculation;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void printDocument(String document) {&#xA;&#x9;&#x9;for(Employee employee : employees){&#xA;&#x9;&#x9;&#x9;if(index == taskCount &amp;&amp; index &lt; employees.size()){&#xA;&#x9;&#x9;&#x9;&#x9;index ++;&#xA;&#x9;&#x9;&#x9;&#x9;employee.printDocument(document);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;taskCount ++;&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getTaskCount() {&#xA;&#x9;&#x9;return taskCount;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getResourceCount() {&#xA;&#x9;&#x9;return 1 + employees.size();&#xA;&#x9;}&#xA;//&#x9;public static void main(String[] args) {&#xA;//&#x9;&#x9;Collection&lt;Employee>&#xA;//&#x9;&#x9;Manager manager = new Manager();&#xA;//&#x9;&#x9;&#xA;//&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457901536257" sizeMeasure="64">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collection;&#xA;import java.util.function.BinaryOperator;&#xA;&#xA;public class Manager implements Employee{&#xA;&#xA;&#x9;private int taskCount;&#xA;&#x9;Collection&lt;Employee> employees = new ArrayList&lt;Employee>();&#xA;&#x9;private int index = 0;&#xA;&#x9;&#x9;&#xA;&#x9;public Manager(Collection&lt;Employee> employees){&#xA;&#x9;&#x9;if(employees.isEmpty()){&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;There is no employee.&quot;);&#xA;&#x9;&#x9;} else{&#xA;&#x9;&#x9;&#x9;this.employees.addAll(employees);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;@Override&#xA;&#x9;public double doCalculations(BinaryOperator&lt;Double> operation, double value1, double value2) {&#xA;&#x9;&#x9;double calculation = 0;&#xA;&#x9;&#x9;for(Employee employee : employees){&#xA;&#x9;&#x9;&#x9;if(index == taskCount &amp;&amp; index &lt; employees.size()){&#xA;&#x9;&#x9;&#x9;&#x9;index ++;&#xA;&#x9;&#x9;&#x9;&#x9;calculation = employee.doCalculations(operation, value1, value2);&#xA;&#x9;&#x9;&#x9;} else{&#xA;&#x9;&#x9;&#x9;&#x9;index = 0;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;taskCount ++;&#xA;&#x9;&#x9;return calculation;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void printDocument(String document) {&#xA;&#x9;&#x9;for(Employee employee : employees){&#xA;&#x9;&#x9;&#x9;if(index == taskCount &amp;&amp; index &lt; employees.size()){&#xA;&#x9;&#x9;&#x9;&#x9;index ++;&#xA;&#x9;&#x9;&#x9;&#x9;employee.printDocument(document);&#xA;&#x9;&#x9;&#x9;} else{&#xA;&#x9;&#x9;&#x9;&#x9;index = 0;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;taskCount ++;&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getTaskCount() {&#xA;&#x9;&#x9;return taskCount;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getResourceCount() {&#xA;&#x9;&#x9;return 1 + employees.size();&#xA;&#x9;}&#xA;//&#x9;public static void main(String[] args) {&#xA;//&#x9;&#x9;Collection&lt;Employee>&#xA;//&#x9;&#x9;Manager manager = new Manager();&#xA;//&#x9;&#x9;&#xA;//&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457901547025" sizeMeasure="63">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collection;&#xA;import java.util.function.BinaryOperator;&#xA;&#xA;public class Manager implements Employee{&#xA;&#xA;&#x9;private int taskCount;&#xA;&#x9;Collection&lt;Employee> employees = new ArrayList&lt;Employee>();&#xA;&#x9;private int index = 0;&#xA;&#x9;&#x9;&#xA;&#x9;public Manager(Collection&lt;Employee> employees){&#xA;&#x9;&#x9;if(employees.isEmpty()){&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;There is no employee.&quot;);&#xA;&#x9;&#x9;} else{&#xA;&#x9;&#x9;&#x9;this.employees.addAll(employees);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;@Override&#xA;&#x9;public double doCalculations(BinaryOperator&lt;Double> operation, double value1, double value2) {&#xA;&#x9;&#x9;double calculation = 0;&#xA;&#x9;&#x9;for(Employee employee : employees){&#xA;&#x9;&#x9;&#x9;if(index == taskCount &amp;&amp; index &lt; employees.size()){&#xA;&#x9;&#x9;&#x9;&#x9;index ++;&#xA;&#x9;&#x9;&#x9;&#x9;calculation = employee.doCalculations(operation, value1, value2);&#xA;&#x9;&#x9;&#x9;} else{&#xA;&#x9;&#x9;&#x9;&#x9;index = 0;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;taskCount ++;&#xA;&#x9;&#x9;return calculation;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void printDocument(String document) {&#xA;&#x9;&#x9;for(Employee employee : employees){&#xA;&#x9;&#x9;&#x9;if(index == taskCount &amp;&amp; index &lt; employees.size()){&#xA;&#x9;&#x9;&#x9;&#x9;index ++;&#xA;&#x9;&#x9;&#x9;&#x9;employee.printDocument(document);&#xA;&#x9;&#x9;&#x9;} else{&#xA;&#x9;&#x9;&#x9;&#x9;index = 0;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;taskCount ++;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getTaskCount() {&#xA;&#x9;&#x9;return taskCount;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getResourceCount() {&#xA;&#x9;&#x9;return 1 + employees.size();&#xA;&#x9;}&#xA;//&#x9;public static void main(String[] args) {&#xA;//&#x9;&#x9;Collection&lt;Employee>&#xA;//&#x9;&#x9;Manager manager = new Manager();&#xA;//&#x9;&#x9;&#xA;//&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457901557672" sizeMeasure="58">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collection;&#xA;import java.util.function.BinaryOperator;&#xA;&#xA;public class Manager implements Employee{&#xA;&#xA;&#x9;private int taskCount;&#xA;&#x9;Collection&lt;Employee> employees = new ArrayList&lt;Employee>();&#xA;&#x9;private int index = 0;&#xA;&#x9;&#x9;&#xA;&#x9;public Manager(Collection&lt;Employee> employees){&#xA;&#x9;&#x9;if(employees.isEmpty()){&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;There is no employee.&quot;);&#xA;&#x9;&#x9;} else{&#xA;&#x9;&#x9;&#x9;this.employees.addAll(employees);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;@Override&#xA;&#x9;public double doCalculations(BinaryOperator&lt;Double> operation, double value1, double value2) {&#xA;&#x9;&#x9;double calculation = 0;&#xA;&#x9;&#x9;for(Employee employee : employees){&#xA;&#x9;&#x9;&#x9;if(index == taskCount &amp;&amp; index &lt; employees.size()){&#xA;&#x9;&#x9;&#x9;&#x9;index ++;&#xA;&#x9;&#x9;&#x9;&#x9;calculation = employee.doCalculations(operation, value1, value2);&#xA;&#x9;&#x9;&#x9;} else{&#xA;&#x9;&#x9;&#x9;&#x9;index = 0;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;taskCount ++;&#xA;&#x9;&#x9;return calculation;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void printDocument(String document) {&#xA;&#x9;&#x9;for(Employee employee : employees){&#xA;&#x9;&#x9;&#x9;if(index == taskCount &amp;&amp; index &lt; employees.size()){&#xA;&#x9;&#x9;&#x9;&#x9;index ++;&#xA;&#x9;&#x9;&#x9;&#x9;employee.printDocument(document);&#xA;&#x9;&#x9;&#x9;} else{&#xA;&#x9;&#x9;&#x9;&#x9;index = 0;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;taskCount ++;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getTaskCount() {&#xA;&#x9;&#x9;return taskCount;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getResourceCount() {&#xA;&#x9;&#x9;return 1 + employees.size();&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457901589896" sizeMeasure="58">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collection;&#xA;import java.util.function.BinaryOperator;&#xA;&#xA;public class Manager implements Employee{&#xA;&#xA;&#x9;private int taskCount;&#xA;&#x9;Collection&lt;Employee> employees = new ArrayList&lt;Employee>();&#xA;&#x9;private int index = 0;&#xA;&#x9;&#x9;&#xA;&#x9;public Manager(Collection&lt;Employee> employees){&#xA;&#x9;&#x9;if(employees.isEmpty()){&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;There is no employee.&quot;);&#xA;&#x9;&#x9;} else{&#xA;&#x9;&#x9;&#x9;this.employees.addAll(employees);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;@Override&#xA;&#x9;public double doCalculations(BinaryOperator&lt;Double> operation, double value1, double value2) {&#xA;&#x9;&#x9;double calculation = 0;&#xA;&#x9;&#x9;for(Employee employee : employees){&#xA;&#x9;&#x9;&#x9;if(index == taskCount &amp;&amp; index &lt; employees.size()){&#xA;&#x9;&#x9;&#x9;&#x9;index ++;&#xA;&#x9;&#x9;&#x9;&#x9;calculation = employee.doCalculations(operation, value1, value2);&#xA;&#x9;&#x9;&#x9;} else{&#xA;&#x9;&#x9;&#x9;&#x9;index = 0;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;taskCount ++;&#xA;&#x9;&#x9;return calculation;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void printDocument(String document) {&#xA;&#x9;&#x9;for(Employee employee : employees){&#xA;&#x9;&#x9;&#x9;if(index == taskCount &amp;&amp; index &lt; employees.size()){&#xA;&#x9;&#x9;&#x9;&#x9;index ++;&#xA;&#x9;&#x9;&#x9;&#x9;employee.printDocument(document);&#xA;&#x9;&#x9;&#x9;} else{&#xA;&#x9;&#x9;&#x9;&#x9;index = 0;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;taskCount ++;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getTaskCount() {&#xA;&#x9;&#x9;return taskCount;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getResourceCount() {&#xA;&#x9;&#x9;return 1 + employees.size() + this.getResourceCount();&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457901627414" sizeMeasure="58">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collection;&#xA;import java.util.function.BinaryOperator;&#xA;&#xA;public class Manager implements Employee{&#xA;&#xA;&#x9;private int taskCount;&#xA;&#x9;Collection&lt;Employee> employees = new ArrayList&lt;Employee>();&#xA;&#x9;private int index = 0;&#xA;&#x9;&#x9;&#xA;&#x9;public Manager(Collection&lt;Employee> employees){&#xA;&#x9;&#x9;if(employees.isEmpty()){&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;There is no employee.&quot;);&#xA;&#x9;&#x9;} else{&#xA;&#x9;&#x9;&#x9;this.employees.addAll(employees);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;@Override&#xA;&#x9;public double doCalculations(BinaryOperator&lt;Double> operation, double value1, double value2) {&#xA;&#x9;&#x9;double calculation = 0;&#xA;&#x9;&#x9;for(Employee employee : employees){&#xA;&#x9;&#x9;&#x9;if(index == taskCount &amp;&amp; index &lt; employees.size()){&#xA;&#x9;&#x9;&#x9;&#x9;index ++;&#xA;&#x9;&#x9;&#x9;&#x9;calculation = employee.doCalculations(operation, value1, value2);&#xA;&#x9;&#x9;&#x9;} else{&#xA;&#x9;&#x9;&#x9;&#x9;index = 0;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;taskCount ++;&#xA;&#x9;&#x9;return calculation;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void printDocument(String document) {&#xA;&#x9;&#x9;for(Employee employee : employees){&#xA;&#x9;&#x9;&#x9;if(index == taskCount &amp;&amp; index &lt; employees.size()){&#xA;&#x9;&#x9;&#x9;&#x9;index ++;&#xA;&#x9;&#x9;&#x9;&#x9;employee.printDocument(document);&#xA;&#x9;&#x9;&#x9;} else{&#xA;&#x9;&#x9;&#x9;&#x9;index = 0;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;taskCount ++;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getTaskCount() {&#xA;&#x9;&#x9;return taskCount;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getResourceCount() {&#xA;&#x9;&#x9;return this.getResourceCount() + employees.size();&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457901639876" sizeMeasure="58">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collection;&#xA;import java.util.function.BinaryOperator;&#xA;&#xA;public class Manager implements Employee{&#xA;&#xA;&#x9;private int taskCount;&#xA;&#x9;Collection&lt;Employee> employees = new ArrayList&lt;Employee>();&#xA;&#x9;private int index = 0;&#xA;&#x9;&#x9;&#xA;&#x9;public Manager(Collection&lt;Employee> employees){&#xA;&#x9;&#x9;if(employees.isEmpty()){&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;There is no employee.&quot;);&#xA;&#x9;&#x9;} else{&#xA;&#x9;&#x9;&#x9;this.employees.addAll(employees);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;@Override&#xA;&#x9;public double doCalculations(BinaryOperator&lt;Double> operation, double value1, double value2) {&#xA;&#x9;&#x9;double calculation = 0;&#xA;&#x9;&#x9;for(Employee employee : employees){&#xA;&#x9;&#x9;&#x9;if(index == taskCount &amp;&amp; index &lt; employees.size()){&#xA;&#x9;&#x9;&#x9;&#x9;index ++;&#xA;&#x9;&#x9;&#x9;&#x9;calculation = employee.doCalculations(operation, value1, value2);&#xA;&#x9;&#x9;&#x9;} else{&#xA;&#x9;&#x9;&#x9;&#x9;index = 0;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;taskCount ++;&#xA;&#x9;&#x9;return calculation;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void printDocument(String document) {&#xA;&#x9;&#x9;for(Employee employee : employees){&#xA;&#x9;&#x9;&#x9;if(index == taskCount &amp;&amp; index &lt; employees.size()){&#xA;&#x9;&#x9;&#x9;&#x9;index ++;&#xA;&#x9;&#x9;&#x9;&#x9;employee.printDocument(document);&#xA;&#x9;&#x9;&#x9;} else{&#xA;&#x9;&#x9;&#x9;&#x9;index = 0;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;taskCount ++;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getTaskCount() {&#xA;&#x9;&#x9;return taskCount;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getResourceCount() {&#xA;&#x9;&#x9;return 1 + employees.size();&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457901894732" sizeMeasure="58">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collection;&#xA;import java.util.function.BinaryOperator;&#xA;&#xA;public class Manager implements Employee{&#xA;&#xA;&#x9;private int taskCount;&#xA;&#x9;Collection&lt;Employee> employees = new ArrayList&lt;Employee>();&#xA;&#x9;private int index = 0;&#xA;&#x9;&#x9;&#xA;&#x9;public Manager(Collection&lt;Employee> employees){&#xA;&#x9;&#x9;if(employees.isEmpty()){&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;There is no employee.&quot;);&#xA;&#x9;&#x9;} else{&#xA;&#x9;&#x9;&#x9;this.employees.addAll(employees);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;@Override&#xA;&#x9;public double doCalculations(BinaryOperator&lt;Double> operation, double value1, double value2) {&#xA;&#x9;&#x9;double calculation = 0;&#xA;&#x9;&#x9;for(Employee employee : employees){&#xA;&#x9;&#x9;&#x9;if(index == taskCount){&#xA;&#x9;&#x9;&#x9;&#x9;index ++;&#xA;&#x9;&#x9;&#x9;&#x9;calculation = employee.doCalculations(operation, value1, value2);&#xA;&#x9;&#x9;&#x9;} else{&#xA;&#x9;&#x9;&#x9;&#x9;index = 0;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;taskCount ++;&#xA;&#x9;&#x9;return calculation;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void printDocument(String document) {&#xA;&#x9;&#x9;for(Employee employee : employees){&#xA;&#x9;&#x9;&#x9;if(index == taskCount){&#xA;&#x9;&#x9;&#x9;&#x9;index ++;&#xA;&#x9;&#x9;&#x9;&#x9;employee.printDocument(document);&#xA;&#x9;&#x9;&#x9;} else{&#xA;&#x9;&#x9;&#x9;&#x9;index = 0;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;taskCount ++;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getTaskCount() {&#xA;&#x9;&#x9;return taskCount;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getResourceCount() {&#xA;&#x9;&#x9;return 1 + employees.size();&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
        <attempts xsi:type="jdt:JdtSourceEditEvent" timestamp="1457902683239" sizeMeasure="58">
          <edit xsi:type="exercise:StringEdit" storedString="package delegation.office;&#xA;&#xA;import java.util.ArrayList;&#xA;import java.util.Collection;&#xA;import java.util.function.BinaryOperator;&#xA;&#xA;public class Manager implements Employee{&#xA;&#xA;&#x9;private int taskCount;&#xA;&#x9;Collection&lt;Employee> employees = new ArrayList&lt;Employee>();&#xA;&#x9;private int index = 0;&#xA;&#x9;&#x9;&#xA;&#x9;public Manager(Collection&lt;Employee> employees){&#xA;&#x9;&#x9;if(employees.isEmpty()){&#xA;&#x9;&#x9;&#x9;throw new IllegalArgumentException(&quot;There is no employee.&quot;);&#xA;&#x9;&#x9;} else{&#xA;&#x9;&#x9;&#x9;this.employees.addAll(employees);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;@Override&#xA;&#x9;public double doCalculations(BinaryOperator&lt;Double> operation, double value1, double value2) {&#xA;&#x9;&#x9;double calculation = 0;&#xA;&#x9;&#x9;for(Employee employee : employees){&#xA;&#x9;&#x9;&#x9;if(index == taskCount){&#xA;&#x9;&#x9;&#x9;&#x9;index ++;&#xA;&#x9;&#x9;&#x9;&#x9;calculation = employee.doCalculations(operation, value1, value2);&#xA;&#x9;&#x9;&#x9;} else{&#xA;&#x9;&#x9;&#x9;&#x9;index = 0;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;taskCount ++;&#xA;&#x9;&#x9;return calculation;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public void printDocument(String document) {&#xA;&#x9;&#x9;for(Employee employee : employees){&#xA;&#x9;&#x9;&#x9;if(index == taskCount){&#xA;&#x9;&#x9;&#x9;&#x9;index ++;&#xA;&#x9;&#x9;&#x9;&#x9;employee.printDocument(document);&#xA;&#x9;&#x9;&#x9;} else{&#xA;&#x9;&#x9;&#x9;&#x9;index = 0;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;taskCount ++;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getTaskCount() {&#xA;&#x9;&#x9;return taskCount;&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public int getResourceCount() {&#xA;&#x9;&#x9;return taskCount + employees.size();&#xA;&#x9;}&#xA;&#xA;}&#xA;"/>
        </attempts>
      </proposals>
      <proposals xsi:type="junit:JunitTestProposal" question="/0/@parts.0/@tasks.6/@q" answer="/0/@parts.0/@tasks.6/@a" completion="0.47058823529411764">
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457898304987" completion="1.0" successCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457901557953" completion="1.0" successCount="2"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457901559632" completion="1.0" successCount="3"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457901563180" completion="0.75" successCount="3" failureCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457901590155" completion="0.6" successCount="3" failureCount="1" errorCount="1"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457901627740" completion="0.5" successCount="3" failureCount="1" errorCount="2"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457901640169" completion="0.5714285714285714" successCount="4" failureCount="1" errorCount="2"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457901641556" completion="0.625" successCount="5" failureCount="1" errorCount="2"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457901644344" completion="0.6666666666666666" successCount="6" failureCount="1" errorCount="2"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457901648331" completion="0.7" successCount="7" failureCount="1" errorCount="2"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457901651568" completion="0.6363636363636364" successCount="7" failureCount="2" errorCount="2"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457901712407" completion="0.5833333333333334" successCount="7" failureCount="3" errorCount="2"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457901895008" completion="0.6153846153846154" successCount="8" failureCount="3" errorCount="2"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457901898250" completion="0.5714285714285714" successCount="8" failureCount="4" errorCount="2"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457901928173" completion="0.5333333333333333" successCount="8" failureCount="5" errorCount="2"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457901962680" completion="0.5" successCount="8" failureCount="6" errorCount="2"/>
        <attempts xsi:type="junit:JunitTestEvent" timestamp="1457902683543" completion="0.47058823529411764" successCount="8" failureCount="7" errorCount="2"/>
      </proposals>
    </proposals>
    <proposals exercisePart="/0/@parts.1">
      <proposals xsi:type="workbench:DebugEventProposal" question="/0/@parts.1/@tasks.0/@q" answer="/0/@parts.1/@tasks.0/@a"/>
      <proposals xsi:type="workbench:CommandExecutionProposal" question="/0/@parts.1/@tasks.1/@q" answer="/0/@parts.1/@tasks.1/@a"/>
      <proposals xsi:type="workbench:CommandExecutionProposal" question="/0/@parts.1/@tasks.2/@q" answer="/0/@parts.1/@tasks.2/@a"/>
      <proposals xsi:type="workbench:PartTaskProposal" question="/0/@parts.1/@tasks.3/@q" answer="/0/@parts.1/@tasks.3/@a"/>
      <proposals xsi:type="jdt:JdtLaunchProposal" question="/0/@parts.1/@tasks.4/@q" answer="/0/@parts.1/@tasks.4/@a">
        <attempts xsi:type="jdt:JdtLaunchEvent" timestamp="1457896148500" mode="run"/>
        <attempts xsi:type="jdt:JdtLaunchEvent" timestamp="1457896162449" mode="run"/>
        <attempts xsi:type="jdt:JdtLaunchEvent" timestamp="1457896193424" mode="run"/>
        <attempts xsi:type="jdt:JdtLaunchEvent" timestamp="1457896238726" mode="run"/>
        <attempts xsi:type="jdt:JdtLaunchEvent" timestamp="1457896248932" mode="run"/>
        <attempts xsi:type="jdt:JdtLaunchEvent" timestamp="1457896295477" mode="run"/>
        <attempts xsi:type="jdt:JdtLaunchEvent" timestamp="1457896309032" mode="run"/>
        <attempts xsi:type="jdt:JdtLaunchEvent" timestamp="1457896321589" mode="run"/>
        <attempts xsi:type="jdt:JdtLaunchEvent" timestamp="1457896392554" mode="run"/>
        <attempts xsi:type="jdt:JdtLaunchEvent" timestamp="1457896522762" mode="run"/>
        <attempts xsi:type="jdt:JdtLaunchEvent" timestamp="1457896544188" mode="run"/>
        <attempts xsi:type="jdt:JdtLaunchEvent" timestamp="1457896548986" mode="run"/>
        <attempts xsi:type="jdt:JdtLaunchEvent" timestamp="1457896558245" mode="run"/>
        <attempts xsi:type="jdt:JdtLaunchEvent" timestamp="1457896568986" mode="run"/>
        <attempts xsi:type="jdt:JdtLaunchEvent" timestamp="1457896684953" mode="run"/>
        <attempts xsi:type="jdt:JdtLaunchEvent" timestamp="1457896898327" mode="run"/>
        <attempts xsi:type="jdt:JdtLaunchEvent" timestamp="1457896932787" mode="run"/>
        <attempts xsi:type="jdt:JdtLaunchEvent" timestamp="1457897048083" mode="run"/>
        <attempts xsi:type="jdt:JdtLaunchEvent" timestamp="1457897077858" mode="run"/>
        <attempts xsi:type="jdt:JdtLaunchEvent" timestamp="1457897155610" mode="run"/>
        <attempts xsi:type="jdt:JdtLaunchEvent" timestamp="1457897168882" mode="run"/>
        <attempts xsi:type="jdt:JdtLaunchEvent" timestamp="1457897235566" mode="run"/>
        <attempts xsi:type="jdt:JdtLaunchEvent" timestamp="1457897246405" mode="run"/>
      </proposals>
      <proposals xsi:type="jdt:JdtLaunchProposal" question="/0/@parts.1/@tasks.5/@q" answer="/0/@parts.1/@tasks.5/@a"/>
      <proposals xsi:type="jdt:JdtLaunchProposal" question="/0/@parts.1/@tasks.6/@q" answer="/0/@parts.1/@tasks.6/@a"/>
    </proposals>
  </exercise:ExerciseProposals>
</xmi:XMI>
