/*
 * generated by Xtext 2.10.0
 */
package no.hal.learning.exercise.xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class XerciseGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ExerciseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.hal.learning.exercise.xtext.Xercise.Exercise");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExerciseAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cExerciseKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Assignment cNameAssignment_2_0_0 = (Assignment)cGroup_2_0.eContents().get(0);
		private final RuleCall cNameQNameParserRuleCall_2_0_0_0 = (RuleCall)cNameAssignment_2_0_0.eContents().get(0);
		private final Assignment cTitleAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cTitleSTRINGTerminalRuleCall_2_0_1_0 = (RuleCall)cTitleAssignment_2_0_1.eContents().get(0);
		private final Assignment cPartsAssignment_2_0_2 = (Assignment)cGroup_2_0.eContents().get(2);
		private final RuleCall cPartsAbstractExercisePartParserRuleCall_2_0_2_0 = (RuleCall)cPartsAssignment_2_0_2.eContents().get(0);
		private final Assignment cPartsAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cPartsAnonymousExercisePartParserRuleCall_2_1_0 = (RuleCall)cPartsAssignment_2_1.eContents().get(0);
		
		//Exercise:
		//	{Exercise} 'exercise' (name=QName? title=STRING?
		//	parts+=AbstractExercisePart*
		//	| parts+=AnonymousExercisePart);
		@Override public ParserRule getRule() { return rule; }
		
		//{Exercise} 'exercise' (name=QName? title=STRING? parts+=AbstractExercisePart* | parts+=AnonymousExercisePart)
		public Group getGroup() { return cGroup; }
		
		//{Exercise}
		public Action getExerciseAction_0() { return cExerciseAction_0; }
		
		//'exercise'
		public Keyword getExerciseKeyword_1() { return cExerciseKeyword_1; }
		
		//(name=QName? title=STRING? parts+=AbstractExercisePart* | parts+=AnonymousExercisePart)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//name=QName? title=STRING? parts+=AbstractExercisePart*
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//name=QName?
		public Assignment getNameAssignment_2_0_0() { return cNameAssignment_2_0_0; }
		
		//QName
		public RuleCall getNameQNameParserRuleCall_2_0_0_0() { return cNameQNameParserRuleCall_2_0_0_0; }
		
		//title=STRING?
		public Assignment getTitleAssignment_2_0_1() { return cTitleAssignment_2_0_1; }
		
		//STRING
		public RuleCall getTitleSTRINGTerminalRuleCall_2_0_1_0() { return cTitleSTRINGTerminalRuleCall_2_0_1_0; }
		
		//parts+=AbstractExercisePart*
		public Assignment getPartsAssignment_2_0_2() { return cPartsAssignment_2_0_2; }
		
		//AbstractExercisePart
		public RuleCall getPartsAbstractExercisePartParserRuleCall_2_0_2_0() { return cPartsAbstractExercisePartParserRuleCall_2_0_2_0; }
		
		//parts+=AnonymousExercisePart
		public Assignment getPartsAssignment_2_1() { return cPartsAssignment_2_1; }
		
		//AnonymousExercisePart
		public RuleCall getPartsAnonymousExercisePartParserRuleCall_2_1_0() { return cPartsAnonymousExercisePartParserRuleCall_2_1_0; }
	}
	public class QNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.hal.learning.exercise.xtext.Xercise.QName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QName:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class AbstractExercisePartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.hal.learning.exercise.xtext.Xercise.AbstractExercisePart");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExercisePartParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExercisePartRefParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AbstractExercisePart:
		//	ExercisePart | ExercisePartRef;
		@Override public ParserRule getRule() { return rule; }
		
		//ExercisePart | ExercisePartRef
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ExercisePart
		public RuleCall getExercisePartParserRuleCall_0() { return cExercisePartParserRuleCall_0; }
		
		//ExercisePartRef
		public RuleCall getExercisePartRefParserRuleCall_1() { return cExercisePartRefParserRuleCall_1; }
	}
	public class ExercisePartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.hal.learning.exercise.xtext.Xercise.ExercisePart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPartKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cTitleAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTitleSTRINGTerminalRuleCall_2_0 = (RuleCall)cTitleAssignment_2.eContents().get(0);
		private final Assignment cTasksAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTasksAbstractTaskParserRuleCall_3_0 = (RuleCall)cTasksAssignment_3.eContents().get(0);
		
		//ExercisePart:
		//	'part' name=ID title=STRING tasks+=AbstractTask*;
		@Override public ParserRule getRule() { return rule; }
		
		//'part' name=ID title=STRING tasks+=AbstractTask*
		public Group getGroup() { return cGroup; }
		
		//'part'
		public Keyword getPartKeyword_0() { return cPartKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//title=STRING
		public Assignment getTitleAssignment_2() { return cTitleAssignment_2; }
		
		//STRING
		public RuleCall getTitleSTRINGTerminalRuleCall_2_0() { return cTitleSTRINGTerminalRuleCall_2_0; }
		
		//tasks+=AbstractTask*
		public Assignment getTasksAssignment_3() { return cTasksAssignment_3; }
		
		//AbstractTask
		public RuleCall getTasksAbstractTaskParserRuleCall_3_0() { return cTasksAbstractTaskParserRuleCall_3_0; }
	}
	public class ExercisePartRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.hal.learning.exercise.xtext.Xercise.ExercisePartRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPartKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cRefKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPartRefAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cPartRefExercisePartCrossReference_2_0 = (CrossReference)cPartRefAssignment_2.eContents().get(0);
		private final RuleCall cPartRefExercisePartQNameParserRuleCall_2_0_1 = (RuleCall)cPartRefExercisePartCrossReference_2_0.eContents().get(1);
		
		//ExercisePartRef:
		//	'part' 'ref' partRef=[ExercisePart|QName];
		@Override public ParserRule getRule() { return rule; }
		
		//'part' 'ref' partRef=[ExercisePart|QName]
		public Group getGroup() { return cGroup; }
		
		//'part'
		public Keyword getPartKeyword_0() { return cPartKeyword_0; }
		
		//'ref'
		public Keyword getRefKeyword_1() { return cRefKeyword_1; }
		
		//partRef=[ExercisePart|QName]
		public Assignment getPartRefAssignment_2() { return cPartRefAssignment_2; }
		
		//[ExercisePart|QName]
		public CrossReference getPartRefExercisePartCrossReference_2_0() { return cPartRefExercisePartCrossReference_2_0; }
		
		//QName
		public RuleCall getPartRefExercisePartQNameParserRuleCall_2_0_1() { return cPartRefExercisePartQNameParserRuleCall_2_0_1; }
	}
	public class AnonymousExercisePartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.hal.learning.exercise.xtext.Xercise.AnonymousExercisePart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExercisePartAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTasksAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTasksAbstractTaskParserRuleCall_1_0 = (RuleCall)cTasksAssignment_1.eContents().get(0);
		
		//AnonymousExercisePart ExercisePart:
		//	{ExercisePart} tasks+=AbstractTask*
		@Override public ParserRule getRule() { return rule; }
		
		//{ExercisePart} tasks+=AbstractTask*
		public Group getGroup() { return cGroup; }
		
		//{ExercisePart}
		public Action getExercisePartAction_0() { return cExercisePartAction_0; }
		
		//tasks+=AbstractTask*
		public Assignment getTasksAssignment_1() { return cTasksAssignment_1; }
		
		//AbstractTask
		public RuleCall getTasksAbstractTaskParserRuleCall_1_0() { return cTasksAbstractTaskParserRuleCall_1_0; }
	}
	public class AbstractTaskElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.hal.learning.exercise.xtext.Xercise.AbstractTask");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTaskParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTaskRefParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AbstractTask:
		//	Task | TaskRef;
		@Override public ParserRule getRule() { return rule; }
		
		//Task | TaskRef
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Task
		public RuleCall getTaskParserRuleCall_0() { return cTaskParserRuleCall_0; }
		
		//TaskRef
		public RuleCall getTaskRefParserRuleCall_1() { return cTaskRefParserRuleCall_1; }
	}
	public class TaskRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.hal.learning.exercise.xtext.Xercise.TaskRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTaskRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTaskRefTaskCrossReference_1_0 = (CrossReference)cTaskRefAssignment_1.eContents().get(0);
		private final RuleCall cTaskRefTaskQNameParserRuleCall_1_0_1 = (RuleCall)cTaskRefTaskCrossReference_1_0.eContents().get(1);
		
		//TaskRef:
		//	'ref' taskRef=[Task|QName];
		@Override public ParserRule getRule() { return rule; }
		
		//'ref' taskRef=[Task|QName]
		public Group getGroup() { return cGroup; }
		
		//'ref'
		public Keyword getRefKeyword_0() { return cRefKeyword_0; }
		
		//taskRef=[Task|QName]
		public Assignment getTaskRefAssignment_1() { return cTaskRefAssignment_1; }
		
		//[Task|QName]
		public CrossReference getTaskRefTaskCrossReference_1_0() { return cTaskRefTaskCrossReference_1_0; }
		
		//QName
		public RuleCall getTaskRefTaskQNameParserRuleCall_1_0_1() { return cTaskRefTaskQNameParserRuleCall_1_0_1; }
	}
	public class TaskElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.hal.learning.exercise.xtext.Xercise.Task");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cQAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cQQuestionParserRuleCall_1_0 = (RuleCall)cQAssignment_1.eContents().get(0);
		private final Assignment cAAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAAnswerParserRuleCall_2_0 = (RuleCall)cAAssignment_2.eContents().get(0);
		
		//Task:
		//	name=ID?
		//	q=Question
		//	a=Answer;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID? q=Question a=Answer
		public Group getGroup() { return cGroup; }
		
		//name=ID?
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//q=Question
		public Assignment getQAssignment_1() { return cQAssignment_1; }
		
		//Question
		public RuleCall getQQuestionParserRuleCall_1_0() { return cQQuestionParserRuleCall_1_0; }
		
		//a=Answer
		public Assignment getAAssignment_2() { return cAAssignment_2; }
		
		//Answer
		public RuleCall getAAnswerParserRuleCall_2_0() { return cAAnswerParserRuleCall_2_0; }
	}
	public class QuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.hal.learning.exercise.xtext.Xercise.Question");
		private final RuleCall cStringQuestionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Question:
		//	StringQuestion;
		@Override public ParserRule getRule() { return rule; }
		
		//StringQuestion
		public RuleCall getStringQuestionParserRuleCall() { return cStringQuestionParserRuleCall; }
	}
	public class StringQuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.hal.learning.exercise.xtext.Xercise.StringQuestion");
		private final Assignment cQuestionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cQuestionSTRINGTerminalRuleCall_0 = (RuleCall)cQuestionAssignment.eContents().get(0);
		
		//StringQuestion:
		//	question=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//question=STRING
		public Assignment getQuestionAssignment() { return cQuestionAssignment; }
		
		//STRING
		public RuleCall getQuestionSTRINGTerminalRuleCall_0() { return cQuestionSTRINGTerminalRuleCall_0; }
	}
	public class AnswerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.hal.learning.exercise.xtext.Xercise.Answer");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOptionAnswerParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOptionsAnswerParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTaskAnswerParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Answer:
		//	OptionAnswer | OptionsAnswer | TaskAnswer;
		@Override public ParserRule getRule() { return rule; }
		
		//OptionAnswer | OptionsAnswer | TaskAnswer
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//OptionAnswer
		public RuleCall getOptionAnswerParserRuleCall_0() { return cOptionAnswerParserRuleCall_0; }
		
		//OptionsAnswer
		public RuleCall getOptionsAnswerParserRuleCall_1() { return cOptionsAnswerParserRuleCall_1; }
		
		//TaskAnswer
		public RuleCall getTaskAnswerParserRuleCall_2() { return cTaskAnswerParserRuleCall_2; }
	}
	public class OptionAnswerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.hal.learning.exercise.xtext.Xercise.OptionAnswer");
		private final RuleCall cSimpleAnswerParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//// quiz
		//OptionAnswer quiz::OptionAnswer:
		//	SimpleAnswer
		@Override public ParserRule getRule() { return rule; }
		
		//SimpleAnswer
		public RuleCall getSimpleAnswerParserRuleCall() { return cSimpleAnswerParserRuleCall; }
	}
	public class SimpleAnswerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.hal.learning.exercise.xtext.Xercise.SimpleAnswer");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStringAnswerParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRegexAnswerParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNumberAnswerParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cBooleanAnswerParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//SimpleAnswer quiz::SimpleAnswer:
		//	StringAnswer | RegexAnswer | NumberAnswer | BooleanAnswer
		@Override public ParserRule getRule() { return rule; }
		
		//StringAnswer | RegexAnswer | NumberAnswer | BooleanAnswer
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//StringAnswer
		public RuleCall getStringAnswerParserRuleCall_0() { return cStringAnswerParserRuleCall_0; }
		
		//RegexAnswer
		public RuleCall getRegexAnswerParserRuleCall_1() { return cRegexAnswerParserRuleCall_1; }
		
		//NumberAnswer
		public RuleCall getNumberAnswerParserRuleCall_2() { return cNumberAnswerParserRuleCall_2; }
		
		//BooleanAnswer
		public RuleCall getBooleanAnswerParserRuleCall_3() { return cBooleanAnswerParserRuleCall_3; }
	}
	public class StringAnswerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.hal.learning.exercise.xtext.Xercise.StringAnswer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueSTRINGTerminalRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Assignment cIgnoreCaseAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cIgnoreCaseTildeKeyword_1_0 = (Keyword)cIgnoreCaseAssignment_1.eContents().get(0);
		
		//StringAnswer quiz::StringAnswer:
		//	value=STRING ignoreCase?='~'?
		@Override public ParserRule getRule() { return rule; }
		
		//value=STRING ignoreCase?='~'?
		public Group getGroup() { return cGroup; }
		
		//value=STRING
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0_0() { return cValueSTRINGTerminalRuleCall_0_0; }
		
		//ignoreCase?='~'?
		public Assignment getIgnoreCaseAssignment_1() { return cIgnoreCaseAssignment_1; }
		
		//'~'
		public Keyword getIgnoreCaseTildeKeyword_1_0() { return cIgnoreCaseTildeKeyword_1_0; }
	}
	public class RegexAnswerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.hal.learning.exercise.xtext.Xercise.RegexAnswer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRegexpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cRegexpSolidusKeyword_0_0 = (Keyword)cRegexpAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Keyword cSolidusKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIgnoreCaseAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cIgnoreCaseTildeKeyword_3_0 = (Keyword)cIgnoreCaseAssignment_3.eContents().get(0);
		
		//RegexAnswer quiz::StringAnswer:
		//	regexp?='/' value=STRING '/' ignoreCase?='~'?
		@Override public ParserRule getRule() { return rule; }
		
		//regexp?='/' value=STRING '/' ignoreCase?='~'?
		public Group getGroup() { return cGroup; }
		
		//regexp?='/'
		public Assignment getRegexpAssignment_0() { return cRegexpAssignment_0; }
		
		//'/'
		public Keyword getRegexpSolidusKeyword_0_0() { return cRegexpSolidusKeyword_0_0; }
		
		//value=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }
		
		//'/'
		public Keyword getSolidusKeyword_2() { return cSolidusKeyword_2; }
		
		//ignoreCase?='~'?
		public Assignment getIgnoreCaseAssignment_3() { return cIgnoreCaseAssignment_3; }
		
		//'~'
		public Keyword getIgnoreCaseTildeKeyword_3_0() { return cIgnoreCaseTildeKeyword_3_0; }
	}
	public class NumberAnswerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.hal.learning.exercise.xtext.Xercise.NumberAnswer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueEDoubleObjectParserRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cPlusSignHyphenMinusKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cErrorMarginAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cErrorMarginEDoubleObjectParserRuleCall_1_1_0 = (RuleCall)cErrorMarginAssignment_1_1.eContents().get(0);
		
		//NumberAnswer quiz::NumberAnswer:
		//	value=EDoubleObject ('+-' errorMargin=EDoubleObject)?
		@Override public ParserRule getRule() { return rule; }
		
		//value=EDoubleObject ('+-' errorMargin=EDoubleObject)?
		public Group getGroup() { return cGroup; }
		
		//value=EDoubleObject
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//EDoubleObject
		public RuleCall getValueEDoubleObjectParserRuleCall_0_0() { return cValueEDoubleObjectParserRuleCall_0_0; }
		
		//('+-' errorMargin=EDoubleObject)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'+-'
		public Keyword getPlusSignHyphenMinusKeyword_1_0() { return cPlusSignHyphenMinusKeyword_1_0; }
		
		//errorMargin=EDoubleObject
		public Assignment getErrorMarginAssignment_1_1() { return cErrorMarginAssignment_1_1; }
		
		//EDoubleObject
		public RuleCall getErrorMarginEDoubleObjectParserRuleCall_1_1_0() { return cErrorMarginEDoubleObjectParserRuleCall_1_1_0; }
	}
	public class EDoubleObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.hal.learning.exercise.xtext.Xercise.EDoubleObject");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//EDoubleObject ecore::EDouble:
		//	INT ('.' INT)?
		@Override public ParserRule getRule() { return rule; }
		
		//INT ('.' INT)?
		public Group getGroup() { return cGroup; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//('.' INT)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_1() { return cINTTerminalRuleCall_1_1; }
	}
	public class BooleanAnswerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.hal.learning.exercise.xtext.Xercise.BooleanAnswer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBooleanAnswerAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Alternatives cValueAlternatives_1_0_0 = (Alternatives)cValueAssignment_1_0.eContents().get(0);
		private final Keyword cValueYesKeyword_1_0_0_0 = (Keyword)cValueAlternatives_1_0_0.eContents().get(0);
		private final Keyword cValueTrueKeyword_1_0_0_1 = (Keyword)cValueAlternatives_1_0_0.eContents().get(1);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cAlternatives_1.eContents().get(1);
		private final Keyword cNoKeyword_1_1_0 = (Keyword)cAlternatives_1_1.eContents().get(0);
		private final Keyword cFalseKeyword_1_1_1 = (Keyword)cAlternatives_1_1.eContents().get(1);
		
		//BooleanAnswer quiz::BooleanAnswer:
		//	{quiz::BooleanAnswer} (value?=('yes' | 'true') | ('no' | 'false'))
		@Override public ParserRule getRule() { return rule; }
		
		//{quiz::BooleanAnswer} (value?=('yes' | 'true') | ('no' | 'false'))
		public Group getGroup() { return cGroup; }
		
		//{quiz::BooleanAnswer}
		public Action getBooleanAnswerAction_0() { return cBooleanAnswerAction_0; }
		
		//(value?=('yes' | 'true') | ('no' | 'false'))
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//value?=('yes' | 'true')
		public Assignment getValueAssignment_1_0() { return cValueAssignment_1_0; }
		
		//('yes' | 'true')
		public Alternatives getValueAlternatives_1_0_0() { return cValueAlternatives_1_0_0; }
		
		//'yes'
		public Keyword getValueYesKeyword_1_0_0_0() { return cValueYesKeyword_1_0_0_0; }
		
		//'true'
		public Keyword getValueTrueKeyword_1_0_0_1() { return cValueTrueKeyword_1_0_0_1; }
		
		//('no' | 'false')
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//'no'
		public Keyword getNoKeyword_1_1_0() { return cNoKeyword_1_1_0; }
		
		//'false'
		public Keyword getFalseKeyword_1_1_1() { return cFalseKeyword_1_1_1; }
	}
	public class OptionsAnswerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.hal.learning.exercise.xtext.Xercise.OptionsAnswer");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSingleOptionsAnswerParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cManyOptionsAnswerParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//OptionsAnswer quiz::OptionsAnswer:
		//	SingleOptionsAnswer | ManyOptionsAnswer
		@Override public ParserRule getRule() { return rule; }
		
		//SingleOptionsAnswer | ManyOptionsAnswer
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SingleOptionsAnswer
		public RuleCall getSingleOptionsAnswerParserRuleCall_0() { return cSingleOptionsAnswerParserRuleCall_0; }
		
		//ManyOptionsAnswer
		public RuleCall getManyOptionsAnswerParserRuleCall_1() { return cManyOptionsAnswerParserRuleCall_1; }
	}
	public class SingleOptionsAnswerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.hal.learning.exercise.xtext.Xercise.SingleOptionsAnswer");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSingleBoxOptionsAnswerParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSingleListOptionsAnswerParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//SingleOptionsAnswer quiz::SingleOptionsAnswer:
		//	SingleBoxOptionsAnswer | SingleListOptionsAnswer
		@Override public ParserRule getRule() { return rule; }
		
		//SingleBoxOptionsAnswer | SingleListOptionsAnswer
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SingleBoxOptionsAnswer
		public RuleCall getSingleBoxOptionsAnswerParserRuleCall_0() { return cSingleBoxOptionsAnswerParserRuleCall_0; }
		
		//SingleListOptionsAnswer
		public RuleCall getSingleListOptionsAnswerParserRuleCall_1() { return cSingleListOptionsAnswerParserRuleCall_1; }
	}
	public class SingleBoxOptionsAnswerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.hal.learning.exercise.xtext.Xercise.SingleBoxOptionsAnswer");
		private final Assignment cOptionsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOptionsSingleBoxOptionParserRuleCall_0 = (RuleCall)cOptionsAssignment.eContents().get(0);
		
		//SingleBoxOptionsAnswer quiz::SingleOptionsAnswer:
		//	options+=SingleBoxOption+
		@Override public ParserRule getRule() { return rule; }
		
		//options+=SingleBoxOption+
		public Assignment getOptionsAssignment() { return cOptionsAssignment; }
		
		//SingleBoxOption
		public RuleCall getOptionsSingleBoxOptionParserRuleCall_0() { return cOptionsSingleBoxOptionParserRuleCall_0; }
	}
	public class SingleBoxOptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.hal.learning.exercise.xtext.Xercise.SingleBoxOption");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCorrectAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cCorrectXKeyword_1_0 = (Keyword)cCorrectAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOptionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOptionOptionAnswerParserRuleCall_3_0 = (RuleCall)cOptionAssignment_3.eContents().get(0);
		
		//SingleBoxOption quiz::Option:
		//	'(' correct?='x'? ')' option=OptionAnswer
		@Override public ParserRule getRule() { return rule; }
		
		//'(' correct?='x'? ')' option=OptionAnswer
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//correct?='x'?
		public Assignment getCorrectAssignment_1() { return cCorrectAssignment_1; }
		
		//'x'
		public Keyword getCorrectXKeyword_1_0() { return cCorrectXKeyword_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
		
		//option=OptionAnswer
		public Assignment getOptionAssignment_3() { return cOptionAssignment_3; }
		
		//OptionAnswer
		public RuleCall getOptionOptionAnswerParserRuleCall_3_0() { return cOptionOptionAnswerParserRuleCall_3_0; }
	}
	public class SingleListOptionsAnswerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.hal.learning.exercise.xtext.Xercise.SingleListOptionsAnswer");
		private final Assignment cOptionsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOptionsSingleListOptionParserRuleCall_0 = (RuleCall)cOptionsAssignment.eContents().get(0);
		
		//SingleListOptionsAnswer quiz::SingleOptionsAnswer:
		//	options+=SingleListOption+
		@Override public ParserRule getRule() { return rule; }
		
		//options+=SingleListOption+
		public Assignment getOptionsAssignment() { return cOptionsAssignment; }
		
		//SingleListOption
		public RuleCall getOptionsSingleListOptionParserRuleCall_0() { return cOptionsSingleListOptionParserRuleCall_0; }
	}
	public class SingleListOptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.hal.learning.exercise.xtext.Xercise.SingleListOption");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_0_0 = (Alternatives)cAlternatives_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_0_0_0 = (Keyword)cAlternatives_0_0.eContents().get(0);
		private final Keyword cXKeyword_0_0_1 = (Keyword)cAlternatives_0_0.eContents().get(1);
		private final Assignment cCorrectAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cCorrectVKeyword_0_1_0 = (Keyword)cCorrectAssignment_0_1.eContents().get(0);
		private final Assignment cOptionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOptionOptionAnswerParserRuleCall_1_0 = (RuleCall)cOptionAssignment_1.eContents().get(0);
		
		//SingleListOption quiz::Option:
		//	(('-' | 'x') | correct?='v') option=OptionAnswer
		@Override public ParserRule getRule() { return rule; }
		
		//(('-' | 'x') | correct?='v') option=OptionAnswer
		public Group getGroup() { return cGroup; }
		
		//(('-' | 'x') | correct?='v')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//('-' | 'x')
		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_0_0_0() { return cHyphenMinusKeyword_0_0_0; }
		
		//'x'
		public Keyword getXKeyword_0_0_1() { return cXKeyword_0_0_1; }
		
		//correct?='v'
		public Assignment getCorrectAssignment_0_1() { return cCorrectAssignment_0_1; }
		
		//'v'
		public Keyword getCorrectVKeyword_0_1_0() { return cCorrectVKeyword_0_1_0; }
		
		//option=OptionAnswer
		public Assignment getOptionAssignment_1() { return cOptionAssignment_1; }
		
		//OptionAnswer
		public RuleCall getOptionOptionAnswerParserRuleCall_1_0() { return cOptionOptionAnswerParserRuleCall_1_0; }
	}
	public class ManyOptionsAnswerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.hal.learning.exercise.xtext.Xercise.ManyOptionsAnswer");
		private final Assignment cOptionsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOptionsManyOptionParserRuleCall_0 = (RuleCall)cOptionsAssignment.eContents().get(0);
		
		//ManyOptionsAnswer quiz::ManyOptionsAnswer:
		//	options+=ManyOption+
		@Override public ParserRule getRule() { return rule; }
		
		//options+=ManyOption+
		public Assignment getOptionsAssignment() { return cOptionsAssignment; }
		
		//ManyOption
		public RuleCall getOptionsManyOptionParserRuleCall_0() { return cOptionsManyOptionParserRuleCall_0; }
	}
	public class ManyOptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.hal.learning.exercise.xtext.Xercise.ManyOption");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCorrectAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cCorrectXKeyword_1_0 = (Keyword)cCorrectAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOptionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOptionOptionAnswerParserRuleCall_3_0 = (RuleCall)cOptionAssignment_3.eContents().get(0);
		
		//ManyOption quiz::Option:
		//	'[' correct?='x'? ']' option=OptionAnswer
		@Override public ParserRule getRule() { return rule; }
		
		//'[' correct?='x'? ']' option=OptionAnswer
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//correct?='x'?
		public Assignment getCorrectAssignment_1() { return cCorrectAssignment_1; }
		
		//'x'
		public Keyword getCorrectXKeyword_1_0() { return cCorrectXKeyword_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
		
		//option=OptionAnswer
		public Assignment getOptionAssignment_3() { return cOptionAssignment_3; }
		
		//OptionAnswer
		public RuleCall getOptionOptionAnswerParserRuleCall_3_0() { return cOptionOptionAnswerParserRuleCall_3_0; }
	}
	public class JunitTestAnswerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.hal.learning.exercise.xtext.Xercise.JunitTestAnswer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cJunitKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTestRunNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTestRunNameQNameParserRuleCall_1_0 = (RuleCall)cTestRunNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cMethodNamesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cMethodNamesIDTerminalRuleCall_2_1_0 = (RuleCall)cMethodNamesAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cMethodNamesAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cMethodNamesIDTerminalRuleCall_2_2_1_0 = (RuleCall)cMethodNamesAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		//// junit
		//JunitTestAnswer junit::JunitTestAnswer:
		//	'junit' testRunName=QName ('{' methodNames+=ID (',' methodNames+=ID)* '}')?
		@Override public ParserRule getRule() { return rule; }
		
		//'junit' testRunName=QName ('{' methodNames+=ID (',' methodNames+=ID)* '}')?
		public Group getGroup() { return cGroup; }
		
		//'junit'
		public Keyword getJunitKeyword_0() { return cJunitKeyword_0; }
		
		//testRunName=QName
		public Assignment getTestRunNameAssignment_1() { return cTestRunNameAssignment_1; }
		
		//QName
		public RuleCall getTestRunNameQNameParserRuleCall_1_0() { return cTestRunNameQNameParserRuleCall_1_0; }
		
		//('{' methodNames+=ID (',' methodNames+=ID)* '}')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }
		
		//methodNames+=ID
		public Assignment getMethodNamesAssignment_2_1() { return cMethodNamesAssignment_2_1; }
		
		//ID
		public RuleCall getMethodNamesIDTerminalRuleCall_2_1_0() { return cMethodNamesIDTerminalRuleCall_2_1_0; }
		
		//(',' methodNames+=ID)*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//methodNames+=ID
		public Assignment getMethodNamesAssignment_2_2_1() { return cMethodNamesAssignment_2_2_1; }
		
		//ID
		public RuleCall getMethodNamesIDTerminalRuleCall_2_2_1_0() { return cMethodNamesIDTerminalRuleCall_2_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_3() { return cRightCurlyBracketKeyword_2_3; }
	}
	public class JdtSourceEditAnswerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.hal.learning.exercise.xtext.Xercise.JdtSourceEditAnswer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cJavaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEditKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cClassNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cClassNameQNameParserRuleCall_2_0 = (RuleCall)cClassNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cMethodNamesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cMethodNamesIDTerminalRuleCall_3_1_0 = (RuleCall)cMethodNamesAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cMethodNamesAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cMethodNamesIDTerminalRuleCall_3_2_1_0 = (RuleCall)cMethodNamesAssignment_3_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		
		//// jdt
		//JdtSourceEditAnswer jdt::JdtSourceEditAnswer:
		//	'java' 'edit' className=QName ('{' methodNames+=ID (',' methodNames+=ID)* '}')?
		@Override public ParserRule getRule() { return rule; }
		
		//'java' 'edit' className=QName ('{' methodNames+=ID (',' methodNames+=ID)* '}')?
		public Group getGroup() { return cGroup; }
		
		//'java'
		public Keyword getJavaKeyword_0() { return cJavaKeyword_0; }
		
		//'edit'
		public Keyword getEditKeyword_1() { return cEditKeyword_1; }
		
		//className=QName
		public Assignment getClassNameAssignment_2() { return cClassNameAssignment_2; }
		
		//QName
		public RuleCall getClassNameQNameParserRuleCall_2_0() { return cClassNameQNameParserRuleCall_2_0; }
		
		//('{' methodNames+=ID (',' methodNames+=ID)* '}')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }
		
		//methodNames+=ID
		public Assignment getMethodNamesAssignment_3_1() { return cMethodNamesAssignment_3_1; }
		
		//ID
		public RuleCall getMethodNamesIDTerminalRuleCall_3_1_0() { return cMethodNamesIDTerminalRuleCall_3_1_0; }
		
		//(',' methodNames+=ID)*
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//','
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }
		
		//methodNames+=ID
		public Assignment getMethodNamesAssignment_3_2_1() { return cMethodNamesAssignment_3_2_1; }
		
		//ID
		public RuleCall getMethodNamesIDTerminalRuleCall_3_2_1_0() { return cMethodNamesIDTerminalRuleCall_3_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_3() { return cRightCurlyBracketKeyword_3_3; }
	}
	public class JdtLaunchAnswerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.hal.learning.exercise.xtext.Xercise.JdtLaunchAnswer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cJavaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLaunchKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cClassNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cClassNameQNameParserRuleCall_2_0 = (RuleCall)cClassNameAssignment_2.eContents().get(0);
		
		//JdtLaunchAnswer jdt::JdtLaunchAnswer:
		//	'java' 'launch' className=QName
		@Override public ParserRule getRule() { return rule; }
		
		//'java' 'launch' className=QName
		public Group getGroup() { return cGroup; }
		
		//'java'
		public Keyword getJavaKeyword_0() { return cJavaKeyword_0; }
		
		//'launch'
		public Keyword getLaunchKeyword_1() { return cLaunchKeyword_1; }
		
		//className=QName
		public Assignment getClassNameAssignment_2() { return cClassNameAssignment_2; }
		
		//QName
		public RuleCall getClassNameQNameParserRuleCall_2_0() { return cClassNameQNameParserRuleCall_2_0; }
	}
	public class TaskAnswerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.hal.learning.exercise.xtext.Xercise.TaskAnswer");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPerspectiveTaskAnswerParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPartTaskAnswerParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCommandExecutionAnswerParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDebugEventAnswerParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cJunitTestAnswerParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cJdtSourceEditAnswerParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cJdtLaunchAnswerParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//// workbench
		//TaskAnswer:
		//	PerspectiveTaskAnswer | PartTaskAnswer | CommandExecutionAnswer | DebugEventAnswer
		//	| JunitTestAnswer
		//	| JdtSourceEditAnswer
		//	| JdtLaunchAnswer;
		@Override public ParserRule getRule() { return rule; }
		
		//PerspectiveTaskAnswer | PartTaskAnswer | CommandExecutionAnswer | DebugEventAnswer | JunitTestAnswer |
		//JdtSourceEditAnswer | JdtLaunchAnswer
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PerspectiveTaskAnswer
		public RuleCall getPerspectiveTaskAnswerParserRuleCall_0() { return cPerspectiveTaskAnswerParserRuleCall_0; }
		
		//PartTaskAnswer
		public RuleCall getPartTaskAnswerParserRuleCall_1() { return cPartTaskAnswerParserRuleCall_1; }
		
		//CommandExecutionAnswer
		public RuleCall getCommandExecutionAnswerParserRuleCall_2() { return cCommandExecutionAnswerParserRuleCall_2; }
		
		//DebugEventAnswer
		public RuleCall getDebugEventAnswerParserRuleCall_3() { return cDebugEventAnswerParserRuleCall_3; }
		
		//JunitTestAnswer
		public RuleCall getJunitTestAnswerParserRuleCall_4() { return cJunitTestAnswerParserRuleCall_4; }
		
		//JdtSourceEditAnswer
		public RuleCall getJdtSourceEditAnswerParserRuleCall_5() { return cJdtSourceEditAnswerParserRuleCall_5; }
		
		//JdtLaunchAnswer
		public RuleCall getJdtLaunchAnswerParserRuleCall_6() { return cJdtLaunchAnswerParserRuleCall_6; }
	}
	public class PerspectiveTaskAnswerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.hal.learning.exercise.xtext.Xercise.PerspectiveTaskAnswer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPerspectiveTaskAnswerAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPerspectiveKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cElementIdAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cElementIdQNameParserRuleCall_2_0_0 = (RuleCall)cElementIdAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cNumberSignKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cActionAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final Alternatives cActionAlternatives_2_1_1_0 = (Alternatives)cActionAssignment_2_1_1.eContents().get(0);
		private final Keyword cActionActivatedKeyword_2_1_1_0_0 = (Keyword)cActionAlternatives_2_1_1_0.eContents().get(0);
		private final Keyword cActionChangedKeyword_2_1_1_0_1 = (Keyword)cActionAlternatives_2_1_1_0.eContents().get(1);
		
		//PerspectiveTaskAnswer workbench::PerspectiveTaskAnswer:
		//	{workbench::PerspectiveTaskAnswer} 'perspective' (elementId=QName ('#' action=('activated' | 'changed'))?)
		@Override public ParserRule getRule() { return rule; }
		
		//{workbench::PerspectiveTaskAnswer} 'perspective' (elementId=QName ('#' action=('activated' | 'changed'))?)
		public Group getGroup() { return cGroup; }
		
		//{workbench::PerspectiveTaskAnswer}
		public Action getPerspectiveTaskAnswerAction_0() { return cPerspectiveTaskAnswerAction_0; }
		
		//'perspective'
		public Keyword getPerspectiveKeyword_1() { return cPerspectiveKeyword_1; }
		
		//(elementId=QName ('#' action=('activated' | 'changed'))?)
		public Group getGroup_2() { return cGroup_2; }
		
		//elementId=QName
		public Assignment getElementIdAssignment_2_0() { return cElementIdAssignment_2_0; }
		
		//QName
		public RuleCall getElementIdQNameParserRuleCall_2_0_0() { return cElementIdQNameParserRuleCall_2_0_0; }
		
		//('#' action=('activated' | 'changed'))?
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'#'
		public Keyword getNumberSignKeyword_2_1_0() { return cNumberSignKeyword_2_1_0; }
		
		//action=('activated' | 'changed')
		public Assignment getActionAssignment_2_1_1() { return cActionAssignment_2_1_1; }
		
		//('activated' | 'changed')
		public Alternatives getActionAlternatives_2_1_1_0() { return cActionAlternatives_2_1_1_0; }
		
		//'activated'
		public Keyword getActionActivatedKeyword_2_1_1_0_0() { return cActionActivatedKeyword_2_1_1_0_0; }
		
		//'changed'
		public Keyword getActionChangedKeyword_2_1_1_0_1() { return cActionChangedKeyword_2_1_1_0_1; }
	}
	public class PartTaskAnswerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.hal.learning.exercise.xtext.Xercise.PartTaskAnswer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPartTaskAnswerAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPartKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cElementIdAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cElementIdQNameParserRuleCall_2_0_0 = (RuleCall)cElementIdAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cNumberSignKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cActionAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final Alternatives cActionAlternatives_2_1_1_0 = (Alternatives)cActionAssignment_2_1_1.eContents().get(0);
		private final Keyword cActionActivatedKeyword_2_1_1_0_0 = (Keyword)cActionAlternatives_2_1_1_0.eContents().get(0);
		private final Keyword cActionBroughtToTopKeyword_2_1_1_0_1 = (Keyword)cActionAlternatives_2_1_1_0.eContents().get(1);
		private final Keyword cActionClosedKeyword_2_1_1_0_2 = (Keyword)cActionAlternatives_2_1_1_0.eContents().get(2);
		private final Keyword cActionDeactivatedKeyword_2_1_1_0_3 = (Keyword)cActionAlternatives_2_1_1_0.eContents().get(3);
		private final Keyword cActionOpenedKeyword_2_1_1_0_4 = (Keyword)cActionAlternatives_2_1_1_0.eContents().get(4);
		
		//PartTaskAnswer workbench::PartTaskAnswer:
		//	{workbench::PartTaskAnswer} 'part' (elementId=QName ('#' action=('activated' | 'broughtToTop' | 'closed' |
		//	'deactivated' | 'opened'))?)
		@Override public ParserRule getRule() { return rule; }
		
		//{workbench::PartTaskAnswer} 'part' (elementId=QName ('#' action=('activated' | 'broughtToTop' | 'closed' | 'deactivated'
		//| 'opened'))?)
		public Group getGroup() { return cGroup; }
		
		//{workbench::PartTaskAnswer}
		public Action getPartTaskAnswerAction_0() { return cPartTaskAnswerAction_0; }
		
		//'part'
		public Keyword getPartKeyword_1() { return cPartKeyword_1; }
		
		//(elementId=QName ('#' action=('activated' | 'broughtToTop' | 'closed' | 'deactivated' | 'opened'))?)
		public Group getGroup_2() { return cGroup_2; }
		
		//elementId=QName
		public Assignment getElementIdAssignment_2_0() { return cElementIdAssignment_2_0; }
		
		//QName
		public RuleCall getElementIdQNameParserRuleCall_2_0_0() { return cElementIdQNameParserRuleCall_2_0_0; }
		
		//('#' action=('activated' | 'broughtToTop' | 'closed' | 'deactivated' | 'opened'))?
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'#'
		public Keyword getNumberSignKeyword_2_1_0() { return cNumberSignKeyword_2_1_0; }
		
		//action=('activated' | 'broughtToTop' | 'closed' | 'deactivated' | 'opened')
		public Assignment getActionAssignment_2_1_1() { return cActionAssignment_2_1_1; }
		
		//('activated' | 'broughtToTop' | 'closed' | 'deactivated' | 'opened')
		public Alternatives getActionAlternatives_2_1_1_0() { return cActionAlternatives_2_1_1_0; }
		
		//'activated'
		public Keyword getActionActivatedKeyword_2_1_1_0_0() { return cActionActivatedKeyword_2_1_1_0_0; }
		
		//'broughtToTop'
		public Keyword getActionBroughtToTopKeyword_2_1_1_0_1() { return cActionBroughtToTopKeyword_2_1_1_0_1; }
		
		//'closed'
		public Keyword getActionClosedKeyword_2_1_1_0_2() { return cActionClosedKeyword_2_1_1_0_2; }
		
		//'deactivated'
		public Keyword getActionDeactivatedKeyword_2_1_1_0_3() { return cActionDeactivatedKeyword_2_1_1_0_3; }
		
		//'opened'
		public Keyword getActionOpenedKeyword_2_1_1_0_4() { return cActionOpenedKeyword_2_1_1_0_4; }
	}
	public class CommandExecutionAnswerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.hal.learning.exercise.xtext.Xercise.CommandExecutionAnswer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCommandExecutionAnswerAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCommandKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cElementIdAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cElementIdQNameParserRuleCall_2_0_0 = (RuleCall)cElementIdAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cNumberSignKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cActionAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final Alternatives cActionAlternatives_2_1_1_0 = (Alternatives)cActionAssignment_2_1_1.eContents().get(0);
		private final Keyword cActionExecuteSuccessKeyword_2_1_1_0_0 = (Keyword)cActionAlternatives_2_1_1_0.eContents().get(0);
		private final Keyword cActionExecuteFailureKeyword_2_1_1_0_1 = (Keyword)cActionAlternatives_2_1_1_0.eContents().get(1);
		
		//CommandExecutionAnswer workbench::CommandExecutionAnswer:
		//	{workbench::CommandExecutionAnswer} 'command' (elementId=QName ('#' action=('executeSuccess' | 'executeFailure'))?)
		@Override public ParserRule getRule() { return rule; }
		
		//{workbench::CommandExecutionAnswer} 'command' (elementId=QName ('#' action=('executeSuccess' | 'executeFailure'))?)
		public Group getGroup() { return cGroup; }
		
		//{workbench::CommandExecutionAnswer}
		public Action getCommandExecutionAnswerAction_0() { return cCommandExecutionAnswerAction_0; }
		
		//'command'
		public Keyword getCommandKeyword_1() { return cCommandKeyword_1; }
		
		//(elementId=QName ('#' action=('executeSuccess' | 'executeFailure'))?)
		public Group getGroup_2() { return cGroup_2; }
		
		//elementId=QName
		public Assignment getElementIdAssignment_2_0() { return cElementIdAssignment_2_0; }
		
		//QName
		public RuleCall getElementIdQNameParserRuleCall_2_0_0() { return cElementIdQNameParserRuleCall_2_0_0; }
		
		//('#' action=('executeSuccess' | 'executeFailure'))?
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'#'
		public Keyword getNumberSignKeyword_2_1_0() { return cNumberSignKeyword_2_1_0; }
		
		//action=('executeSuccess' | 'executeFailure')
		public Assignment getActionAssignment_2_1_1() { return cActionAssignment_2_1_1; }
		
		//('executeSuccess' | 'executeFailure')
		public Alternatives getActionAlternatives_2_1_1_0() { return cActionAlternatives_2_1_1_0; }
		
		//'executeSuccess'
		public Keyword getActionExecuteSuccessKeyword_2_1_1_0_0() { return cActionExecuteSuccessKeyword_2_1_1_0_0; }
		
		//'executeFailure'
		public Keyword getActionExecuteFailureKeyword_2_1_1_0_1() { return cActionExecuteFailureKeyword_2_1_1_0_1; }
	}
	public class DebugEventAnswerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.hal.learning.exercise.xtext.Xercise.DebugEventAnswer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDebugEventAnswerAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDebugKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cElementIdAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cElementIdQNameParserRuleCall_2_0_0 = (RuleCall)cElementIdAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cNumberSignKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cActionAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final Alternatives cActionAlternatives_2_1_1_0 = (Alternatives)cActionAssignment_2_1_1.eContents().get(0);
		private final Keyword cActionCreateKeyword_2_1_1_0_0 = (Keyword)cActionAlternatives_2_1_1_0.eContents().get(0);
		private final Keyword cActionTerminateKeyword_2_1_1_0_1 = (Keyword)cActionAlternatives_2_1_1_0.eContents().get(1);
		private final Keyword cActionResumeKeyword_2_1_1_0_2 = (Keyword)cActionAlternatives_2_1_1_0.eContents().get(2);
		private final Keyword cActionSuspendKeyword_2_1_1_0_3 = (Keyword)cActionAlternatives_2_1_1_0.eContents().get(3);
		private final Keyword cActionStepIntoKeyword_2_1_1_0_4 = (Keyword)cActionAlternatives_2_1_1_0.eContents().get(4);
		private final Keyword cActionStepOverKeyword_2_1_1_0_5 = (Keyword)cActionAlternatives_2_1_1_0.eContents().get(5);
		private final Keyword cActionStepReturnKeyword_2_1_1_0_6 = (Keyword)cActionAlternatives_2_1_1_0.eContents().get(6);
		private final Keyword cActionStepEndKeyword_2_1_1_0_7 = (Keyword)cActionAlternatives_2_1_1_0.eContents().get(7);
		private final Keyword cActionBreakpointKeyword_2_1_1_0_8 = (Keyword)cActionAlternatives_2_1_1_0.eContents().get(8);
		private final Keyword cActionEvaluationKeyword_2_1_1_0_9 = (Keyword)cActionAlternatives_2_1_1_0.eContents().get(9);
		
		//DebugEventAnswer workbench::DebugEventAnswer:
		//	{workbench::DebugEventAnswer} 'debug' (elementId=QName ('#' action=('create' | 'terminate' | 'resume' | 'suspend' |
		//	'stepInto' | 'stepOver' | 'stepReturn' | 'stepEnd' | 'breakpoint' | 'evaluation'))?)
		@Override public ParserRule getRule() { return rule; }
		
		//{workbench::DebugEventAnswer} 'debug' (elementId=QName ('#' action=('create' | 'terminate' | 'resume' | 'suspend' |
		//'stepInto' | 'stepOver' | 'stepReturn' | 'stepEnd' | 'breakpoint' | 'evaluation'))?)
		public Group getGroup() { return cGroup; }
		
		//{workbench::DebugEventAnswer}
		public Action getDebugEventAnswerAction_0() { return cDebugEventAnswerAction_0; }
		
		//'debug'
		public Keyword getDebugKeyword_1() { return cDebugKeyword_1; }
		
		//(elementId=QName ('#' action=('create' | 'terminate' | 'resume' | 'suspend' | 'stepInto' | 'stepOver' | 'stepReturn' |
		//'stepEnd' | 'breakpoint' | 'evaluation'))?)
		public Group getGroup_2() { return cGroup_2; }
		
		//elementId=QName
		public Assignment getElementIdAssignment_2_0() { return cElementIdAssignment_2_0; }
		
		//QName
		public RuleCall getElementIdQNameParserRuleCall_2_0_0() { return cElementIdQNameParserRuleCall_2_0_0; }
		
		//('#' action=('create' | 'terminate' | 'resume' | 'suspend' | 'stepInto' | 'stepOver' | 'stepReturn' | 'stepEnd' |
		//'breakpoint' | 'evaluation'))?
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'#'
		public Keyword getNumberSignKeyword_2_1_0() { return cNumberSignKeyword_2_1_0; }
		
		//action=('create' | 'terminate' | 'resume' | 'suspend' | 'stepInto' | 'stepOver' | 'stepReturn' | 'stepEnd' |
		//'breakpoint' | 'evaluation')
		public Assignment getActionAssignment_2_1_1() { return cActionAssignment_2_1_1; }
		
		//('create' | 'terminate' | 'resume' | 'suspend' | 'stepInto' | 'stepOver' | 'stepReturn' | 'stepEnd' | 'breakpoint' |
		//'evaluation')
		public Alternatives getActionAlternatives_2_1_1_0() { return cActionAlternatives_2_1_1_0; }
		
		//'create'
		public Keyword getActionCreateKeyword_2_1_1_0_0() { return cActionCreateKeyword_2_1_1_0_0; }
		
		//'terminate'
		public Keyword getActionTerminateKeyword_2_1_1_0_1() { return cActionTerminateKeyword_2_1_1_0_1; }
		
		//'resume'
		public Keyword getActionResumeKeyword_2_1_1_0_2() { return cActionResumeKeyword_2_1_1_0_2; }
		
		//'suspend'
		public Keyword getActionSuspendKeyword_2_1_1_0_3() { return cActionSuspendKeyword_2_1_1_0_3; }
		
		//'stepInto'
		public Keyword getActionStepIntoKeyword_2_1_1_0_4() { return cActionStepIntoKeyword_2_1_1_0_4; }
		
		//'stepOver'
		public Keyword getActionStepOverKeyword_2_1_1_0_5() { return cActionStepOverKeyword_2_1_1_0_5; }
		
		//'stepReturn'
		public Keyword getActionStepReturnKeyword_2_1_1_0_6() { return cActionStepReturnKeyword_2_1_1_0_6; }
		
		//'stepEnd'
		public Keyword getActionStepEndKeyword_2_1_1_0_7() { return cActionStepEndKeyword_2_1_1_0_7; }
		
		//'breakpoint'
		public Keyword getActionBreakpointKeyword_2_1_1_0_8() { return cActionBreakpointKeyword_2_1_1_0_8; }
		
		//'evaluation'
		public Keyword getActionEvaluationKeyword_2_1_1_0_9() { return cActionEvaluationKeyword_2_1_1_0_9; }
	}
	
	
	private final ExerciseElements pExercise;
	private final QNameElements pQName;
	private final AbstractExercisePartElements pAbstractExercisePart;
	private final ExercisePartElements pExercisePart;
	private final ExercisePartRefElements pExercisePartRef;
	private final AnonymousExercisePartElements pAnonymousExercisePart;
	private final AbstractTaskElements pAbstractTask;
	private final TaskRefElements pTaskRef;
	private final TaskElements pTask;
	private final QuestionElements pQuestion;
	private final StringQuestionElements pStringQuestion;
	private final AnswerElements pAnswer;
	private final OptionAnswerElements pOptionAnswer;
	private final SimpleAnswerElements pSimpleAnswer;
	private final StringAnswerElements pStringAnswer;
	private final RegexAnswerElements pRegexAnswer;
	private final NumberAnswerElements pNumberAnswer;
	private final EDoubleObjectElements pEDoubleObject;
	private final BooleanAnswerElements pBooleanAnswer;
	private final OptionsAnswerElements pOptionsAnswer;
	private final SingleOptionsAnswerElements pSingleOptionsAnswer;
	private final SingleBoxOptionsAnswerElements pSingleBoxOptionsAnswer;
	private final SingleBoxOptionElements pSingleBoxOption;
	private final SingleListOptionsAnswerElements pSingleListOptionsAnswer;
	private final SingleListOptionElements pSingleListOption;
	private final ManyOptionsAnswerElements pManyOptionsAnswer;
	private final ManyOptionElements pManyOption;
	private final JunitTestAnswerElements pJunitTestAnswer;
	private final JdtSourceEditAnswerElements pJdtSourceEditAnswer;
	private final JdtLaunchAnswerElements pJdtLaunchAnswer;
	private final TaskAnswerElements pTaskAnswer;
	private final PerspectiveTaskAnswerElements pPerspectiveTaskAnswer;
	private final PartTaskAnswerElements pPartTaskAnswer;
	private final CommandExecutionAnswerElements pCommandExecutionAnswer;
	private final DebugEventAnswerElements pDebugEventAnswer;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public XerciseGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pExercise = new ExerciseElements();
		this.pQName = new QNameElements();
		this.pAbstractExercisePart = new AbstractExercisePartElements();
		this.pExercisePart = new ExercisePartElements();
		this.pExercisePartRef = new ExercisePartRefElements();
		this.pAnonymousExercisePart = new AnonymousExercisePartElements();
		this.pAbstractTask = new AbstractTaskElements();
		this.pTaskRef = new TaskRefElements();
		this.pTask = new TaskElements();
		this.pQuestion = new QuestionElements();
		this.pStringQuestion = new StringQuestionElements();
		this.pAnswer = new AnswerElements();
		this.pOptionAnswer = new OptionAnswerElements();
		this.pSimpleAnswer = new SimpleAnswerElements();
		this.pStringAnswer = new StringAnswerElements();
		this.pRegexAnswer = new RegexAnswerElements();
		this.pNumberAnswer = new NumberAnswerElements();
		this.pEDoubleObject = new EDoubleObjectElements();
		this.pBooleanAnswer = new BooleanAnswerElements();
		this.pOptionsAnswer = new OptionsAnswerElements();
		this.pSingleOptionsAnswer = new SingleOptionsAnswerElements();
		this.pSingleBoxOptionsAnswer = new SingleBoxOptionsAnswerElements();
		this.pSingleBoxOption = new SingleBoxOptionElements();
		this.pSingleListOptionsAnswer = new SingleListOptionsAnswerElements();
		this.pSingleListOption = new SingleListOptionElements();
		this.pManyOptionsAnswer = new ManyOptionsAnswerElements();
		this.pManyOption = new ManyOptionElements();
		this.pJunitTestAnswer = new JunitTestAnswerElements();
		this.pJdtSourceEditAnswer = new JdtSourceEditAnswerElements();
		this.pJdtLaunchAnswer = new JdtLaunchAnswerElements();
		this.pTaskAnswer = new TaskAnswerElements();
		this.pPerspectiveTaskAnswer = new PerspectiveTaskAnswerElements();
		this.pPartTaskAnswer = new PartTaskAnswerElements();
		this.pCommandExecutionAnswer = new CommandExecutionAnswerElements();
		this.pDebugEventAnswer = new DebugEventAnswerElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("no.hal.learning.exercise.xtext.Xercise".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Exercise:
	//	{Exercise} 'exercise' (name=QName? title=STRING?
	//	parts+=AbstractExercisePart*
	//	| parts+=AnonymousExercisePart);
	public ExerciseElements getExerciseAccess() {
		return pExercise;
	}
	
	public ParserRule getExerciseRule() {
		return getExerciseAccess().getRule();
	}
	
	//QName:
	//	ID ('.' ID)*;
	public QNameElements getQNameAccess() {
		return pQName;
	}
	
	public ParserRule getQNameRule() {
		return getQNameAccess().getRule();
	}
	
	//AbstractExercisePart:
	//	ExercisePart | ExercisePartRef;
	public AbstractExercisePartElements getAbstractExercisePartAccess() {
		return pAbstractExercisePart;
	}
	
	public ParserRule getAbstractExercisePartRule() {
		return getAbstractExercisePartAccess().getRule();
	}
	
	//ExercisePart:
	//	'part' name=ID title=STRING tasks+=AbstractTask*;
	public ExercisePartElements getExercisePartAccess() {
		return pExercisePart;
	}
	
	public ParserRule getExercisePartRule() {
		return getExercisePartAccess().getRule();
	}
	
	//ExercisePartRef:
	//	'part' 'ref' partRef=[ExercisePart|QName];
	public ExercisePartRefElements getExercisePartRefAccess() {
		return pExercisePartRef;
	}
	
	public ParserRule getExercisePartRefRule() {
		return getExercisePartRefAccess().getRule();
	}
	
	//AnonymousExercisePart ExercisePart:
	//	{ExercisePart} tasks+=AbstractTask*
	public AnonymousExercisePartElements getAnonymousExercisePartAccess() {
		return pAnonymousExercisePart;
	}
	
	public ParserRule getAnonymousExercisePartRule() {
		return getAnonymousExercisePartAccess().getRule();
	}
	
	//AbstractTask:
	//	Task | TaskRef;
	public AbstractTaskElements getAbstractTaskAccess() {
		return pAbstractTask;
	}
	
	public ParserRule getAbstractTaskRule() {
		return getAbstractTaskAccess().getRule();
	}
	
	//TaskRef:
	//	'ref' taskRef=[Task|QName];
	public TaskRefElements getTaskRefAccess() {
		return pTaskRef;
	}
	
	public ParserRule getTaskRefRule() {
		return getTaskRefAccess().getRule();
	}
	
	//Task:
	//	name=ID?
	//	q=Question
	//	a=Answer;
	public TaskElements getTaskAccess() {
		return pTask;
	}
	
	public ParserRule getTaskRule() {
		return getTaskAccess().getRule();
	}
	
	//Question:
	//	StringQuestion;
	public QuestionElements getQuestionAccess() {
		return pQuestion;
	}
	
	public ParserRule getQuestionRule() {
		return getQuestionAccess().getRule();
	}
	
	//StringQuestion:
	//	question=STRING;
	public StringQuestionElements getStringQuestionAccess() {
		return pStringQuestion;
	}
	
	public ParserRule getStringQuestionRule() {
		return getStringQuestionAccess().getRule();
	}
	
	//Answer:
	//	OptionAnswer | OptionsAnswer | TaskAnswer;
	public AnswerElements getAnswerAccess() {
		return pAnswer;
	}
	
	public ParserRule getAnswerRule() {
		return getAnswerAccess().getRule();
	}
	
	//// quiz
	//OptionAnswer quiz::OptionAnswer:
	//	SimpleAnswer
	public OptionAnswerElements getOptionAnswerAccess() {
		return pOptionAnswer;
	}
	
	public ParserRule getOptionAnswerRule() {
		return getOptionAnswerAccess().getRule();
	}
	
	//SimpleAnswer quiz::SimpleAnswer:
	//	StringAnswer | RegexAnswer | NumberAnswer | BooleanAnswer
	public SimpleAnswerElements getSimpleAnswerAccess() {
		return pSimpleAnswer;
	}
	
	public ParserRule getSimpleAnswerRule() {
		return getSimpleAnswerAccess().getRule();
	}
	
	//StringAnswer quiz::StringAnswer:
	//	value=STRING ignoreCase?='~'?
	public StringAnswerElements getStringAnswerAccess() {
		return pStringAnswer;
	}
	
	public ParserRule getStringAnswerRule() {
		return getStringAnswerAccess().getRule();
	}
	
	//RegexAnswer quiz::StringAnswer:
	//	regexp?='/' value=STRING '/' ignoreCase?='~'?
	public RegexAnswerElements getRegexAnswerAccess() {
		return pRegexAnswer;
	}
	
	public ParserRule getRegexAnswerRule() {
		return getRegexAnswerAccess().getRule();
	}
	
	//NumberAnswer quiz::NumberAnswer:
	//	value=EDoubleObject ('+-' errorMargin=EDoubleObject)?
	public NumberAnswerElements getNumberAnswerAccess() {
		return pNumberAnswer;
	}
	
	public ParserRule getNumberAnswerRule() {
		return getNumberAnswerAccess().getRule();
	}
	
	//EDoubleObject ecore::EDouble:
	//	INT ('.' INT)?
	public EDoubleObjectElements getEDoubleObjectAccess() {
		return pEDoubleObject;
	}
	
	public ParserRule getEDoubleObjectRule() {
		return getEDoubleObjectAccess().getRule();
	}
	
	//BooleanAnswer quiz::BooleanAnswer:
	//	{quiz::BooleanAnswer} (value?=('yes' | 'true') | ('no' | 'false'))
	public BooleanAnswerElements getBooleanAnswerAccess() {
		return pBooleanAnswer;
	}
	
	public ParserRule getBooleanAnswerRule() {
		return getBooleanAnswerAccess().getRule();
	}
	
	//OptionsAnswer quiz::OptionsAnswer:
	//	SingleOptionsAnswer | ManyOptionsAnswer
	public OptionsAnswerElements getOptionsAnswerAccess() {
		return pOptionsAnswer;
	}
	
	public ParserRule getOptionsAnswerRule() {
		return getOptionsAnswerAccess().getRule();
	}
	
	//SingleOptionsAnswer quiz::SingleOptionsAnswer:
	//	SingleBoxOptionsAnswer | SingleListOptionsAnswer
	public SingleOptionsAnswerElements getSingleOptionsAnswerAccess() {
		return pSingleOptionsAnswer;
	}
	
	public ParserRule getSingleOptionsAnswerRule() {
		return getSingleOptionsAnswerAccess().getRule();
	}
	
	//SingleBoxOptionsAnswer quiz::SingleOptionsAnswer:
	//	options+=SingleBoxOption+
	public SingleBoxOptionsAnswerElements getSingleBoxOptionsAnswerAccess() {
		return pSingleBoxOptionsAnswer;
	}
	
	public ParserRule getSingleBoxOptionsAnswerRule() {
		return getSingleBoxOptionsAnswerAccess().getRule();
	}
	
	//SingleBoxOption quiz::Option:
	//	'(' correct?='x'? ')' option=OptionAnswer
	public SingleBoxOptionElements getSingleBoxOptionAccess() {
		return pSingleBoxOption;
	}
	
	public ParserRule getSingleBoxOptionRule() {
		return getSingleBoxOptionAccess().getRule();
	}
	
	//SingleListOptionsAnswer quiz::SingleOptionsAnswer:
	//	options+=SingleListOption+
	public SingleListOptionsAnswerElements getSingleListOptionsAnswerAccess() {
		return pSingleListOptionsAnswer;
	}
	
	public ParserRule getSingleListOptionsAnswerRule() {
		return getSingleListOptionsAnswerAccess().getRule();
	}
	
	//SingleListOption quiz::Option:
	//	(('-' | 'x') | correct?='v') option=OptionAnswer
	public SingleListOptionElements getSingleListOptionAccess() {
		return pSingleListOption;
	}
	
	public ParserRule getSingleListOptionRule() {
		return getSingleListOptionAccess().getRule();
	}
	
	//ManyOptionsAnswer quiz::ManyOptionsAnswer:
	//	options+=ManyOption+
	public ManyOptionsAnswerElements getManyOptionsAnswerAccess() {
		return pManyOptionsAnswer;
	}
	
	public ParserRule getManyOptionsAnswerRule() {
		return getManyOptionsAnswerAccess().getRule();
	}
	
	//ManyOption quiz::Option:
	//	'[' correct?='x'? ']' option=OptionAnswer
	public ManyOptionElements getManyOptionAccess() {
		return pManyOption;
	}
	
	public ParserRule getManyOptionRule() {
		return getManyOptionAccess().getRule();
	}
	
	//// junit
	//JunitTestAnswer junit::JunitTestAnswer:
	//	'junit' testRunName=QName ('{' methodNames+=ID (',' methodNames+=ID)* '}')?
	public JunitTestAnswerElements getJunitTestAnswerAccess() {
		return pJunitTestAnswer;
	}
	
	public ParserRule getJunitTestAnswerRule() {
		return getJunitTestAnswerAccess().getRule();
	}
	
	//// jdt
	//JdtSourceEditAnswer jdt::JdtSourceEditAnswer:
	//	'java' 'edit' className=QName ('{' methodNames+=ID (',' methodNames+=ID)* '}')?
	public JdtSourceEditAnswerElements getJdtSourceEditAnswerAccess() {
		return pJdtSourceEditAnswer;
	}
	
	public ParserRule getJdtSourceEditAnswerRule() {
		return getJdtSourceEditAnswerAccess().getRule();
	}
	
	//JdtLaunchAnswer jdt::JdtLaunchAnswer:
	//	'java' 'launch' className=QName
	public JdtLaunchAnswerElements getJdtLaunchAnswerAccess() {
		return pJdtLaunchAnswer;
	}
	
	public ParserRule getJdtLaunchAnswerRule() {
		return getJdtLaunchAnswerAccess().getRule();
	}
	
	//// workbench
	//TaskAnswer:
	//	PerspectiveTaskAnswer | PartTaskAnswer | CommandExecutionAnswer | DebugEventAnswer
	//	| JunitTestAnswer
	//	| JdtSourceEditAnswer
	//	| JdtLaunchAnswer;
	public TaskAnswerElements getTaskAnswerAccess() {
		return pTaskAnswer;
	}
	
	public ParserRule getTaskAnswerRule() {
		return getTaskAnswerAccess().getRule();
	}
	
	//PerspectiveTaskAnswer workbench::PerspectiveTaskAnswer:
	//	{workbench::PerspectiveTaskAnswer} 'perspective' (elementId=QName ('#' action=('activated' | 'changed'))?)
	public PerspectiveTaskAnswerElements getPerspectiveTaskAnswerAccess() {
		return pPerspectiveTaskAnswer;
	}
	
	public ParserRule getPerspectiveTaskAnswerRule() {
		return getPerspectiveTaskAnswerAccess().getRule();
	}
	
	//PartTaskAnswer workbench::PartTaskAnswer:
	//	{workbench::PartTaskAnswer} 'part' (elementId=QName ('#' action=('activated' | 'broughtToTop' | 'closed' |
	//	'deactivated' | 'opened'))?)
	public PartTaskAnswerElements getPartTaskAnswerAccess() {
		return pPartTaskAnswer;
	}
	
	public ParserRule getPartTaskAnswerRule() {
		return getPartTaskAnswerAccess().getRule();
	}
	
	//CommandExecutionAnswer workbench::CommandExecutionAnswer:
	//	{workbench::CommandExecutionAnswer} 'command' (elementId=QName ('#' action=('executeSuccess' | 'executeFailure'))?)
	public CommandExecutionAnswerElements getCommandExecutionAnswerAccess() {
		return pCommandExecutionAnswer;
	}
	
	public ParserRule getCommandExecutionAnswerRule() {
		return getCommandExecutionAnswerAccess().getRule();
	}
	
	//DebugEventAnswer workbench::DebugEventAnswer:
	//	{workbench::DebugEventAnswer} 'debug' (elementId=QName ('#' action=('create' | 'terminate' | 'resume' | 'suspend' |
	//	'stepInto' | 'stepOver' | 'stepReturn' | 'stepEnd' | 'breakpoint' | 'evaluation'))?)
	public DebugEventAnswerElements getDebugEventAnswerAccess() {
		return pDebugEventAnswer;
	}
	
	public ParserRule getDebugEventAnswerRule() {
		return getDebugEventAnswerAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
