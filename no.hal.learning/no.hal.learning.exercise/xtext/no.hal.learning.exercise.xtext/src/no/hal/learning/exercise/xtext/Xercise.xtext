// automatically generated by Xtext
grammar no.hal.learning.exercise.xtext.Xercise with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "platform:/plugin/no.hal.learning.exercise.workbench/model/workbench-exercise.ecore" as workbench 
import "platform:/plugin/no.hal.learning.exercise.model/model/exercise.ecore"
import "platform:/plugin/no.hal.learning.exercise.model/model/quiz.ecore" as quiz
import "platform:/plugin/no.hal.learning.exercise.junit/model/junit-exercise.ecore" as junit
import "platform:/plugin/no.hal.learning.exercise.jdt/model/jdt-exercise.ecore" as jdt

Exercise:
	{Exercise} 'exercise'
	(
		(
			(name = QName)? (title = STRING)?
			(parts += AbstractExercisePart)*
		) |
		(parts += AnonymousExercisePart)
	)
;

QName:
  ID ('.' ID)*
;

AbstractExercisePart: ExercisePart | ExercisePartRef;

ExercisePart:
	'part' (name = ID) (title = STRING)
	(tasks += AbstractTask)*
;

ExercisePartRef:
	'part' 'ref' partRef = [ExercisePart | QName]
;

AnonymousExercisePart returns ExercisePart:
	{ExercisePart} (tasks += AbstractTask)*
;

AbstractTask: Task | TaskRef;

TaskRef:
	'ref' taskRef = [Task | QName]
;

Task:
	(name = ID)?
	q = Question
	a = Answer
;

Question: StringQuestion;

StringQuestion:
	question = STRING
;

Answer: OptionAnswer | OptionsAnswer | TaskAnswer;

// quiz

OptionAnswer returns quiz::OptionAnswer: SimpleAnswer;

SimpleAnswer returns quiz::SimpleAnswer: StringAnswer | RegexAnswer | NumberAnswer | BooleanAnswer;

StringAnswer returns quiz::StringAnswer: value = STRING (ignoreCase ?= '~')?;
RegexAnswer returns quiz::StringAnswer: (regexp ?= '/') value = STRING '/' (ignoreCase ?= '~')?;

NumberAnswer returns quiz::NumberAnswer: value = EDoubleObject ('+-' errorMargin = EDoubleObject)?;

EDoubleObject returns ecore::EDouble: INT ('.' INT)?;

BooleanAnswer returns quiz::BooleanAnswer: {quiz::BooleanAnswer} (value ?= ('yes' | 'true') | ('no' | 'false'));

OptionsAnswer returns quiz::OptionsAnswer: (SingleOptionsAnswer | ManyOptionsAnswer);

SingleOptionsAnswer returns quiz::SingleOptionsAnswer: SingleBoxOptionsAnswer | SingleListOptionsAnswer;

SingleBoxOptionsAnswer returns quiz::SingleOptionsAnswer:
	(options += SingleBoxOption)+
;
SingleBoxOption returns quiz::Option:
	'(' (correct ?= 'x')? ')' option = OptionAnswer
;

SingleListOptionsAnswer returns quiz::SingleOptionsAnswer:
	(options += SingleListOption)+
;
SingleListOption returns quiz::Option:
	(('-'|'x') | (correct ?= 'v')) option = OptionAnswer
;

ManyOptionsAnswer returns quiz::ManyOptionsAnswer:
	(options += ManyOption)+
;
ManyOption returns quiz::Option:
	'[' (correct ?= 'x')? ']' option = OptionAnswer
;

// junit

JunitTestAnswer returns junit::JunitTestAnswer: 
	'junit' testRunName = QName ('{' methodNames += ID (',' methodNames += ID)* '}')?
;

// jdt

JdtSourceEditAnswer returns jdt::JdtSourceEditAnswer: 
	'java' 'edit' className = QName ('{' methodNames += ID (',' methodNames += ID)* '}')?
;

JdtLaunchAnswer returns jdt::JdtLaunchAnswer: 
	'java' 'launch' className = QName
;

// workbench

TaskAnswer: PerspectiveTaskAnswer | PartTaskAnswer | CommandExecutionAnswer | DebugEventAnswer
		| JunitTestAnswer
		| JdtSourceEditAnswer
		| JdtLaunchAnswer
;

PerspectiveTaskAnswer returns workbench::PerspectiveTaskAnswer:
	{workbench::PerspectiveTaskAnswer} 'perspective'
	(elementId = QName ('#' action =
		('activated' | 'changed')
	)?)
;

PartTaskAnswer returns workbench::PartTaskAnswer: 
	{workbench::PartTaskAnswer} 'part'
	(elementId = QName ('#' action =
		('activated' | 'broughtToTop' | 'closed' | 'deactivated' | 'opened')
	)?)
;

CommandExecutionAnswer returns workbench::CommandExecutionAnswer: 
	{workbench::CommandExecutionAnswer} 'command'
	(elementId = QName ('#' action =
		('executeSuccess' | 'executeFailure')
	)?)
;

DebugEventAnswer returns workbench::DebugEventAnswer: 
	{workbench::DebugEventAnswer} 'debug'
	(elementId = QName ('#' action =
		('create' | 'terminate' | 'resume' | 'suspend' | 'stepInto' | 'stepOver' | 'stepReturn' | 'stepEnd' | 'breakpoint' | 'evaluation')
	)?)
;
